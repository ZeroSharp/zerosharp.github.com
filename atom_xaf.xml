<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-04-29T16:57:00+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Bonus - Simultaneous EasyTests]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/"/>
    <updated>2013-04-22T16:31:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests</id>
    <content type="html"><![CDATA[<p>In <a href="http://ZeroSharp.github.com/load-testing-xaf-overview">my recent series on load testing XAF</a>, I used a Selenium javascript test to run the client browser instances. This is a good and cheap method of validating the performance of XAF applications under production load.</p>

<p>However, if the load tests fail because of a concurrency bug or a performance bottleneck, it can still be difficult to analyse and solve. For this, we need to be able to simulate load locally against the development environment.</p>

<p>In this post I will demonstrate how to run multiple simultaneous XAF EasyTests against a local server. As a load test, it is not very scientific, but it can be extremely useful as a debugging tool.</p>

<h2>The EasyTest script</h2>

<p>First, we will create a new EasyTest which will cycle through the existing navigation tabs. Open the XAF MainDemo and create a new EasyTest as follows.</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.ets  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#Application MainDemoWeb
</span><span class='line'>
</span><span class='line'>*FillForm
</span><span class='line'> User Name = Sam
</span><span class='line'> Password =
</span><span class='line'>*Action Log On
</span><span class='line'>
</span><span class='line'>*Action Navigation(Contact)
</span><span class='line'>*Action Navigation(Task)
</span><span class='line'>*Action Navigation(Department)
</span><span class='line'>*Action Navigation(Scheduler Event)
</span><span class='line'>*Action Navigation(My Details)
</span><span class='line'>*Action Navigation(Note)
</span><span class='line'>*Action Navigation(Payment)
</span><span class='line'>*Action Navigation(Position)
</span><span class='line'>*Action Navigation(Resume)
</span><span class='line'>*Action Navigation(Role)
</span><span class='line'>*Action Navigation(User)
</span><span class='line'>*Action Navigation(Reports.Analysis)
</span><span class='line'>*Action Navigation(Reports.Reports)
</span><span class='line'>*Action Log Off
</span></code></pre></td></tr></table></div></figure>


<p>(This test replicates the Selenium test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a> of my previous series on load testing with NeuStar and Amazon.) It is important to note that we are only testing the web application and that we do not include a <code>#DropDB</code> directive.</p>

<p>First, ensure that you can run this test with the default settings.</p>

<h2>The config file</h2>

<p>Now modify the config.xml file as follows:</p>

<figure class='code'><figcaption><span>Config.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;Options</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">TestRunTimeLimit=</span><span class="s">&quot;5&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Applications&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Web --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Application</span>
</span><span class='line'>      <span class="na">Name=</span><span class="s">&quot;MainDemoWeb&quot;</span>
</span><span class='line'>      <span class="na">Url=</span><span class="s">&quot;http://localhost:4030&quot;</span>
</span><span class='line'>      <span class="na">SingleWebDev=</span><span class="s">&quot;True&quot;</span>
</span><span class='line'>      <span class="na">WebBrowserType=</span><span class="s">&quot;Standalone&quot;</span>
</span><span class='line'>      <span class="na">PhysicalPath=</span><span class="s">&quot;[ConfigPath]\..\MainDemo.Web&quot;</span>
</span><span class='line'>      <span class="na">AdapterAssemblyName=</span><span class="s">&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- For IIS --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;Application</span>
</span><span class='line'><span class="c">      Name=&quot;MainDemoWeb&quot;</span>
</span><span class='line'><span class="c">      Url=&quot;http://localhost/MainDemo.Web/Default.aspx&quot;</span>
</span><span class='line'><span class="c">      PhysicalPath=&quot;&quot;</span>
</span><span class='line'><span class="c">      DontRestartIIS=&quot;True&quot;</span>
</span><span class='line'><span class="c">      DontRunWebDev=&quot;True&quot;</span>
</span><span class='line'><span class="c">      WebBrowserType=&quot;Standalone&quot;      </span>
</span><span class='line'><span class="c">      AdapterAssemblyName=&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;/--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Applications&gt;</span>
</span><span class='line'><span class="nt">&lt;/Options&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few important things to note.</p>

<p>I have not shown the <em>Win</em> section here since we are not using it. Also, I am using XAF 12.2.8. You may need to change the version number in the <code>AdapterAssemblyName</code> attribute. I have increased the <code>TestRunTimeLimit</code> attribute from 3 to 5. Everything goes a little slower when there are multiple browsers and we need to make sure the test does not time out.</p>

<p>With the above config, the EasyTest will no longer run from within Visual Studio.</p>

<p>You can choose to run the simultaneous tests against the debug web server or IIS. Uncomment the relevant section. The interesting settings are:</p>

<ul>
<li><code>SingleWebDev="True"</code> which instructs the EasyTest runner to run all tests against the same instance of the development webserver. Without this, the webserver would be stopped and started for each test.</li>
<li><code>WebBrowserType="Standalone"</code> which causes each launched browser to be launched with its own session. (There are a few mentions of this setting in the support center, but it is not very well documented).</li>
<li><code>DontRestartIIS</code> and <code>DontRunWebDev</code> which are self-explanatory</li>
</ul>


<h2>The launch command</h2>

<p>Next, create the following batch file in the MainDemo.EasyTests subdirectory. ##</p>

<figure class='code'><figcaption><span>Launch.bat  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">:: Requires the Debug webserver to be running on port 49660</span>
</span><span class='line'><span class="c">:: Requires EasyTests to be enabled</span>
</span><span class='line'><span class="c">:: Requires NetDA to be running</span>
</span><span class='line'><span class="c">:: Requires admin rights</span>
</span><span class='line'><span class="c">:: Must be run from a command prompt</span>
</span><span class='line'><span class="c">::</span>
</span><span class='line'><span class="c">:: Usage: &gt; launch &lt;numberOfBrowsers&gt;</span>
</span><span class='line'><span class="c">:: e.g. : &gt; launch 21</span>
</span><span class='line'><span class="c">:: will launch 21 simultaneous browsers at 3 second intervals</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:DELETE_OUTPUT</span>
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.jpeg <span class="k">del</span> *.jpeg
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.html <span class="k">del</span> *.html
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> TestsLog.xml <span class="k">del</span> TestsLog.xml
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_ADMIN</span>
</span><span class='line'>net session <span class="p">&gt;</span><span class="n">nul</span> <span class="m">2</span>&gt;&amp;<span class="m">1</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%ERRORLEVEL%</span> <span class="o">equ</span> <span class="m">0</span> <span class="k">goto</span> <span class="nl">CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative command window
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%CMDCMDLINE%</span> <span class="p">|</span> <span class="n">find</span> <span class="n">/i</span> <span class="s2">&quot;/c&quot;</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">if</span> <span class="k">ERRORLEVEL</span> <span class="m">1</span> <span class="k">goto</span> <span class="nl">CHECK_PARAMS</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative console (not Windows Explorer)
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_PARAMS</span>
</span><span class='line'><span class="k">IF</span> [<span class="nv">%1</span>]<span class="o">==</span>[] <span class="k">GOTO</span> <span class="nl">USAGE</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LAUNCH</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LOOP</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%i%</span><span class="o">==</span><span class="nv">%1</span> <span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="nv">%i%</span>+<span class="m">1</span>
</span><span class='line'>start <span class="s2">&quot;x&quot;</span> <span class="s2">&quot;C:\Program Files (x86)\DevExpress\DXperience 12.2\Tools\eXpressAppFramework\EasyTest\TestExecutor.v12.2.exe&quot;</span> MainDemo_CycleThroughTabs.ets
</span><span class='line'><span class="c">:: Wait 3 seconds</span>
</span><span class='line'>ping <span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span> -n <span class="m">1</span> -w <span class="m">3000</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">goto</span> <span class="nl">LOOP</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:USAGE</span>
</span><span class='line'><span class="k">echo</span> Usage: <span class="nv">%0</span> numberOfBrowsers
</span><span class='line'><span class="k">echo</span> numberOfBrowsers must be an integer
</span><span class='line'><span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:OK</span>
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to run your tests against the development webserver, you will need to make sure it is running before launching the batch file. The easiest way to do this is to run the application from within Visual Studio and then close the browser. You should still see the development webserver running in the task bar notification area. Against IIS, it is enough to ensure it is started.</p>

<p>Now, open an administrative command prompt. Note that you must run from an administrative console: it is not sufficient to &#8216;run as administrator&#8217; from Windows Explorer. Navigate to the EasyTest subdirectory where the Launch.bat file is located and launch a single test with the following command:</p>

<pre><code>launch.bat 1
</code></pre>

<p>You should see the test run without error. If this works, you can then launch 20 simultaneous test runs with 3 second intervals by running:</p>

<pre><code>launch.bat 20
</code></pre>

<h2>Conclusion</h2>

<p>As a load test, you do not get much useful information. Even if we managed to extract accurate data for client response times and throughput, the overhead of running the multiple browsers would skew the results too much. However, this approach is extremely useful for isolating concurrency and performance problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 5 - Analysis]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/"/>
    <updated>2013-04-14T07:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis</id>
    <content type="html"><![CDATA[<p>This is the final post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4: Launching the load test</a></li>
</ul>


<p>In this part, we analyse the results of the load test we ran in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 4</a>.</p>

<h2>Results</h2>

<p>The results of the test we ran are <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">here</a>. The graphs are interactive and give quite interesting data about the load tests. Feel free to have a look and play around with the results.</p>

<h2>The Performance Graphs</h2>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-006.png"></p>

<p>The above graph shows the basic information about the test. We can see there were 649 transactions (the Selenium script was run 649 times) and there were 17 errors.</p>

<p>You can see that the test managed to follow the planned scenario (the actual number of users follows the yellow line). You can also see information about the throughput in bytes during the test.</p>

<h2>The Script Performance Graphs</h2>

<p>Here we see information pertaining to the script we chose to run. Had we run multiple different scripts, we would be able to isolate each one.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-009.png"></p>

<p>It is clear that the transaction time rises quite slowly with the load until about 12:17 when there is a jump. More on that later.</p>

<p>First, I have removed the plot of the total transaction time, so that we can see more detail from the remaining steps. Two things seem to be clear: the response time for each individual step does not seem to be much affected by the load, but the login step rises gradually.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-010.png"></p>

<p>Now back to the spike at 12:17, if you look at the transaction data more closely (not shown here but available on the <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">NeuStar results page</a>, it looks like several transactions finished at the same time and that the jump coincides with several simultaneous logins.</p>

<p>So again, it seems that login is the &#8216;weakest link&#8217;, i.e., the most resource intensive step and the one that suffers the most under load.</p>

<h2>The Errors</h2>

<p>Lets look more closely at the errors.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-007.png"></p>

<p>The first type of error we can see from the screen-shot occurred at the login page. This error happened 6 times and was very similar to another error which occurred once. In fact, all 6 of these errors happened at the very end of the test. As such, they can be ignored, because it is likely that the load test was scaling down and interrupting sessions at this point.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-008.png"></p>

<p>One of the very nice features of NeuStar&#8217;s load testing solution is that you not only get a screenshot, but also a video which shows you exactly what the user experienced when an error occurs. By clicking on the second error, it looks like there may be a problem  when the system is under load. There were 6 errors and it is clear in the video that the errors occur when attempting to navigate away from the <em>Scheduler Event</em> view to the <em>My Details</em> view. The screen-shot gives us some useful information. DevExpress? Any ideas?</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-011.jpg"></p>

<p>There are a couple of other errors, but I think these are most likely a result of problems with the Selenium script rather than XAF. The AJAX update panels make it quite hard to detect when the page is fully ready and although we try to accommodate this with <code>selenium.waitForCondition()</code> my feeling is that the <code>click()</code> occurred before everything was properly wired up.</p>

<h2>Further tests</h2>

<p>This series has covered the process of load testing XAF applications in its entirety, but in some ways, it feels like only the beginning. There are many other configurations and tests which would be interesting.</p>

<p>For instance</p>

<ul>
<li>Reduce think time which is currently set to 3 seconds per step</li>
<li>Use a smaller/larger EC2 instance</li>
<li>Increase the number of virtual users</li>
<li>Try load balancing with sticky sessions</li>
<li>Experiment with/without compression (IIS or via the <code>web.config</code>)</li>
<li>Experiment with/without caching (both at the http level, and via the <a href="http://documentation.devexpress.com/#XPO/CustomDocument9892">cached data store</a></li>
</ul>


<p>There are also many ways of improving XAF performance that are not in the MainDemo. These include:</p>

<ul>
<li><a href="http://documentation.devexpress.com/#wpf/CustomDocument6279">Server mode</a> in all grids</li>
<li><a href="http://community.devexpress.com/blogs/xpo/archive/2006/03/27/session-management-and-caching.aspx">XPO Caching</a></li>
<li>Where possible, move any heavy operations to a separate asynchronous web service call</li>
</ul>


<p>We have implemented all of these in our production application.</p>

<h2>A note about concurrency</h2>

<p>In our experience, people tend to over estimate the number of concurrent users for their application. Our application has probably upwards of 5000 users defined, but we know from our logs that there have never been more than 80 simultaneously logged in. Also, even with 80 concurrent users, they have a much longer &#8216;think time&#8217; than 3 seconds on average.</p>

<p>For the production environment, we run at least one 25 user test for every major release and ensure the performance is at least as good as the previous release. We have occasionally run tests with up to 200 simultaneous users. The response time goes down to unacceptable levels (~30 seconds), but the application behaves. In production, the system is load balanced (with sticky sessions) and we know from previous experience that this is sufficient for our application.</p>

<h2>Conclusion</h2>

<p>This concludes my series on load testing. We&#8217;ve managed to get some very useful information with some very low-cost tools. The largest part of effort is the writing of the Selenium script which is certainly tricky. In the future I&#8217;d really like to harness the DevExpress EasyTests to replace the script but I haven&#8217;t yet found a way of doing this. Feel free to use my Selenium script as a starting point for testing your own XAF applications, and let us know of any interesting results!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we&#8217;ll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select &#8216;Create a new script&#8217;. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 2 - Selenium]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/"/>
    <updated>2013-03-28T16:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium</id>
    <content type="html"><![CDATA[<h1>Writing a Selenium User Test against MainDemo</h1>

<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
</ul>


<h2>Why not use DevExpress EasyTests?</h2>

<p>The DevExpress recommended method of writing functional tests is to use the EasyTest functionality of the expressAppFramework. This has several advantages over other functional testing approaches.</p>

<ul>
<li>It uses a domain specific language tailored for XAF making it easy to test views and actions</li>
<li>It makes it easy to interact with the DevExpress controls that are used within XAF</li>
<li>A single EasyTest can be run against both the ASP.NET and WinForms applications</li>
<li>EasyTests work against both the debug webserver and IIS</li>
</ul>


<p>However, one feature which is not (yet) available is the ability to use EasyTests for load testing.</p>

<p><strong>UPDATE</strong>: See my <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests">more recent post</a> on how run multiple simultaneous EasyTests.</p>

<h2>Modifications to the MainDemo</h2>

<p>The sample script I have written assumes the MainDemo is running with <em>Horizontal Navigation</em> rather than vertical. You can modify the script to add support for vertical navigation or you can change Global.asax.cs Application_Start as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>
</span><span class='line'><span class="gi">+    // Add the following line to default to horizontal layout</span>
</span><span class='line'><span class="gi">+    WebWindowTemplateHttpHandler.PreferredApplicationWindowTemplateType = DevExpress.ExpressApp.Web.Templates.TemplateType.Horizontal;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>The Selenium script</h2>

<p>Selenium is a powerful tool for automating browsers. It supports all of the major browsers and a Selenium test can be written in many different programming languages (C#, Java, Javascript, HTML, <em>etc.</em>) The load testing tool (which we will come to in part 3 of this series) uses Selenium scripts written in Javascript.</p>

<p>We will now create and verify a simple Selenium test. The test will open the browser, login to the MainDemo and cycle through all of the tabs before logging out. The script is extremely basic. For a more realistic load test, you want a combination of scripts running, some entering data, some triggering reports, etc.</p>

<p>Create a \scripts subdirectory and populate it with the following code:</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* global test */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for Neustar:</span>
</span><span class='line'><span class="c1">// replace the following with the public address of the application server,</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetHost</span> <span class="o">=</span> <span class="s2">&quot;http://zerosharp-maindemo.elasticbeanstalk.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">virtualShare</span> <span class="o">=</span> <span class="s2">&quot;MainDemo.Web_deploy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for debug webserver:</span>
</span><span class='line'><span class="c1">// (local script validator doesn&#39;t always work against localhost,</span>
</span><span class='line'><span class="c1">// so we use the excellent localtest.me instead.)</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me:58404&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for the build server or IIS:</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me/&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;MainDemo.Web&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thinkTimeInSeconds</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You an optionally set the simulated bandwidth for the script</span>
</span><span class='line'><span class="c1">// (max of 100KB/sec). A value of -1 means do not limit.</span>
</span><span class='line'><span class="c1">// E.g., </span>
</span><span class='line'><span class="c1">// var bandwidthLimit = 50 * 1024 * 8; // 50KB/sec</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bandwidthLimit</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="nx">test</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selenium</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getSelenium</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Support functions</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">think</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">test</span><span class="p">.</span><span class="nx">isValidation</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">test</span><span class="p">.</span><span class="nx">pause</span><span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">waitForCallbacks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForCondition</span><span class="p">(</span><span class="s2">&quot;(typeof selenium.browserbot.getUserWindow().xafHasPendingCallbacks === &#39;function&#39;) &amp;&amp; (selenium.browserbot.getUserWindow().xafHasPendingCallbacks() === false);&quot;</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogin</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Login&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">targetHost</span> <span class="o">+</span> <span class="nx">virtualShare</span> <span class="o">+</span> <span class="s2">&quot;/Default.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviUserName_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviPassword_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;Logon_PopupActions_Menu_DXI0_T&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogoff</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expectedSubstring</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Logoff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//li[@class=&#39;dxm-item&#39;]/div[@class=&#39;dxm-content dxm-hasText&#39;]//a[@class=&#39;dx dxalink&#39; and text()=&#39;Log Off&#39;]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expectedSubstring</span> <span class="o">=</span> <span class="s2">&quot;Logout.html&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="nx">maintabCaption</span><span class="p">,</span> <span class="nx">tabCaption</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// viewCaption is optional</span>
</span><span class='line'>    <span class="nx">viewCaption</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">viewCaption</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">tabCaption</span> <span class="o">:</span> <span class="nx">viewCaption</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - &quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">isVisible</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">initializetest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">bandwidthLimit</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="p">.</span><span class="nx">setSimulatedBps</span><span class="p">(</span><span class="nx">bandwidthLimit</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializetest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">stepLogin</span><span class="p">(</span><span class="s2">&quot;Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//stepNavigateToTab(&quot;Default&quot;, &quot;Contact&quot;);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Task&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Department&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Scheduler Event&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;My Details&quot;</span><span class="p">,</span> <span class="s2">&quot;User - Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Note&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Payment&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Position&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Resume&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Role&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Analysis&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Reports&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepLogoff</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">closeBrowser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endTransaction</span><span class="p">();</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Neustar</h2>

<p>In a future post we will create multiple test runners in the Amazon cloud using the <a href="https://home.wpm.neustar.biz/">Neustar web performance tool</a> (formerly BrowserMob). Neustar will gather statistics about each scripts reponse times and provide a load test report including details of any test failures.</p>

<p>For now we will verify locally that the Selenium script above works as expected.</p>

<h3>Installing the Neustar local script validator</h3>

<p>In order to verify that our script is supported by the Neustar framework, we need to install their <a href="http://static.wpm.neustar.biz/tools/local-validator.tar.gz">local script validator</a>. Download it and unzip it to a subdirectory of the MainDemo.</p>

<p>There are <a href="http://community.webmetrics.com/community/wpm/blog/2012/10/02/neustar-script-local-validator-user-guide-for-windows">instructions for setting up local script validation here</a>.</p>

<p>To run the script locally call the following:</p>

<pre><code>&gt; script-validator-4.8.81\bin\validator.bat CycleThroughTabs.js -keepbrowseronerror
</code></pre>

<p>I had some problems getting the NeuStar script validator to work in 64-bit Windows 8. The script validator instructions recommend FireFox 12 but I am using version 19. For the record I am using:</p>

<ul>
<li>DevExpress MainDemo 12.2.7</li>
<li>NeuStar localscriptvalidator 4.8.81</li>
<li>Mozilla FireFox 19</li>
<li>Java 7.0.90</li>
</ul>


<p>You need to modify your <code>C:\Users\&lt;Username&gt;\.wpm\config.properties</code> file as follows:</p>

<figure class='code'><figcaption><span>config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">FF</span><span class="o">=</span><span class="s">C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, for some reason, I could not get the local script validator to run against localhost. I kept getting the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARN 03/28 12:38:28 b.n.w.a.s.JavaScrip~ - Got script exception
</span><span class='line'>org.mozilla.javascript.WrappedException: Wrapped biz.neustar.webmetrics.agent.ap
</span><span class='line'>i.HttpErrorException: No valid HTTP Response received while navigating to URL 'h
</span><span class='line'>ttp://localhost:58404/Default.aspx' (CycleThroughTabs.js#50)</span></code></pre></td></tr></table></div></figure>


<p>The easiest solution was to change the localhost address in the javascript file to the excellent localhost alternative <a href="http://readme.localtest.me/">localtest.me</a>.</p>

<p>Now when I run the script using the local validator with</p>

<pre><code>&gt; validator cyclethroughtabs.js
</code></pre>

<p>I see Firefox startup after a few seconds and the script correctly cycles through all of the tabs and then exits.</p>

<p>We will use this scenario as the basis of a load test in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 1 - Deploying]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/"/>
    <updated>2013-03-22T11:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying</id>
    <content type="html"><![CDATA[<p>This is the first part of a tutorial about load testing XAF applications. See the <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">overview</a> for a bit of background. In this post we set up the target webserver.</p>

<p>You can target any machine which has a publicly available web address, but for this tutorial, I&#8217;m&#8217; deploying the MainDemo to the Amazon cloud, by following the instructions in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> and <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> of my previous series about Amazon Web Services.</p>

<p>I am using version 12.2.7 of the DevExpress XAF MainDemo. There are a couple of extra changes to make to the web.config.</p>

<ul>
<li>Set debug to false <code>&lt;compilation targetFramework="4.0" debug="false"&gt;</code> in the <code>&lt;compilation&gt;</code> section of <code>&lt;system.web&gt;</code></li>
<li>Switch to <em>Release</em> mode before deploying.</li>
</ul>


<p>There are a couple of differences compared to the tutorial:</p>

<ul>
<li>I chose a <em>Medium</em> instance instead of a <em>Micro</em> instance for EC2 (the web server) and deployed it against IIS 8.</li>
<li>For RDS (the database), I stuck with a <em>Micro</em> instance.</li>
</ul>


<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-001.png"></p>

<p>For the load test, it is also important to disable the automatic health checks performed by the load balancer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-002.png"></p>

<p>The reason for this is that we are trying to determine the breaking point of our application. If the elastic load balancer detects that a system is struggling, it might automatically flag it as unhealthy and replace it with a newly launched instance. While this behaviour might be desirable for a production system, it doesn&#8217;t make sense for a load test.</p>

<p>Make sure you can connect to your installation from a web browser before continuing. I chose to deploy to a Windows 2012 instance running IIS 8.0 (which was not available when I wrote my previous XAF AWS tutorial) and I had a little trouble with the URL. If I navigate to the application&#8217;s base URL (<em>http://zerosharp-maindemo.elasticbeanstalk.com/</em> in my case), then I get forwarding problems after logging in. Instead, I navigate to the full address <em>http://zerosharp-maindemo.elasticbeanstalk.com/MainDemo.Web_deploy/Default.aspx</em> and everything works. I&#8217;ll try to look into it later, but it&#8217;s not important for the load testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Overview]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-overview/"/>
    <updated>2013-03-12T18:20:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-overview</id>
    <content type="html"><![CDATA[<p>Over the next few posts, I will demonstrate how to load test XAF web applications.</p>

<h2>History</h2>

<p>Performance testing has traditionally been difficult and expensive. A few years ago, to do it well required a powerful piece of dedicated load testing software such as HP LoadRunner (typical cost back in 2007: USD 50,000-100,000 or more per year!). This software was capable of simulating multiple virtual users via the use of recorded scripts and providing detailed performance statistics. Usually the cost was increased further increased by the need for powerful hardware to be able to run the application.</p>

<p>In 2007 we were required by a big customer (a global bank) to provide load testing statistics for our expressApp Framework application. We could not afford anything as sophisticated as LoadRunner so we went with a cheaper alternative (NeoLoad, which was still several thousand per year). It was extremely painstaking work to produce a test. The approach was to record the http requests (as a stream of text values) and write a script to check the http response. Since there was no real browser involved, it was very difficult to determine if our test was really representative. Several machines in the office had to be dedicated to simulating virtual users. Nobody was allowed to use the internet for fear of skewing the results during a test. If an error occurred, it was almost impossible to determine what went wrong. We wrestled with it and managed to fulfill our requirements, but it was all a lot of effort for no real return.</p>

<p>Part of the problem was certainly that XAF is complex to test. The user interface is rich and makes use of complex controls. Most of these load testing tools work better when targetting a simple <code>&lt;INPUT type="button"&gt;</code> rather than an image of a button that sometimes is not even clickable until the mouse has hovered over it. DevExpress have made it easy to run tests via their EasyTests, but no load testing tool supports them yet. (They have informed me it&#8217;s in their plans&#8230;)</p>

<h2>Enter the cloud</h2>

<p><span class='pullquote-right' data-pullquote='The increased availability of cheap cloud-based virtualised machines has revolutionised load testing.'></p>

<p>The basic idea is this: instead of simulating users with specialised software, why not fire up a virtual machine and test with a real browser instance which is &#8216;remote controlled&#8217; via a script.</p>

<p>The increased availability of cheap cloud-based virtualised machines has revolutionised load testing. The rental of the virtualised machines is not free, but it is very cheap.  In about 2008, I started using the Amazon cloud to perform load tests. Our basic test costs us about USD 10.00 per run. We probably run this a dozen times a year, so our total cost is about USD 120.00 per year.
</span></p>

<p>We get better statistics than we ever got out of NeoLoad. We are confident that the test is realistic and we can compare with the actual performance of our production environments. We have been able to find and solve memory leak problems and various tricky multi-user problems with these tests.</p>

<p>Load testing is still a complex business. There are a lot of pieces to put together, but with the cloud, each piece is relatively simple and cheap.</p>

<h2>The solution</h2>

<ul>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, we install the DevExpress MainDemo on an Amazon EC2 instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>, we use Selenium to write a script which will run on the client machines to control a real browser instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3</a>, we create a NeuStar Web Performance test and validate the script.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4</a>, we launch a performance test and monitor the server.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/">Part 5</a>, we analyse the results of the clients.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/">a bonus part</a>, we learn how to run multiple simultaneous EasyTests as an alternative method of isolating performance and concurrency problems.</li>
</ul>


<p>If you follow all the steps, expect to pay a handful of dollars in Amazon EC2 costs and a few more in Neustar costs. You could alternatively skip step 1 and target one of your own development machines instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better handling of Decimals in the XAF audit trail]]></title>
    <link href="http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail/"/>
    <updated>2013-01-15T10:29:00+00:00</updated>
    <id>http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail</id>
    <content type="html"><![CDATA[<p>The following screenshot shows the detail view of an object change from the DevExpress XAF Audit Trail. The <code>DecimalValue</code> property was changed from 123.45 to 543.22.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-001.jpg"></p>

<p>Why is the <code>OldValue</code> property is displayed with two trailing zeros? The corresponding property is defined as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DefaultClassOptions]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="n">XPObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyClass</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">decimal</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'><span class="na">    [ModelDefault(&quot;DisplayFormat&quot;, &quot;{0:n2}&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">decimal</span> <span class="n">DecimalValue</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">SetPropertyValue</span><span class="p">(</span><span class="s">&quot;DecimalValue&quot;</span><span class="p">,</span> <span class="k">ref</span> <span class="n">_DecimalValue</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">ChangeHistory</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_ChangeHistory</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_ChangeHistory</span> <span class="p">=</span> <span class="n">AuditedObjectWeakReference</span><span class="p">.</span><span class="n">GetAuditTrail</span><span class="p">(</span><span class="n">Session</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Explanation and fix</h3>

<p>A C# <code>decimal</code> is a type which represents a number&#8217;s value <em>and its precision</em>. It actually stores the number of trailing zeros along with the value. For the <code>NewValue</code>, it has stored the decimal value as the user entered it - with no trailing zeros. Howevever, for the <code>OldValue</code>, it has retrieved the value from the database and used the SQL column definition to determine the precision.</p>

<p>The default SQL column type that XPO column type for properties of type <code>decimal</code> is the <code>money</code> type (<a href="http://msdn.microsoft.com/en-us/library/aa933242.aspx">see the MSDN documentation</a>) which stores 4 decimal places of precision. If we override this with, say, a <code>DECIMAL(28, 13)</code>, the audit trail would show 13 decimal places of precision.</p>

<p>From the user&#8217;s perspective, this looks a little confusing, so let&#8217;s fix it.</p>

<p>During the initialization of your application (in Application_Start for a web application), add an event to the <code>AuditTrailService</code> as follows.</p>

<pre><code>AuditTrailConfig.Initialize();
</code></pre>

<p>and then declare the <code>AuditTrailConfig</code> helper class as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">AuditTrailConfig</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AuditTrailService</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">SaveAuditTrailData</span> <span class="p">+=</span> <span class="n">Instance_SaveAuditTrailData</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Instance_SaveAuditTrailData</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">decimalAuditTrailDataItems</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">AuditTrailDataItems</span>
</span><span class='line'>                                          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">OldValue</span> <span class="k">is</span> <span class="kt">decimal</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">AuditDataItem</span> <span class="n">auditTrailItem</span> <span class="k">in</span> <span class="n">decimalAuditTrailDataItems</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// remove any trailing zeros from OldValue</span>
</span><span class='line'>            <span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span> <span class="p">=</span> <span class="p">((</span><span class="kt">decimal</span><span class="p">)</span><span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span><span class="p">).</span><span class="n">Normalize</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Normalize()</code> method is an extension method. See the <a href="http://ZeroSharp.github.com/how-to-remove-the-trailing-zeros-of-precision-from-a-c-number-decimal/">trick in my last post</a> for more information.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DecimalExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">decimal</span> <span class="nf">Normalize</span><span class="p">(</span><span class="k">this</span> <span class="kt">decimal</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">value</span> <span class="p">/</span> <span class="m">1.000000000000000000000000000000000</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the same change would be logged as follows.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-002.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 5]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/"/>
    <updated>2012-12-05T11:03:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing</id>
    <content type="html"><![CDATA[<h2>Part 5: Load balancing</h2>

<p>This is the final post in this 5 part series about deploying XAF to the Amazon cloud. The other parts are:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1 - Creating a database in RDS</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2 - Deploying to ElasticBeanstalk</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
</ul>


<p>This part covers load balancing and autoscaling.</p>

<h3>Load balancing</h3>

<p>In order to enable load balancing with DevExpress XAF applications, you must activate client affinity (sticky sessions) which you can do in the <strong>Load Balancer tab</strong>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-2.jpg" title="'figure 19'" ></p>

<p>This is because XAF relies http session variables (notably the <code>WebApplication</code>). With sticky sessions enabled, when a user first hits the Elastic Load Balancer, they are assigned a random server but all subsequent requests are routed to the same server instance.</p>

<h2>Autoscaling</h2>

<h3>Adding Capacity (Works)</h3>

<p>Switch to the <strong>Auto Scaling</strong> tab of the Elastic Beanstalk instance.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-1.jpg" title="'figure 19'" ></p>

<p>The options for autoscaling are extensive and there is plenty information on the <a href="http://aws.amazon.com/autoscaling">Amazon website</a>. In the above screenshot we have the Elastic Load Balancer configured so that it will initially deploy 1 server (the Minimum Instance Count), but whenever the NetworkOut measurement of 600,000 bytes over a 5 minute interval, a new server launch is triggered up to a maximum of 4 servers. Adding capacity works fine with XAF applications.</p>

<h3>Removing Capacity (Fails)</h3>

<p>The configuration above also shows that if the NetworkOut drops to below 200,000 bytes over a period of 5 minutes then the number of servers should decrease. <strong>This will NOT work</strong>.</p>

<p>The problem is that the Elastic Load Balancer will terminate the surplus server immediately (the equivalent of a <code>shutdown -s</code>). Any users connected to that server will immediately lose their session and will probably receive an ugly error.</p>

<p>One workaround is to allow scaling out but to disable scaling in. To do this, set the &#8216;Lower Threshold&#8217; to zero.</p>

<h3>Possible Improvements</h3>

<p>There are a couple of potential longer term solutions to the problem of dropped sessions when scaling in.</p>

<p>DevExpress could make the classes they use in the session variables serializable (e.g., <code>WebApplication</code>). When this is the case, the application can be configured to store the session variables to a persistent data store (SQL Server for instance) instead of in the session and then we could configure autoscaling to work correctly. There is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q426045">an item in the Support Center in this regard</a> and <a href="http://www.devexpress.com/Support/Center/p/S36497.aspx">another one here</a>.</p>

<p>Another solution would be if Amazon provided a new option to handle a server termination in a less brutal fashion. That is, stop routing new users to the surplus server but continue to server existing users until their sessions have all terminated. This approach is discussed in <a href="https://forums.aws.amazon.com/thread.jspa?threadID=61278">this AWS forum thread</a>.</p>

<h2>Conclusions</h2>

<p>The load balancing features of AWS work fine with XAF applications, but the benefits of autoscaling are lost because there is currently no effective method of removing capacity without knocking out existing sessions.</p>

<h2>What next</h2>

<p>In a future series, I will demonstrate how to load test XAF applications cheaply and effectively by making use of Amazon Web Services. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 4]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/"/>
    <updated>2012-11-05T14:16:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment</id>
    <content type="html"><![CDATA[<h2>Part 4: Incremental Deployment</h2>

<p>This is the fourth post in a series about deploying ASP.NET applications to the Amazon cloud. In the first three posts covered deploying the XAF ASP.NET MainDemo to the Amazon cloud (<a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3</a>).</p>

<p>When we deployed to the Elastic Beanstalk in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, we chose <em>not</em> to enable incremental deployment.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>I want to explain this decision further.</p>

<p>If you choose not to deploy incrementally your deployment will take longer because the entire web deployment package needs to be uploaded every time you re-publish which takes about 4-5 minutes on my connection. The incremental deployment option creates a git repository in the target environment so that only the modified files are re-deployed. If you are frequently making changes and redploying, you can save considerable time. A re-deployment takes only a few seconds.</p>

<p>However, if you try to deploy from the default MainDemo location with incremental deployment enabled, you will probably get the following error</p>

<pre><code>Commencing deployment for project MainDemo.Web
...building deployment package obj\Release\Package\Archive...
...deployment package created at C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.Web\obj\Release\Package\Archive
...build of project archive completed succesfully
...starting deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo'
...starting incremental deployment to environment 'zerosharp-maindemo'
Deployment to AWS Elastic Beanstalk failed with exception: Exception caught during execution of add command,
Inner Exception Message: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
...
Deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo' did not complete successfully
</code></pre>

<p>The problem is with the NGit libraries that the AWS Toolkit uses. Presumably a fix will emerge, but the simplest workaround is to move the application to a shorter path. Then you can enable incremental deployment when you publish:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-incremental-2.jpg" title="'figure 21'" ></p>

<p>Note that you can toggle incremental deployment whenever you publish, so you&#8217;re not locked in either way.</p>

<h2>Next up</h2>

<p>In the <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">next post</a> we will enable load balancing (which is easy) and discuss the problems with autoscaling XAF applications (which is not).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 3]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/"/>
    <updated>2012-11-02T17:54:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop</id>
    <content type="html"><![CDATA[<h1>Part 3: Troubleshooting</h1>

<p>This is the third post in a series about deploying ASP.NET applications to the Amazon cloud.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> we created an Amazon RDS instance of SQL Server to act as the database for the deployment.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> we published the DevExpress MainDemo.Web to the Amazon Elastic Beanstalk.</p>

<p>In this part we will look at troubleshooting methods and in particular how to connect to an EC2 instance in order to troubleshoot installations.</p>

<h2>The Beanstalk Events tab</h2>

<p>When there is a problem with the deployment, the first place to look is in the Elastic Beanstalk events tab. You will find warnings and error messages which frequently point to the source of any problem.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-events-1.jpg" title="'figure 18'" ></p>

<p>Sometimes, the events window point to a log file which is automatically generated in an S3 bucket. By opening S3 in the AWS Explorer, you can find and download the log file which usually has excellent error information in it, for instance:</p>

<figure class='code'><figcaption><span>An example log file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2012-11-02T12:37:13.000Z Warning 3:Web Event ASP.NET 4.0.30319.0 - Event code: 3008
</span><span class='line'>    Event message: A configuration error has occurred.
</span><span class='line'>    [...]
</span><span class='line'>
</span><span class='line'>    Application information:
</span><span class='line'>    Application domain: /LM/W3SVC/1/ROOT/MainDemo.Web_deploy-2-129963334311133960
</span><span class='line'>    Trust level: Full
</span><span class='line'>    Application Virtual Path: /MainDemo.Web_deploy
</span><span class='line'>    Application Path: C:\inetpub\wwwroot\MainDemo.Web_deploy\
</span><span class='line'>    Machine name: AMAZONA-C6H7CEI
</span><span class='line'>
</span><span class='line'>    Process information:
</span><span class='line'>    Process ID: 2436
</span><span class='line'>    Process name: w3wp.exe
</span><span class='line'>    Account name: IIS APPPOOL\DefaultAppPool
</span><span class='line'>
</span><span class='line'>    Exception information:
</span><span class='line'>    Exception type: ConfigurationErrorsException
</span><span class='line'>    Exception message: Could not load file or assembly 'DevExpress.ExpressApp.AuditTrail.v12.1, Version=12.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a' or one of its dependencies. The system cannot find the file specified. (C:\inetpub\wwwroot\MainDemo.Web_deploy\web.config line 94)
</span><span class='line'>      at System.Web.Configuration.CompilationSection.LoadAssemblyHelper(String assemblyName, Boolean starDirective)
</span><span class='line'>      at System.Web.Configuration.AssemblyInfo.get_AssemblyInternal()
</span><span class='line'>      at System.Web.Compilation.BuildManager.GetReferencedAssemblies(CompilationSection compConfig)
</span><span class='line'>      at System.Web.Compilation.BuildManager.CallPreStartInitMethods(String preStartInitListPath)
</span><span class='line'>      at System.Web.Compilation.BuildManager.ExecutePreAppStart()
</span><span class='line'>      at System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException)
</span><span class='line'>    [...]</span></code></pre></td></tr></table></div></figure>


<h2>Connecting via Remote Desktop</h2>

<p>If you&#8217;re still in the dark, you can use Windows Remote Desktop to connect to the EC2 machine to troubleshoot.</p>

<p>In the AWS Explorer, go to <strong>Amazon EC2/Instances</strong>.</p>

<p>There are two ways of connecting. You can <strong>Get Windows Passwords</strong>, but this takes about an hour for the password to be decrypted.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-troubleshooting-1.jpg" title="'figure 19'" ></p>

<p>Alternatively, you can <strong>Open Remote Desktop</strong> and then <strong>Use EC2 keypair to logon</strong>. You should have the <em>.pem</em> private key file associated with the EC2 key pair that was used to launch the instance (it was created when you created your AWS account or when you launched your first EC2 instance). Whenever an EC2 instance is provisioned, it is launched with an EC2 key pair (you selected a keypair to use in the wizard above). You can open the .pem file and cut and paste the key into the remote desktop window.</p>

<p>You will then be logged in as an Administrator on the EC2 Instance running Windows 2008 R2. You can perform whatever operations you see fit - install software, change Control Panel options, restart IIS, <em>etc.</em> The changes will last until you terminate the instance (by deleting the Elastic Beanstalk stack for example).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-troubleshooting-2.jpg" title="'figure 20'" ></p>

<p>Note that it is easy to create new key pairs if you can&#8217;t find the .pem file, but you cannot change the key pair of a running instance. (You should terminate and launch again with the new key pair). One nice feature of the AWS Toolkit, is that if you create a new key pair within Visual Studio, you can choose to store the private key in the Toolkit.</p>

<h2>Next up</h2>

<p>The <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">next post</a> will cover incremental deployment options.</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">Part 5 - Load balancing</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 2]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/"/>
    <updated>2012-10-31T12:52:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo</id>
    <content type="html"><![CDATA[<h1>Part 2: Publishing MainDemo</h1>

<p>This is the second post in a series about deploying ASP.NET applications to the <a href="http://aws.amazon.com/">Amazon cloud</a>.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> we created an Amazon RDS instance of SQL Server to act as the database for the deployment. Make sure this is up and running before continuing.</p>

<p>This part guides you through publishing the <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> MainDemo application to the Amazon Elastic Beanstalk.</p>

<h2>Amazon Elastic Beanstalk</h2>

<p><span class='pullquote-right' data-pullquote='Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring.'>
Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring. <strong>That sounds like a lot of features we don&#8217;t really need</strong> for the MainDemo, so let me explain.</p>

<p>With Amazon Web Services, the choices are endless. An Amazon EC2 instance is a virtual machine running an actual Windows (or other) operating system that you can connect to with Remote Desktop and configure however you want. It might seem that the simplest would be to put everything on a &#8216;single machine&#8217; instance. However, the default &#8216;single machine&#8217; does not have SQL Server Express installed. We could connect to it and install it, but it ends up being a lot of extra steps. There are other Amazon Machine Images (AMIs) that include SQL Server Express, but these don&#8217;t support automatic deployment from Visual Studio.
</span></p>

<p>In fact (and Amazon should advertise this better), the Elastic Beanstalk is designed to make it very simple to deploy applications quickly <strong>even if you have no intention of ever needing more than a single little instance</strong>. It is the recommended starting point for all new deployments regardless of size. Ignore the long list of amazing additional features for now, (but one day you might need them.)</p>

<h2>Prepare the MainDemo for deployment</h2>

<p>First we need to fix a few problems with the MainDemo. (These will cause deployment in problems any environment, not just Amazon Web Services.)</p>

<ul>
<li>remove the reference to <em>stdole</em> in the web.config <em>&lt;assemblies&gt;</em> section</li>
<li>add a reference to the project <em>DevExpress.XtraPrinting.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.XtraNavBar.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.Utils.v12.1.UI</em></li>
<li>set the <em>CopyLocal</em> flag to true for all DevExpress assemblies</li>
</ul>


<p>(Some of these might have been fixed if you are using a newer release of XAF than 12.1.7.)</p>

<p>Also, if there are any errors, we don&#8217;t get much useful feedback unless we turn custom errors off. Go to the web.config and add a tag just before the end of the <em>&lt;system.web&gt;</em> section.</p>

<pre><code>    ...
      &lt;customErrors mode="Off"/&gt;
    &lt;/system.web&gt;
</code></pre>

<p>Make sure you can build without errors.</p>

<h2>Deploy to Elastic Beanstalk</h2>

<p>You might like to switch to <strong>Release</strong> mode since we will be publishing. Right click on the MainDemo.Web project in the Solution Explorer and select <strong>Publish to AWS&#8230;</strong></p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-solution-explorer-1.jpg" title="'figure 9'" ></p>

<p>This opens the AWS publishing wizard. Select the <strong>AWS Elastic Beanstalk</strong> template.  I have also selected to deploy in the <strong>EU West (Ireland)</strong> region. Click <strong>Next</strong>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-1.jpg" title="'figure 10'" ></p>

<p>Make sure you uncheck the <strong>Deploy application incrementally</strong> checkbox (see the upcoming Part 4 for more information on this option).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>The next few screens are self-explanatory.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-3.jpg" title="'figure 12'" ></p>

<p>(Note the keypair property is referred to in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3</a> in the section about connecting via Remote Desktop.)</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-4.jpg" title="'figure 13'" ></p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-6.jpg" title="'figure 14'" ></p>

<p>The following screen appears only if we have active RDS instances running (whcih you should if you followed <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>). It allows us to add a permission for the application to access the database. This can also be done manually via the <em>Security Groups</em> section in the AWS Explorer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-7.jpg" title="'figure 15'" ></p>

<p>The last screen summarizes all the choices so far.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-8.jpg" title="'figure 16'" ></p>

<p>After you click <strong>Launch</strong>, you can follow the progress in the Amazon Web Services output window. It will upload the MainDemo web deployment package to a temporary S3 bucket. It will then provision an EC2 instance and install the application to it. It will also provision an Elastic Load Balancer and connect up all the pieces. This will all take a few minutes.</p>

<h2>Navigate to the Deployed MainDemo</h2>

<p>Launch your browser and navigate to the instance web address which will look something like <strong>http://zerosharp-maindemo.elasticbeanstalk.com/</strong>. It should forward you to the login page. Login as Sam. Depending on whether the database needs to be created, this may take a couple of minutes and may even time out. I had to wait a minute and then click Login again before I was in.</p>

<p>When you have finished <strong>don&#8217;t forget to terminate both the Elastic Beanstalk application and the DB Instance</strong> (right click and &#8216;Delete&#8217; from the AWS Explorer) otherwise you will be charged for the time the machines are provisioned. You can always check that everything has terminated properly in the <a href="https://console.aws.amazon.com/">AWS Console</a>.</p>

<h2>Next up</h2>

<p>In the next posts we will look some additional details:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">Part 5 - Load balancing</a></li>
</ul>


<h4>References</h4>

<ul>
<li>The <a href="https://www.youtube.com/watch?v=z-N0z5K_WFI">Amazon tutorial for the AWS Visual Studio Toolkit</a></li>
<li>Nathanial Woolls has written an excellent similar article on hosting <a href="http://nwoolls.wordpress.com/2012/09/20/hosting-xaf-asp-net-projects-using-azure-web-sites/">XAF ASP.NET applications on Azure</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 1]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/"/>
    <updated>2012-10-23T12:52:00+01:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud</id>
    <content type="html"><![CDATA[<h1>Part 1: Putting the Database in the Cloud</h1>

<p>This is the first part of a tutorial for installing the DevExpress MainDemo.Web to Amazon Web Services, but the same principles apply to any ASP.NET web application.</p>

<p>This part covers creating an Amazon RDS instance running SQL Server Express and connecting a (locally running) MainDemo to it.</p>

<p>At the time of writing the DevExpress version is 12.1.7.</p>

<h2>Amazon Web Services</h2>

<p>If you have not already done so, you will need to sign up with <a href="http://aws.amazon.com/">Amazon Web Services</a>. There are costs associated with AWS, but the tutorial only uses very small cheap instances which cost as little as 2 cents per hour to run. Also, new customers get a load of hours for free as part of the <a href="http://aws.amazon.com/free/">AWS Free Usage Tier</a>. See the <a href="http://aws.amazon.com/ec2/pricing/">AWS pricing</a> for more information. Don&#8217;t forget to terminate your instances when you have finished.</p>

<h2>AWS Toolkit</h2>

<p>Amazon have made it all easy by providing a Visual Studio add-in.</p>

<p>Install the <a href="http://aws.amazon.com/visualstudio/">AWS Toolkit for Microsoft Visual Studio</a>. If you haven&#8217;t used it before, then when you start a wizard it will ask you for your AWS fcredentials.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/publish-to-aws-1.jpg" title="'figure 1'" ></p>

<p>The <strong>Display Name</strong> is the a name you give to the AWS account you are using. I set mine to <em>zerosharp</em>. This is helpful when you have multiple AWS accounts. The <strong>Access Key</strong> and the <strong>Secret Key</strong> are both available on the <a href="https://aws.amazon.com/security-credentials">security credentials page</a> - you will have to click <strong>Show</strong> in order to display the secret key.
You can leave the account number blank.</p>

<h2>The database</h2>

<p>Now let&#8217;s provision a new SQL Server Express database.</p>

<p>In Visual Studio, open the AWS Explorer (<code>Ctrl+K,A</code> or in the <em>View</em> menu). You probably want to select a region near your physical location. I chose <em>EU West (Ireland)</em>. Right-click on &#8216;Amazon RDS&#8217; and select &#8216;Launch Instance&#8217;.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-explorer-1.jpg" title="&#34;figure 2&#34;" alt="&#34;figure 2&#34;"></p>

<p>At the following screen, select <strong>SQL Server Express</strong>. Note that we could just as easily provision the Standard or Enterprise editions as well as a host of other database options.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-rds-1.jpg" title="&#34;figure 3&#34;" alt="&#34;figure 3&#34;"></p>

<p>Configure the settings for the connection. Choose an instance class of <strong>Micro</strong> which is fine for our needs. Note the <em>Master User Name</em> and the <em>Master User Password</em> will be needed when we modify the MainDemo&#8217;s connection string.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-rds-2.jpg" title="&#34;figure 4&#34;" alt="&#34;figure 4&#34;"></p>

<p>In this screen we configure settings for the port and security. In order to connect from our local MainDemo, you need to add the permission for the your CIDR route which will let you connect to the database from your local machine. It&#8217;s easy to add it to the default group later (via DB Security Groups).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-rds-3.jpg" title="&#34;figure 5&#34;" alt="&#34;figure 5&#34;"></p>

<p>Set the backup options to &#8216;No backups&#8217;. Nice to have the option though.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-rds-4.jpg" title="&#34;figure 6&#34;" alt="&#34;figure 6&#34;"></p>

<p>Review the options and click &#8216;Launch&#8217;.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-rds-5.jpg" title="&#34;figure 7&#34;" alt="&#34;figure 7&#34;"></p>

<p>The database instance will be available after a few minutes. You have to be patient here - there is not much feedback, just the yellow <em>creating</em> status. You can press &#8216;Refresh&#8217; once in a while, but it&#8217;s likely to take up to 15 minutes. Eventually you should see a green <em>created</em> status.</p>

<h2>Modify the MainDemo connection string</h2>

<p>Open the MainDemo in Visual Studio.  Open the web.config file and set the connection string to point to your Amazon RDS instance.</p>

<p>The &#8216;User ID&#8217; and &#8216;Password&#8217; should be the same as the ones you entered above. The address is available from the Visual Studio Properties window as &#8216;Endpoint&#8217; when you select the DB Instance in the AWS Explorer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-properties-1.jpg" title="&#34;figure 8&#34;" alt="&#34;figure 8&#34;"></p>

<p>My connection string looks like this:</p>

<pre><code>&lt;add name="ConnectionString" connectionString="User ID=zerosharp;Password=password;Pooling=false;Data Source=maindemo.c5uchpz3rigs.eu-west-1.rds.amazonaws.com;Initial Catalog=MainDemo_v12.1"/&gt;    
</code></pre>

<h2>Run the MainDemo locally</h2>

<p>Now run the MainDemo locally. When you get to the login page, login as Sam (no password).  At this point, the MainDemo will connect to the Amazon RDS instance using the connection string we specified above and create the database (which takes at least 30 seconds on my machine). Afterwards the MainDemo will function as normal.</p>

<h2>Next up</h2>

<p>In the <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">next post</a> I explain how to publish the MainDemo application itself to an EC2 instance in the Amazon cloud.</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2 - Deploying to ElasticBeanstalk</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">Part 5 - Load balancing</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A look at the DevExpress MainDemo with Google Page Speed]]></title>
    <link href="http://ZeroSharp.github.com/a-look-at-the-devexpress-maindemo-with-google-page-speed/"/>
    <updated>2012-09-12T17:22:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-look-at-the-devexpress-maindemo-with-google-page-speed</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;ll demonstrate how to use the <a href="https://developers.google.com/speed/pagespeed/">Google Page Speed</a> tools to analyse the performance of the DevExpress XAF MainDemo.</p>

<p>The easiest way to run Google Page Speed is as a Chrome or Firefox plugin. Both are available <a href="https://developers.google.com/speed/pagespeed/insights_extensions">here</a>. I use Chrome.</p>

<p>Now open the DevExpress MainDemo from Visual Studio. By default it is installed to:</p>

<pre><code>C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.sln
</code></pre>

<p>Set the MainDemo.Web as the startup project and change the connection string in web.config if necessary. Launch the application with Chrome and login as &#8216;Sam&#8217; (password is blank). Then press <code>F12</code> to bring up the developer tools. The last tab is the Page Speed Analysis and your browser should look like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/google-page-speed-001.png"></p>

<p>Now click <code>Start Analysis</code> button. After a few seconds you should get something like the following results.</p>

<h4>Results against the debug webserver</h4>

<p><img src="http://ZeroSharp.github.com/images/blog/google-page-speed-002.png"></p>

<p>It&#8217;s as easy as that. We now have a list of suggested improvements. The same report can be generated for any page you visit with your browser.</p>

<p>I get an overall score of 72 out of 100. First thing to note is that the only &#8216;high priority&#8217; recommendation is to &#8216;enable keep-alive&#8217; which I suspect will not be necessary when running in IIS instead of the debug webserver.</p>

<h4>Switch to use IIS</h4>

<p>Actually to get the main demo to run in IIS is not altogether simple because of the security permissions required for logging in and creating or updating the schema. If you get an error message after login:</p>

<pre><code>Login failed for user 'IIS APPPOOL\DefaultAppPool
</code></pre>

<p>you will need to add the IIS application pool identity to the SQL Server security.</p>

<ul>
<li>Launch SQL Server management studio and connect to the database.</li>
<li>In the <code>Security\Logins</code> right click and select <code>New Login...</code>.</li>
<li>Type in <code>IIS APPPOOL\DefaultAppPool</code> (you won&#8217;t find it by searching) or <code>IIS APPPOOL\ASP.NET v4.0</code> depending on the security context of the application pool you are using.</li>
<li>Select <code>Server Roles</code> and check <code>public</code> and <code>sysadmin</code> to allow the MainDemo to create the database.</li>
</ul>


<p>(All of this is assuming you are using a non-public instance of SQL Server for development.)</p>

<h4>Results against IIS</h4>

<p>The results are much better: an overall score of 93.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/google-page-speed-003.png"></p>

<h4>Other points of interest</h4>

<p>Let&#8217;s experiment by turning off compression in the webconfig.</p>

<pre><code>&lt;compression 
  enableHtmlCompression="false" 
  enableCallbackCompression="false" 
  enableResourceCompression="false" 
  enableResourceMerging="false" /&gt;
</code></pre>

<p>The overall score drops to 62.</p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/google-page-speed-004.png"></p>

<p>You can alternatively use IIS&#8217;s dynamic compression by setting <code>enableResourceMerging="true"</code> and the others false and adding a <code>urlCompression</code> setting as follows.</p>

<pre><code>&lt;system.webServer&gt;
  &lt;urlCompression doDynamicCompression="true" /&gt;
  ...
&lt;/system.webServer&gt; 
</code></pre>

<p>(Note that you may need to install the dynamic compression module via <strong>Control Panel/Programs/Turn Windows Features On or Off</strong>.)</p>

<p>Then the analysis is back up to 93. The advantage of IIS dynamic compression in IIS 7 is that it turns itself off automatically when the CPU load is high. See <a href="http://www.codeproject.com/Articles/242133/Making-the-most-out-of-IIS-compression-Part-1-conf">Matt Perdeck&#8217;s series of articles about IIS Compression</a> for more information.</p>

<p>One mysterious point: if you navigate to the <a href="http://demos.devexpress.com/XAF/MainDemo/default.aspx">online version of the MainDemo</a> and run the analysis there you will notice that compression resource merging must be turned off for some reason and the overall score is only 75. Perhaps someone from DevExpress can explain&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the property signatures of DevExpress validation rules using NUnit and LINQ]]></title>
    <link href="http://ZeroSharp.github.com/testing-the-property-signatures-of-devexpress-validation-rules-using-nunit-and-linq/"/>
    <updated>2012-05-24T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/testing-the-property-signatures-of-devexpress-validation-rules-using-nunit-and-linq</id>
    <content type="html"><![CDATA[<p>One of the projects I work on uses the validation module of the <a href="http://devexpress.com/Products/NET/Application_Framework/">eXpressApp Framework (XAF)</a>.  Since the business logic is complex, there are many validation rules defined using the <code>[RuleFromBoolProperty]</code>.</p>

<p>One of the recurring problems occurs when the signature of the associated property is incorrect.  Consider the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[RuleFromBoolProperty(&quot;Invoice_IsAmountGreaterThanZero&quot;, </span>
</span><span class='line'><span class="na">  DefaultContexts.Save, </span>
</span><span class='line'><span class="na">  &quot;Invoice amount must be greater than zero.&quot;, </span>
</span><span class='line'><span class="na">  UsedProperties = &quot;Amount&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsAmountGreaterThanZero</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Amount</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the rule is declared <code>public</code>.  This causes the getter to be executed when it is not required (see the <a href="http://documentation.devexpress.com/#Xaf/clsDevExpressPersistentValidationRuleFromBoolPropertyAttributetopic">note</a> in the documentation).  However another problem is that the default behaviour for public properties of XPObjects is to persist them to the datastore which means the application will attempt to create a new column called <code>IsAmountGreaterThanZero</code>.</p>

<p>Instead, either property should be declared <code>protected</code> or the property should also have the <code>[NonPersistent]</code> and <code>[MemberDesignTimeVisibility(false)]</code> attributes as well.</p>

<p>Consequently, I wrote the following unit test which will detect any properties which have the <code>[RuleFromBoolProperty]</code> attribute.  This is not really a unit test, rather a sort of meta-test</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ValidationRuleDeclarationMetaTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na"> [Test]</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">Test_RuleFromBoolPropertyDeclarations_ShouldBeProtectedVisibility</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">assemblies</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Assembly</span><span class="p">[]</span> <span class="p">{</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyObjectAssembly</span><span class="p">).</span><span class="n">Assembly</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">invalidProperties</span> <span class="p">=</span> <span class="n">assemblies</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetTypes</span><span class="p">())</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">))</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetCustomAttributes</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">RuleFromBoolPropertyAttribute</span><span class="p">),</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>                                                     <span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Distinct</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">Assert</span><span class="p">.</span><span class="n">IsFalse</span><span class="p">(</span><span class="n">invalidProperties</span><span class="p">.</span><span class="n">Any</span><span class="p">(),</span>
</span><span class='line'>                     <span class="s">&quot;There are &#39;public&#39; properties with the [RuleFromBoolProperty] attribute. &quot;</span> <span class="p">+</span>
</span><span class='line'>                     <span class="s">&quot;These should be &#39;protected&#39; instead. &quot;</span> <span class="p">+</span>
</span><span class='line'>                     <span class="s">&quot;The invalid properties are: &quot;</span> <span class="p">+</span> <span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">,</span> <span class="n">invalidProperties</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Now the build will fail whenever a validation property signature is incorrect.</p>
]]></content>
  </entry>
  
</feed>
