<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://blog.zerosharp.com/atom.xml" rel="self"/>
  <link href="http://blog.zerosharp.com/"/>
  <updated>2012-10-31T15:39:15+00:00</updated>
  <id>http://blog.zerosharp.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 2]]></title>
    <link href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/"/>
    <updated>2012-10-31T12:52:00+00:00</updated>
    <id>http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo</id>
    <content type="html"><![CDATA[<h1>Part 2: Publishing MainDemo</h1>

<p>This is the second post in a series about deploying ASP.NET applications to the <a href="http://aws.amazon.com/">Amazon cloud</a>.</p>

<p>In <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> we created an Amazon RDS instance of SQL Server to act as the database for the deployment. Make sure this is up and running before continuing.</p>

<p>This part guides you through publishing the <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> MainDemo application to the Amazon Elastic Beanstalk.</p>

<h2>Amazon Elastic Beanstalk</h2>

<p><span class='pullquote-right' data-pullquote='Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring.'>
Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring. <strong>That sounds like a lot of features we don&#8217;t really need</strong> for the MainDemo, so let me explain.</p>

<p>With Amazon Web Services, the choices are endless. An Amazon EC2 instance is a virtual machine running an actual Windows (or other) operating system that you can connect to with Remote Desktop and configure however you want. It might seem that the simplest would be to put everything on a &#8216;single machine&#8217; instance. However, the default &#8216;single machine&#8217; does not have SQL Server Express installed. We could connect to it and install it, but it ends up being a lot of extra steps. There are other Amazon Machine Images (AMIs) that include SQL Server Express, but these don&#8217;t support automatic deployment from Visual Studio.
</span></p>

<p>In fact (and Amazon should advertise this better), the Elastic Beanstalk is designed to make it very simple to deploy applications quickly <strong>even if you have no intention of ever needing more than a single little instance</strong>. It is the recommended starting point for all new deployments regardless of size. Ignore the long list of amazing additional features for now, (but one day you might need them.)</p>

<h2>Prepare the MainDemo for deployment</h2>

<p>First we need to fix a few problems with the MainDemo. (These will cause deployment in problems any environment, not just Amazon Web Services.)</p>

<ul>
<li>remove the reference to <em>stdole</em> in the web.config <em>&lt;assemblies&gt;</em> section</li>
<li>add a reference to the project <em>DevExpress.XtraPrinting.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.XtraNavBar.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.Utils.v12.1.UI</em></li>
<li>set the <em>CopyLocal</em> flag to true for all DevExpress assemblies</li>
</ul>


<p>(Some of these might have been fixed if you are using a newer release of XAF than 12.1.7.)</p>

<p>Also, if there are any errors, we don&#8217;t get much useful feedback unless we turn custom errors off. Go to the web.config and add a tag just before the end of the <em>&lt;system.web&gt;</em> section.</p>

<pre><code>    ...
      &lt;customErrors mode="Off"/&gt;
    &lt;/system.web&gt;
</code></pre>

<p>Make sure you can build without errors.</p>

<h2>Deploy to Elastic Beanstalk</h2>

<p>You might like to switch to <strong>Release</strong> mode since we will be publishing. Right click on the MainDemo.Web project in the Solution Explorer and select <strong>Publish to AWS&#8230;</strong></p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/aws-solution-explorer-1.jpg" title="'figure 9'" ></p>

<p>This opens the AWS publishing wizard. Select the <strong>AWS Elastic Beanstalk</strong> template.  I have also selected to deploy in the <strong>EU West (Ireland)</strong> region. Click <strong>Next</strong>.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-1.jpg" title="'figure 10'" ></p>

<p>Make sure you uncheck the <strong>Deploy application incrementally</strong> checkbox (see the upcoming Part 4 for more information on this option).</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>The next few screens are self-explanatory.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-3.jpg" title="'figure 12'" ></p>

<p>(Note the keypair property referred to Part 3.)</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-4.jpg" title="'figure 13'" ></p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-6.jpg" title="'figure 14'" ></p>

<p>The following screen appears only if we have active RDS instances running (whcih you should if you followed <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>). It allows us to add a permission for the application to access the database. This can also be done manually via the <em>Security Groups</em> section in the AWS Explorer.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-7.jpg" title="'figure 15'" ></p>

<p>The last screen summarizes all the choices so far.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-beanstalk-8.jpg" title="'figure 16'" ></p>

<p>After you click <strong>Launch</strong>, you can follow the progress in the Amazon Web Services output window. It will upload the MainDemo web deployment package to a temporary S3 bucket. It will then provision an EC2 instance and install the application to it. It will also provision an Elastic Load Balancer and connect up all the pieces. This will all take a few minutes.</p>

<h2>Navigate to the Deployed MainDemo</h2>

<p>Launch your browser and navigate to the instance web address which will look something like <strong>http://zerosharp-maindemo.elasticbeanstalk.com/</strong>. It should forward you to the login page. Login as Sam. Depending on whether the database needs to be created, this may take a couple of minutes and may even time out. I had to wait a minute and then click Login again before I was in.</p>

<p>When you have finished <strong>don&#8217;t forget to terminate both the Elastic Beanstalk application and the DB Instance</strong> (right click and &#8216;Delete&#8217; from the AWS Explorer) otherwise you will be charged for the time the machines are provisioned. You can always check that everything has terminated properly in the <a href="https://console.aws.amazon.com/">AWS Console</a>.</p>

<h2>Next up</h2>

<p>In the next posts we will look some additional details:</p>

<ul>
<li>Part 3: Connecting to an EC2 instance via Remote Desktop (helpful for troubleshooting)</li>
<li>Part 4: Incremental deployment</li>
<li>Part 5: Sticky sessions and load balancing</li>
</ul>


<h4>References</h4>

<ul>
<li>The <a href="https://www.youtube.com/watch?v=z-N0z5K_WFI">Amazon tutorial for the AWS Visual Studio Toolkit</a></li>
<li>Nathanial Woolls has written an excellent similar article on hosting <a href="http://nwoolls.wordpress.com/2012/09/20/hosting-xaf-asp-net-projects-using-azure-web-sites/">XAF ASP.NET applications on Azure</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 1]]></title>
    <link href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/"/>
    <updated>2012-10-23T12:52:00+01:00</updated>
    <id>http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud</id>
    <content type="html"><![CDATA[<h1>Part 1: Putting the Database in the Cloud</h1>

<p>This is the first part of a tutorial for installing the DevExpress MainDemo.Web to Amazon Web Services, but the same principles apply to any ASP.NET web application.</p>

<p>This part covers creating an Amazon RDS instance running SQL Server Express and connecting a (locally running) MainDemo to it.</p>

<p>At the time of writing the DevExpress version is 12.1.7.</p>

<h2>Amazon Web Services</h2>

<p>If you have not already done so, you will need to sign up with <a href="http://aws.amazon.com/">Amazon Web Services</a>. There are costs associated with AWS, but the tutorial only uses very small cheap instances which cost as little as 2 cents per hour to run. Also, new customers get a load of hours for free as part of the <a href="http://aws.amazon.com/free/">AWS Free Usage Tier</a>. See the <a href="http://aws.amazon.com/ec2/pricing/">AWS pricing</a> for more information. Don&#8217;t forget to terminate your instances when you have finished.</p>

<h2>AWS Toolkit</h2>

<p>Amazon have made it all easy by providing a Visual Studio add-in.</p>

<p>Install the <a href="http://aws.amazon.com/visualstudio/">AWS Toolkit for Microsoft Visual Studio</a>. If you haven&#8217;t used it before, then when you start a wizard it will ask you for your AWS fcredentials.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/publish-to-aws-1.jpg" title="'figure 1'" ></p>

<p>The <strong>Display Name</strong> is the a name you give to the AWS account you are using. I set mine to <em>zerosharp</em>. This is helpful when you have multiple AWS accounts. The <strong>Access Key</strong> and the <strong>Secret Key</strong> are both available on the <a href="https://aws.amazon.com/security-credentials">security credentials page</a> - you will have to click <strong>Show</strong> in order to display the secret key.
You can leave the account number blank.</p>

<h2>The database</h2>

<p>Now let&#8217;s provision a new SQL Server Express database.</p>

<p>In Visual Studio, open the AWS Explorer (<code>Ctrl+K,A</code> or in the <em>View</em> menu). You probably want to select a region near your physical location. I chose <em>EU West (Ireland)</em>. Right-click on &#8216;Amazon RDS&#8217; and select &#8216;Launch Instance&#8217;.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/aws-explorer-1.jpg" title="&#34;figure 2&#34;" alt="&#34;figure 2&#34;"></p>

<p>At the following screen, select <strong>SQL Server Express</strong>. Note that we could just as easily provision the Standard or Enterprise editions as well as a host of other database options.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-rds-1.jpg" title="&#34;figure 3&#34;" alt="&#34;figure 3&#34;"></p>

<p>Configure the settings for the connection. Choose an instance class of <strong>Micro</strong> which is fine for our needs. Note the <em>Master User Name</em> and the <em>Master User Password</em> will be needed when we modify the MainDemo&#8217;s connection string.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-rds-2.jpg" title="&#34;figure 4&#34;" alt="&#34;figure 4&#34;"></p>

<p>In this screen we configure settings for the port and security. In order to connect from our local MainDemo, you need to add the permission for the your CIDR route which will let you connect to the database from your local machine. It&#8217;s easy to add it to the default group later (via DB Security Groups).</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-rds-3.jpg" title="&#34;figure 5&#34;" alt="&#34;figure 5&#34;"></p>

<p>Set the backup options to &#8216;No backups&#8217;. Nice to have the option though.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-rds-4.jpg" title="&#34;figure 6&#34;" alt="&#34;figure 6&#34;"></p>

<p>Review the options and click &#8216;Launch&#8217;.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/launch-aws-rds-5.jpg" title="&#34;figure 7&#34;" alt="&#34;figure 7&#34;"></p>

<p>The database instance will be available after a few minutes. You have to be patient here - there is not much feedback, just the yellow <em>creating</em> status. You can press &#8216;Refresh&#8217; once in a while, but it&#8217;s likely to take up to 15 minutes. Eventually you should see a green <em>created</em> status.</p>

<h2>Modify the MainDemo connection string</h2>

<p>Open the MainDemo in Visual Studio.  Open the web.config file and set the connection string to point to your Amazon RDS instance.</p>

<p>The &#8216;User ID&#8217; and &#8216;Password&#8217; should be the same as the ones you entered above. The address is available from the Visual Studio Properties window as &#8216;Endpoint&#8217; when you select the DB Instance in the AWS Explorer.</p>

<p><img src="http://blog.zerosharp.com/images/blog/aws/aws-properties-1.jpg" title="&#34;figure 8&#34;" alt="&#34;figure 8&#34;"></p>

<p>My connection string looks like this:</p>

<pre><code>&lt;add name="ConnectionString" connectionString="User ID=zerosharp;Password=password;Pooling=false;Data Source=maindemo.c5uchpz3rigs.eu-west-1.rds.amazonaws.com;Initial Catalog=MainDemo_v12.1"/&gt;    
</code></pre>

<h2>Run the MainDemo locally</h2>

<p>Now run the MainDemo locally. When you get to the login page, login as Sam (no password).  At this point, the MainDemo will connect to the Amazon RDS instance using the connection string we specified above and create the database (which takes at least 30 seconds on my machine). Afterwards the MainDemo will function as normal.</p>

<h2>Next up</h2>

<p>In the <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">next post</a> I explain how to publish the MainDemo application itself to an EC2 instance in the Amazon cloud.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A look at the DevExpress MainDemo with Google Page Speed]]></title>
    <link href="http://blog.zerosharp.com/a-look-at-the-devexpress-maindemo-with-google-page-speed/"/>
    <updated>2012-09-12T17:22:00+01:00</updated>
    <id>http://blog.zerosharp.com/a-look-at-the-devexpress-maindemo-with-google-page-speed</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;ll demonstrate how to use the <a href="https://developers.google.com/speed/pagespeed/">Google Page Speed</a> tools to analyse the performance of the DevExpress XAF MainDemo.</p>

<p>The easiest way to run Google Page Speed is as a Chrome or Firefox plugin. Both are available <a href="https://developers.google.com/speed/pagespeed/insights_extensions">here</a>. I use Chrome.</p>

<p>Now open the DevExpress MainDemo from Visual Studio. By default it is installed to:</p>

<pre><code>C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.sln
</code></pre>

<p>Set the MainDemo.Web as the startup project and change the connection string in web.config if necessary. Launch the application with Chrome and login as &#8216;Sam&#8217; (password is blank). Then press <code>F12</code> to bring up the developer tools. The last tab is the Page Speed Analysis and your browser should look like this:</p>

<p><img src="http://blog.zerosharp.com/images/blog/google-page-speed-001.png"></p>

<p>Now click <code>Start Analysis</code> button. After a few seconds you should get something like the following results.</p>

<h4>Results against the debug webserver</h4>

<p><img src="http://blog.zerosharp.com/images/blog/google-page-speed-002.png"></p>

<p>It&#8217;s as easy as that. We now have a list of suggested improvements. The same report can be generated for any page you visit with your browser.</p>

<p>I get an overall score of 72 out of 100. First thing to note is that the only &#8216;high priority&#8217; recommendation is to &#8216;enable keep-alive&#8217; which I suspect will not be necessary when running in IIS instead of the debug webserver.</p>

<h4>Switch to use IIS</h4>

<p>Actually to get the main demo to run in IIS is not altogether simple because of the security permissions required for logging in and creating or updating the schema. If you get an error message after login:</p>

<pre><code>Login failed for user 'IIS APPPOOL\DefaultAppPool
</code></pre>

<p>you will need to add the IIS application pool identity to the SQL Server security.</p>

<ul>
<li>Launch SQL Server management studio and connect to the database.</li>
<li>In the <code>Security\Logins</code> right click and select <code>New Login...</code>.</li>
<li>Type in <code>IIS APPPOOL\DefaultAppPool</code> (you won&#8217;t find it by searching) or <code>IIS APPPOOL\ASP.NET v4.0</code> depending on the security context of the application pool you are using.</li>
<li>Select <code>Server Roles</code> and check <code>public</code> and <code>sysadmin</code> to allow the MainDemo to create the database.</li>
</ul>


<p>(All of this is assuming you are using a non-public instance of SQL Server for development.)</p>

<h4>Results against IIS</h4>

<p>The results are much better: an overall score of 93.</p>

<p><img src="http://blog.zerosharp.com/images/blog/google-page-speed-003.png"></p>

<h4>Other points of interest</h4>

<p>Let&#8217;s experiment by turning off compression in the webconfig.</p>

<pre><code>&lt;compression 
  enableHtmlCompression="false" 
  enableCallbackCompression="false" 
  enableResourceCompression="false" 
  enableResourceMerging="false" /&gt;
</code></pre>

<p>The overall score drops to 62.</p>

<p><img class="right" src="http://blog.zerosharp.com/images/blog/google-page-speed-004.png"></p>

<p>You can alternatively use IIS&#8217;s dynamic compression by setting <code>enableResourceMerging="true"</code> and the others false and adding a <code>urlCompression</code> setting as follows.</p>

<pre><code>&lt;system.webServer&gt;
  &lt;urlCompression doDynamicCompression="true" /&gt;
  ...
&lt;/system.webServer&gt; 
</code></pre>

<p>(Note that you may need to install the dynamic compression module via <strong>Control Panel/Programs/Turn Windows Features On or Off</strong>.)</p>

<p>Then the analysis is back up to 93. The advantage of IIS dynamic compression in IIS 7 is that it turns itself off automatically when the CPU load is high. See <a href="http://www.codeproject.com/Articles/242133/Making-the-most-out-of-IIS-compression-Part-1-conf">Matt Perdeck&#8217;s series of articles about IIS Compression</a> for more information.</p>

<p>One mysterious point: if you navigate to the <a href="http://demos.devexpress.com/XAF/MainDemo/default.aspx">online version of the MainDemo</a> and run the analysis there you will notice that compression resource merging must be turned off for some reason and the overall score is only 75. Perhaps someone from DevExpress can explain&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the property signatures of DevExpress validation rules using NUnit and LINQ]]></title>
    <link href="http://blog.zerosharp.com/testing-the-property-signatures-of-devexpress-validation-rules-using-nunit-and-linq/"/>
    <updated>2012-05-24T16:39:00+01:00</updated>
    <id>http://blog.zerosharp.com/testing-the-property-signatures-of-devexpress-validation-rules-using-nunit-and-linq</id>
    <content type="html"><![CDATA[<p>One of the projects I work on uses the validation module of the <a href="http://devexpress.com/Products/NET/Application_Framework/">eXpressApp Framework (XAF)</a>.  Since the business logic is complex, there are many validation rules defined using the <code>[RuleFromBoolProperty]</code>.</p>

<p>One of the recurring problems occurs when the signature of the associated property is incorrect.  Consider the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[RuleFromBoolProperty(&quot;Invoice_IsAmountGreaterThanZero&quot;, </span>
</span><span class='line'><span class="na">  DefaultContexts.Save, </span>
</span><span class='line'><span class="na">  &quot;Invoice amount must be greater than zero.&quot;, </span>
</span><span class='line'><span class="na">  UsedProperties = &quot;Amount&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsAmountGreaterThanZero</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Amount</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the rule is declared <code>public</code>.  This causes the getter to be executed when it is not required (see the <a href="http://documentation.devexpress.com/#Xaf/clsDevExpressPersistentValidationRuleFromBoolPropertyAttributetopic">note</a> in the documentation).  However another problem is that the default behaviour for public properties of XPObjects is to persist them to the datastore which means the application will attempt to create a new column called <code>IsAmountGreaterThanZero</code>.</p>

<p>Instead, either property should be declared <code>protected</code> or the property should also have the <code>[NonPersistent]</code> and <code>[MemberDesignTimeVisibility(false)]</code> attributes as well.</p>

<p>Consequently, I wrote the following unit test which will detect any properties which have the <code>[RuleFromBoolProperty]</code> attribute.  This is not really a unit test, rather a sort of meta-test</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ValidationRuleDeclarationMetaTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na"> [Test]</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">Test_RuleFromBoolPropertyDeclarations_ShouldBeProtectedVisibility</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">assemblies</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Assembly</span><span class="p">[]</span> <span class="p">{</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyObjectAssembly</span><span class="p">).</span><span class="n">Assembly</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">invalidProperties</span> <span class="p">=</span> <span class="n">assemblies</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetTypes</span><span class="p">())</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">))</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetCustomAttributes</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">RuleFromBoolPropertyAttribute</span><span class="p">),</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>                                                     <span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>                                        <span class="p">.</span><span class="n">Distinct</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">Assert</span><span class="p">.</span><span class="n">IsFalse</span><span class="p">(</span><span class="n">invalidProperties</span><span class="p">.</span><span class="n">Any</span><span class="p">(),</span>
</span><span class='line'>                     <span class="s">&quot;There are &#39;public&#39; properties with the [RuleFromBoolProperty] attribute. &quot;</span> <span class="p">+</span>
</span><span class='line'>                     <span class="s">&quot;These should be &#39;protected&#39; instead. &quot;</span> <span class="p">+</span>
</span><span class='line'>                     <span class="s">&quot;The invalid properties are: &quot;</span> <span class="p">+</span> <span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">,</span> <span class="n">invalidProperties</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Now the build will fail whenever a validation property signature is incorrect.</p>
]]></content>
  </entry>
  
</feed>
