<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-10-22T18:36:56+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Three ways to store a list of currency codes in XAF]]></title>
    <link href="http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf/"/>
    <updated>2013-10-22T18:15:00+01:00</updated>
    <id>http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf</id>
    <content type="html"><![CDATA[<p>In the last post we looked at three solutions to a relatively simple XAF requirement. In this post I&#8217;ll discuss another XAF challenge explain the options and provide a versatile and maintainable solution.</p>

<p>In my DevExpress XAF application, I have an object which has several properties like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/currency-list-editor-002.png"></p>

<p>In each case, the field is a comma-separated list of currency codes. These fields are not very important to the model - they are used mainly for reporting.</p>

<p>Let&#8217;s look at 3 different ways of handling these fields.</p>

<h2>Option 1 - Use a plain old string field</h2>

<p>The <em>lightest</em> option would be just to declare them as a normal XPO string field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="n">_List1Currencies</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">List1Currencies</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_List1Currencies</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">set</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SetPropertyValue</span><span class="p">(</span><span class="s">&quot;List1Currencies&quot;</span><span class="p">,</span> <span class="k">ref</span> <span class="n">_List1Currencies</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s certainly simple and maintainable, but it&#8217;s not very user-friendly. There is no fancy interface to help with the input.  We can perhaps improve things slightly by providing edit masks and/or validation rules to check the input, but careful typing is the only way to change the values.</p>

<h2>Option 2 - Declare an association property</h2>

<p>The <em>heaviest</em> option is to declare each such property as a many-to-many relationship.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Container</span><span class="p">:</span> <span class="n">XPObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Container</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [Association(&quot;List1Currencies&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">Currency</span><span class="p">&gt;</span> <span class="n">List1</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">GetCollection</span><span class="p">&lt;</span><span class="n">Currency</span><span class="p">&gt;(</span><span class="s">&quot;List1&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Currency</span><span class="p">:</span> <span class="n">XPObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Currency</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [Size(3)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [Association(&quot;List1Currencies&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;</span> <span class="n">List1Container</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">GetCollection</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;(</span><span class="s">&quot;List1Container&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works great - we get a nice interface for selecting the currencies and the end result looks like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/currency-list-editor-003.png"></p>

<p>However, it&#8217;s quite a heavy solution for something quite simple. For each such relationship XPO will generate a new intermediate table. If we look at the database schema, we see the following:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/currency-list-editor-004.png"></p>

<p>And in the model there are two new views.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/currency-list-editor-005.png"></p>

<p>If we have 5 such properties, we end up with 5 intermediary tables and 10 new views.</p>

<p>Now, depending on your requirements that may be acceptable. If those relationships are important to your model, then the overhead may be justified. In my situation, these are minor fields and I do not want to burden the model or the database with extra complexity if I can avoid it.</p>

<h2>Option 3 - Create a custom property editor</h2>

<p>With the help of <a href="http://documentation.devexpress.com/xaf/CustomDocument3097.aspx">the documentation</a> an old Support Center issues, I was able to quite quickly put together a custom editor which gives the end user a nice interface while keeping it simple. The bulk of the logic is in the <code>SerializedListPropertyEditor</code> base class (see the end of the article for the link to the code), but the principle is as follows:</p>

<p>Create a new subclass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[PropertyEditor(typeof(String), false)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">CurrencyListPropertyEditor</span> <span class="p">:</span> <span class="n">SerializedListPropertyEditor</span><span class="p">&lt;</span><span class="n">Currency</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">CurrencyListPropertyEditor</span><span class="p">(</span><span class="n">Type</span> <span class="n">objectType</span><span class="p">,</span> <span class="n">IModelMemberViewItem</span> <span class="n">info</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">objectType</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GetDisplayText</span><span class="p">(</span><span class="n">Currency</span> <span class="n">currency</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}\t{1}&quot;</span><span class="p">,</span> <span class="n">currency</span><span class="p">.</span><span class="n">Code</span><span class="p">,</span> <span class="n">currency</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GetValue</span><span class="p">(</span><span class="n">Currency</span> <span class="n">currency</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">currency</span><span class="p">.</span><span class="n">Code</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then decorate each property with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="n">_List1Currencies</span><span class="p">;</span>
</span><span class='line'><span class="na">[ModelDefault(&quot;PropertyEditorType&quot;, &quot;Solution1.Module.Web.CurrencyListPropertyEditor&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">List1Currencies</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_List1Currencies</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">set</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SetPropertyValue</span><span class="p">(</span><span class="s">&quot;List1Currencies&quot;</span><span class="p">,</span> <span class="k">ref</span> <span class="n">_List1Currencies</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the user gets a pretty editor to select the currencies, but the field is just a string field.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/currency-list-editor-001.png"></p>

<p>The editor supports use of the <code>[DataSourceProperty]</code> and <code>[DataSourceCriteria]</code> properties too, so you can easily filter the collection.</p>

<p>It is easy to provide a similar editor for any object type - just create a subclass of <code>SerializedListPropertyEditor&lt;T&gt;</code> where <code>T</code> is your persistent type.</p>

<p>You can download <a href="https://github.com/ZeroSharp/Xaf_CurrencyListPropertyEditor">a working sample project on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ugly, the Heavy and the Good: 3 solutions to an XAF layout problem]]></title>
    <link href="http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good/"/>
    <updated>2013-10-14T09:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good</id>
    <content type="html"><![CDATA[<p>This post aims to look at various solutions to a seemingly simple layout change.</p>

<p>With <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, a lot of the difficult things are easy: authentication, authorisation, ORM, reporting, complex form layouts, themes, etc., are all made easy by XAF. On the other hand, some of the easy things are hard. It can be frustratingly difficult to make a small modification to the basic layout. We will look at an example of such a change and evaluate the recommended DevExpress approaches.</p>

<h2>The problem</h2>

<p>Whenever my XAF web application asks me to change my password, I get a screen like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/narrow-dialog-001.png"></p>

<p>Well that&#8217;s a bit annoying - those edit boxes are far too wide. Wouldn&#8217;t it look much better if it were narrower and centered? If we weren&#8217;t using XAF, we&#8217;d probably have a separate <em>aspx</em> file for this view and we could just modify the html. With XAF there are several different recommended ways of modifying the output.</p>

<h2>Option 1: Use the model</h2>

<p>Well, one approach would be to use the layout designer to add some <em>EmptySpaceItems</em> to the default layout for the <code>ChangePasswordOnLogon</code>. Add something like this to <em>MainDemo.Web/Model.xafml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Views&gt;</span>
</span><span class='line'>    <span class="nt">&lt;DetailView</span> <span class="na">Id=</span><span class="s">&quot;ChangePasswordOnLogonParameters_DetailView&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Layout&gt;</span>
</span><span class='line'>        <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;Main&quot;</span> <span class="na">Removed=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;Narrow&quot;</span> <span class="na">RelativeSize=</span><span class="s">&quot;50&quot;</span> <span class="na">HorizontalAlign=</span><span class="s">&quot;Center&quot;</span> <span class="na">Direction=</span><span class="s">&quot;Horizontal&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;EmptySpaceItem1&quot;</span> <span class="na">Index=</span><span class="s">&quot;0&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;&quot;</span> <span class="na">RelativeSize=</span><span class="s">&quot;25&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;Main&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">Index=</span><span class="s">&quot;1&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;Static&quot;</span> <span class="na">Index=</span><span class="s">&quot;0&quot;</span> <span class="na">Direction=</span><span class="s">&quot;Horizontal&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;ChangePasswordImage&quot;</span> <span class="na">Index=</span><span class="s">&quot;0&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">RelativeSize=</span><span class="s">&quot;1&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;ChangePasswordImage&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;ChangePasswordText&quot;</span> <span class="na">Index=</span><span class="s">&quot;1&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">RelativeSize=</span><span class="s">&quot;99&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;ChangePasswordText&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/LayoutGroup&gt;</span>
</span><span class='line'>            <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;SimpleEditors&quot;</span> <span class="na">Index=</span><span class="s">&quot;1&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;LayoutGroup</span> <span class="na">Id=</span><span class="s">&quot;ChangePasswordOnLogonParameters&quot;</span> <span class="na">ShowCaption=</span><span class="s">&quot;False&quot;</span> <span class="na">Index=</span><span class="s">&quot;0&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;NewPassword&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;NewPassword&quot;</span> <span class="na">Index=</span><span class="s">&quot;0&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;ConfirmPassword&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;ConfirmPassword&quot;</span> <span class="na">Index=</span><span class="s">&quot;1&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/LayoutGroup&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/LayoutGroup&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/LayoutGroup&gt;</span>
</span><span class='line'>          <span class="nt">&lt;LayoutItem</span> <span class="na">Id=</span><span class="s">&quot;EmptySpaceItem2&quot;</span> <span class="na">Index=</span><span class="s">&quot;2&quot;</span> <span class="na">ViewItem=</span><span class="s">&quot;&quot;</span> <span class="na">RelativeSize=</span><span class="s">&quot;25&quot;</span> <span class="na">IsNewNode=</span><span class="s">&quot;True&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/LayoutGroup&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Layout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/DetailView&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Views&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ugh. What a lot of work for such a small change. Another approach would be to make an equivalent model modification in code by subclassing <code>ModelNodesGeneratorUpdater&lt;ModelViewsNodesGenerator&gt;</code> but it would be even more effort.</p>

<p>Is it easy to maintain? Not especially. If we make any changes to the parameters object, we would have to update the layout again. It is quite likely we&#8217;d have to make revisions when upgrading the framework.</p>

<p>And does it work?</p>

<p><img src="http://ZeroSharp.github.com/images/blog/narrow-dialog-003.png"></p>

<p>No!. It&#8217;s a little better but it still looks ugly because the OK and Cancel buttons are still out wide.</p>

<blockquote><p>Verdict: too ugly</p></blockquote>


<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the layout changes are within the main view area.</li>
</ul>


<p>Let&#8217;s look at another option.</p>

<h2>Option 2: Customise the ASP.NET template</h2>

<p>If we were to <a href="http://documentation.devexpress.com/#Xaf/CustomDocument3460">follow the instructions here</a> we can modify the HTML exactly as we want. Unfortunately, this is even more work. We would need to:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/narrow-dialog-004.jpg"></p>

<ul>
<li>Create a new MyNarrowTemplateDialogContent.ascx</li>
<li>Modify the HTML within it to add a width to <code>Form1</code></li>
<li>Find some way of applying this template to only the detail view for <em>Change Password</em>. This is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q207853">currently not easy</a> but there is an example project at the end of <a href="http://www.devexpress.com/Support/Center/Question/Details/Q204692">this issue</a>.</li>
</ul>


<p>We&#8217;d end up with quite a few new files to maintain for just one little layout fix&#8230;</p>

<p>Also, another problem with this approach is that it needs reviewing whenever a new version of the framework is released, because the default templates may have changed. Too much maintenance work for such a little change.</p>

<blockquote><p>Verdict: too heavy</p></blockquote>


<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the same layout changes are to be applied to the views of all or many different object types.</li>
<li>When the changes you are making are significant enough that they are hard to achieve by the solution below.</li>
</ul>


<h2>Option 3: Use a ViewController</h2>

<p>The <code>ViewController</code> and <code>WindowController</code> are well-suited to this sort of task.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">NarrowDialogViewController</span> <span class="p">:</span> <span class="n">ViewController</span><span class="p">&lt;</span><span class="n">DetailView</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnActivated</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnActivated</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Active</span><span class="p">[</span><span class="s">&quot;ShouldUseNarrowForm&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">ObjectTypeInfo</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="n">ChangePasswordOnLogonParameters</span><span class="p">);</span> <span class="c1">// see side-note below</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnViewControlsCreated</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">OnViewControlsCreated</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">WebWindow</span><span class="p">.</span><span class="n">CurrentRequestPage</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">htmlForm</span> <span class="p">=</span> <span class="n">WebWindow</span><span class="p">.</span><span class="n">CurrentRequestPage</span><span class="p">.</span><span class="n">FindControl</span><span class="p">(</span><span class="s">&quot;Form2&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">HtmlForm</span><span class="p">;</span> <span class="c1">// see note below</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">htmlForm</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// make the form narrow</span>
</span><span class='line'>                <span class="n">htmlForm</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">CssStyle</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;width&quot;</span><span class="p">,</span> <span class="n">Unit</span><span class="p">.</span><span class="n">Percentage</span><span class="p">(</span><span class="m">40</span><span class="p">).</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>                <span class="c1">// center the form</span>
</span><span class='line'>                <span class="n">htmlForm</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">CssStyle</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;margin-left&quot;</span><span class="p">,</span> <span class="s">&quot;auto&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">htmlForm</span><span class="p">.</span><span class="n">Attributes</span><span class="p">.</span><span class="n">CssStyle</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;margin-right&quot;</span><span class="p">,</span> <span class="s">&quot;auto&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A side note: do not use <code>TargetObjectType == typeof(ChangePasswordOnLogonParameters)</code> instead of the <code>OnActivated()</code> override. This is because <code>ChangePasswordParameters</code> which is used when the user clicks on <code>Change My Password</code> is a subclass of <code>ChangePasswordOnLogonParameters</code> and we do <em>not</em> want that view to be narrowed because it appears in a popup window instead of the main window.</p>

<p>This solution is quite maintainable. We can delimit the views for which the modification applies making the controller is active. And the modification itself is relatively simple. It is also reasonably robust with regard to DevExpress upgrades. (They did just change the name of the main dialog Form <code>Form1</code> in 12.1 to <code>Form2</code> in 12.2, but it was the first time in years and it was simple to fix. Alternatively, you could use <code>FindControl</code> instead of using the hard-wired name).</p>

<p>Here&#8217;s the resulting output, horizontally centered in the browser window:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/narrow-dialog-002.png"></p>

<blockquote><p>Verdict: good</p></blockquote>


<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When a layout change is easy to apply by modifying styles. When a change pertains only to one or few specific object types.</li>
</ul>


<h2>Conclusions</h2>

<p>In this case, using a <code>ViewController</code> leads to relatively simple code and ease of maintenance. Other situations may well be better served by the other approaches.</p>

<p>DevExpress XAF is a powerful mature product. As such, it can be daunting to new users because of all the different approaches for applying changes. It is always possible to find an elegant maintainable solution, but sometimes it is not obvious, even when the required change is small.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A review of NDepend 5]]></title>
    <link href="http://ZeroSharp.github.com/a-review-of-ndepend-5/"/>
    <updated>2013-10-02T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-review-of-ndepend-5</id>
    <content type="html"><![CDATA[<p>NDepend is a commercial static analysis tool for .NET managed code. It&#8217;s been around a long time (since 2004!). Version 5 was just released and in this post I&#8217;m going to try it out on the DevExpress MainDemo.</p>

<p><span class='pullquote-right' data-pullquote='In version 5, a lot of work has been done to improve the learning curve.'>
In the past I have always thought of NDepend as a complex tool. I was never sure where to start. In version 5, a lot of work has been done to improve the learning curve. The installation process is easy and a wizard very quickly points you in the right direction.</p>

<p>After <a href="http://ndepend.com/NDependDownload.aspx">downloading the v5 trial</a> and running the installation you get to the following screen.
</span></p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-001.png"></p>

<p>You cannot miss that big red arrow. In fact, it&#8217;s even animated in the actual product. Click on it and choose a Visual Studio solution to analyse. I&#8217;m going to navigate to the DevExpress MainDemo 13.1.</p>

<p>So long as the project has been built at some point, NDepend works out what to analyse (otherwise you&#8217;ll get helpful warnings).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-003.png"></p>

<p>It is very fast and we get to this help screen.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-004.png"></p>

<p>Choose the dashboard.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-005.png"></p>

<p>Now that&#8217;s a lot of information, but it&#8217;s all well presented and easy to navigate. Let&#8217;s focus on the worst: I can see <em>2 Critical Rules Violated</em>. Drill down to find out more:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-009.png"></p>

<p>It&#8217;s complaining that we have classes with duplicate names in our projects. In the pane on the left we can see what they are: 3 types named <code>MainDemoWinApplication</code>, 3 named <code>Program</code>, <em>etc.</em> And sure enough there are: <em>MainDemo.Win</em>, <em>MainDemo.Win.Mdi</em> and <em>MainDemo.Win.Ribbon</em> all duplicate those class names.</p>

<p>We can also see 2 <code>TaskAnalysis1LayoutUpdater</code> types and a quick search reveals that there&#8217;s one in the web module and another in the win module.</p>

<p>So NDepend has correctly discovered some potential issues. As we XAF fans know, this one is not really a problem, because those modules are never loaded into the same AppDomain, but nevertheless the information is accurate and relevant.</p>

<p>Lets have a brief look at the other screens. The dependency graph:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-006.png"></p>

<p>With a million options.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-010.png"></p>

<p>A dependency matrix.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-007.png"></p>

<p>A metrics view showing class and assembly sizes.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-008.png"></p>

<p>All with reams of helpful documentation.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/ndepend/ndepend-011.png"></p>

<p>Overall, the tool felt fast, responsive and stable. I&#8217;ve focused on the user interface aspects, but there is so much more. Some things you can do:</p>

<ul>
<li>Create your own analysis rules</li>
<li><a href="http://www.ndepend.com/Doc_CQLinq_Syntax.aspx#Edition">Query your own code with LINQ</a></li>
<li>Run analysis from <a href="http://www.ndepend.com/NDependConsole.aspx">the command line</a></li>
<li>Run from within Visual Studio</li>
<li>Add output to continuous integration (<a href="http://www.ndepend.com/Doc_CI_TeamCity.aspx">TeamCity</a>, <a href="http://www.ndepend.com/Doc_CI_CCNet.aspx">CruiseControl.NET</a>, etc.)</li>
<li>Track <a href="http://www.ndepend.com/Doc_Trend.aspx">trends and progress over time</a></li>
</ul>


<p>NDepend shines at providing a high-level overview of code quality and as such it is a very useful addition to any developer&#8217;s toolkit. There are some scenarios where NDepend would be particularly useful:</p>

<ul>
<li>For a developer joining a mature project.</li>
<li>For a senior developer looking to track progress on a refactoring drive.</li>
<li>For helping evaluate the quality of an open source third party library.</li>
</ul>


<p>In this quick review, I&#8217;m not going deep enough to say anything about whether the DevExpress MainDemo is good code or not - it&#8217;s just a sample project I happen to be quite familiar with. It might be interesting to unleash NDepend on the full DevExpress source code and maybe one day I&#8217;ll get around to writing a future post about that.</p>

<p>With regard to my own projects, I feel I&#8217;m so familiar with them that I ought to be aware of most of the recommendations NDepend is likely to make, but I&#8217;ll give it a spin and see what comes out&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- MiniProfiler --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;asp:PlaceHolder</span> <span class="na">ID=</span><span class="s">&quot;mp&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
</span><span class='line'><span class="nt">&lt;/asp:PlaceHolder&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a &#8217;<em>jQuery is undefined</em>&#8217; javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e) {
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'><span class="gi">+   MiniProfilerHelper.RegisterPathsToIgnore();</span>
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>    // etc...
</span></code></pre></td></tr></table></div></figure>


<p>and modify <code>BeginRequest</code> and <code>EndRequest</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_BeginRequest(object sender, EventArgs e) {
</span><span class='line'><span class="gi">+   if (MiniProfilerHelper.IsEnabled())</span>
</span><span class='line'><span class="gi">+   {</span>
</span><span class='line'><span class="gi">+       MiniProfiler.Start();</span>
</span><span class='line'><span class="gi">+   }</span>
</span><span class='line'>    string filePath = HttpContext.Current.Request.PhysicalPath;
</span><span class='line'>    if(!string.IsNullOrEmpty(filePath)
</span><span class='line'>        &amp;&amp; (filePath.IndexOf(&quot;Images&quot;) &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
</span><span class='line'>        HttpContext.Current.Response.End();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>protected void Application_EndRequest(Object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'><span class="gi">+   if (MiniProfilerHelper.IsEnabled())</span>
</span><span class='line'><span class="gi">+       MiniProfiler.Stop();</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the <code>IsEnabled()</code> function always returns true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MiniProfilerHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsEnabled</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// While we are testing let&#39;s always return true</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We should not profile if we are EasyTesting</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">TestScriptsManager</span><span class="p">.</span><span class="n">EasyTestEnabled</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We could choose to profile only local requests</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">IsLocal</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Or based on a cookie</span>
</span><span class='line'>        <span class="n">HttpCookie</span> <span class="n">miniProfileCookie</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&quot;MainDemoMiniProfiler&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">miniProfileCookie</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">miniProfileCookie</span><span class="p">.</span><span class="n">Value</span> <span class="p">!=</span> <span class="s">&quot;0&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Optionally ignore some paths to prevent the output being too busy.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterPathsToIgnore</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">NetSecuritySettings</span><span class="p">.</span><span class="n">IsProfilingAllowed</span><span class="p">())</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="n">ignoredByMiniProfiler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">IgnoredPaths</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// these are a substring search so wildcards are not supported</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;SessionKeepAliveReconnect.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;TemplateScripts.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;EasyTestJavaScripts.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;MoveFooter.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;ImageResource.axd&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">IgnoredPaths</span> <span class="p">=</span> <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable &#8216;chiclets&#8217; in the top left of the browser page.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-1.png"></p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let&#8217;s say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a &#8216;step&#8217; to the MiniProfiler breakdown.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnLoad</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">profiler</span> <span class="p">=</span> <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span> <span class="c1">// it&#39;s ok for this to be null</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">Step</span><span class="p">(</span><span class="s">&quot;ASP.NET: Page_Load(Default)&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">base</span><span class="p">.</span><span class="n">OnLoad</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application&#8217;s <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-2.png"></p>

<p>As another example, let&#8217;s profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
</span><span class='line'>{
</span><span class='line'><span class="gi">+   var profiler = MiniProfiler.Current;</span>
</span><span class='line'><span class="gi">+   using (profiler.Step(&quot;FindBySubject&quot;)) // doesn&#39;t matter if profiler is null</span>
</span><span class='line'><span class="gi">+   {</span>
</span><span class='line'>        IObjectSpace objectSpace = Application.CreateObjectSpace();
</span><span class='line'>        string paramValue = e.ParameterCurrentValue as string;
</span><span class='line'>        if (!string.IsNullOrEmpty(paramValue))
</span><span class='line'>        {
</span><span class='line'>            paramValue = &quot;%&quot; + paramValue + &quot;%&quot;;
</span><span class='line'>        }
</span><span class='line'>        object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
</span><span class='line'>            new BinaryOperator(&quot;Subject&quot;, paramValue, BinaryOperatorType.Like));
</span><span class='line'>        if (obj != null)
</span><span class='line'>        {
</span><span class='line'>            e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
</span><span class='line'>        }
</span><span class='line'><span class="gi">+   }</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-3.png"></p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says &#8216;Type Subject&#8230;&#8217;. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It&#8217;s often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro">last post</a>, I&#8217;ll demonstrate how to create a fluent interface so that you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">InTransaction</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Developer&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">ThatHave</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">NoPhoto</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksInProgress</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksWith</span><span class="p">(</span><span class="n">Priority</span><span class="p">.</span><span class="n">High</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, let&#8217;s look at the &#8216;beginning&#8217; of the fluent interface: the <code>Query()</code> extension method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">QueryExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueries</span> <span class="nf">Query</span><span class="p">(</span><span class="k">this</span> <span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">session</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If we&#39;re using XAF, do the same for ObjectSpace as well</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueries</span> <span class="nf">Query</span><span class="p">(</span><span class="k">this</span> <span class="n">IObjectSpace</span> <span class="n">objectSpace</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">xpObjectSpace</span> <span class="p">=</span> <span class="n">objectSpace</span> <span class="k">as</span> <span class="n">XPObjectSpace</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">session</span> <span class="p">=</span> <span class="n">xpObjectSpace</span><span class="p">.</span><span class="n">Session</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">session</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does the <code>Queries()</code> class look like?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IQueries</span> <span class="n">InTransaction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="n">Contacts</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// One for each queryable object type, e.g.,</span>
</span><span class='line'>    <span class="c1">// IDepartmentQueries Departments { get; }       </span>
</span><span class='line'>    <span class="c1">// ITaskQueries Tasks { get; }</span>
</span><span class='line'>    <span class="c1">// etc.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Queries</span> <span class="p">:</span> <span class="n">IQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_Session</span> <span class="p">=</span> <span class="n">session</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Session</span> <span class="n">_Session</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">bool</span> <span class="n">_InTransaction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IQueries</span> <span class="n">InTransaction</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_InTransaction</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IContactQueries</span> <span class="n">_Contacts</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="n">Contacts</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_Contacts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="n">_Contacts</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContactQueries</span><span class="p">(</span><span class="n">_Session</span><span class="p">,</span> <span class="n">_InTransaction</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_Contacts</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let&#8217;s look at the base classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IFluentInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Queries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_Session</span> <span class="p">=</span> <span class="n">session</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XPQuery</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">session</span><span class="p">,</span> <span class="n">inTransaction</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Session</span> <span class="n">_Session</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Query</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetEnumerator</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino&#8217;s blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IContactQueries</span> <span class="p">:</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="nf">ByDepartmentTitle</span><span class="p">(</span><span class="kt">string</span> <span class="n">departmentTitle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="nf">ByPosition</span><span class="p">(</span><span class="kt">string</span> <span class="n">position</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Contact</span> <span class="nf">ByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ContactQueries</span> <span class="p">:</span> <span class="n">Queries</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;,</span> <span class="n">IContactQueries</span><span class="p">,</span> <span class="n">IContactThatHaveQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ContactQueries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="nf">ByDepartmentTitle</span><span class="p">(</span><span class="kt">string</span> <span class="n">department</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="n">Query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Department</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="n">department</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="nf">ByPosition</span><span class="p">(</span><span class="kt">string</span> <span class="n">position</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="n">Query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Position</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="n">position</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Contact</span> <span class="nf">ByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Email</span> <span class="p">==</span> <span class="n">email</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>There we go. Now we can use our fluent interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">contacts</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">Query</span><span class="p">().</span><span class="n">Contacts</span><span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Manager&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It&#8217;s also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Intro]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro/"/>
    <updated>2013-08-12T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro</id>
    <content type="html"><![CDATA[<p>There are <a href="http://documentation.devexpress.com/#xaf/CustomDocument3052">many ways to perform queries with XPO</a>.</p>

<p>You can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">BinaryOperator</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span> <span class="s">&quot;Elvis&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>or this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;Name = &#39;Elvis&#39;&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way to use the <a href="http://documentation.devexpress.com/#XPO/CustomDocument2537">simplified criteria syntax</a>, and with the <a href="https://code.google.com/p/dxcorecommunityplugins/wiki/XPO_EasyFields">Xpo_EasyFields CodeRush plugin</a>. Then you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="n">Customer</span><span class="p">.</span><span class="n">Fields</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Elvis&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each of the above, you can optionally query within the transaction by passing in the <code>PersistentCriteriaEvaluationBehavior.InTransaction</code> parameter.</p>

<p>Or we can use LINQ via <code>XPQuery&lt;T&gt;.TransformExpression()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span>
</span><span class='line'>    <span class="n">XPQuery</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;.</span><span class="n">TransformExpression</span><span class="p">(</span><span class="n">Session</span><span class="p">,</span> <span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Elvis&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of these methods are powerful, but the power comes at a cost. The syntax is neither elegant nor particularly clear and as a result it is not very practical to maintain or test.</p>

<h2>A Fluent Interface for XPO</h2>

<p>How about if we could do the following?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">ByName</span><span class="p">(</span><span class="s">&quot;Elvis&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, for a more elaborate example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">InTransaction</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Developer&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">ThatHave</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">NoPhoto</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksInProgress</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksWith</span><span class="p">(</span><span class="n">Priority</span><span class="p">.</span><span class="n">High</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the next post I&#8217;ll show how to put the fluent interface code together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2/"/>
    <updated>2013-05-28T11:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily.'>
Good news. The conversion is now two-way. Get the source code <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">from GitHub</a>. Make sure you have built MainDemo.Reports project.</p>

<p>You will find there are now two T4 transforms in the project. <em>RepxToCSharp.tt</em> is covered in the <a href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1">Part 1</a>. It searches for any <em>.repx</em> files in the solution and converts the scripts into compilable C#.</p>

<p>The second transform is new. <em>CSharpToRepx.tt</em> copies any changes to the script part back into the original <em>.repx</em> files. Again, there are performance optimisations via checksums to prevent overwriting unchanged files.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)
</span><span class='line'>
</span><span class='line'>Summary of C# transformation
</span><span class='line'>============================
</span><span class='line'>Total C# files found                                        :  2
</span><span class='line'>  Total reports injected                                    :  1
</span><span class='line'>  Total reports missing                                     :  0
</span><span class='line'>  Total reports skipped because unchanged                   :  1
</span><span class='line'>
</span><span class='line'>Time elapsed: 00:00:02.3483264
</span></code></pre></td></tr></table></div></figure>


<p>Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily. You could even write unit tests against the code in the scripts.</p>

<p></span></p>

<p>Currently the easiest way of running these scripts is to open them and save them with <code>Ctrl+S</code>. This is because T4 templates were originally designed as a Visual Studio tool.</p>

<p>In the future I&#8217;m hoping to improve the integration further. There are ways of including the transformations into the build instead, most of which are covered in <a href="http://www.olegsych.com/2010/04/understanding-t4-msbuild-integration">a blog post by Mr T4, Oleg Sych</a>. I like the idea of it being a NuGet package that can be easily added to any XAF project, but there&#8217;s a but I&#8217;ll need some more time to work out how best to achieve this.</p>

<h2>Basic usage summary</h2>

<p>Until then, here are some basic usage instructions.</p>

<ul>
<li>Add the T4 Toolbox extension to Visual Studio</li>
<li>Add a copy of the MainDemo.Reports project to your own solution</li>
<li>Make sure you build it before running the transforms</li>
<li>Open <em>RepxToCSharp.tt</em> in Visual Studio.</li>
<li>Save it with <code>Ctrl+S</code> to run the transform. It will search all the folders in your Solution for <em>.repx</em> files and add corresponding C# classes.</li>
<li>Make any changes you like to the script section (anything outside of <code>// -- Start of embedded scripts --</code> and <code>// -- End of embedded scripts --</code>) will be ignored.</li>
<li>Open <em>CSharpToRepx.tt</em> and run it with <code>Ctrl+S</code>. The changes will be saved back to the corresponding <em>.repx</em>.</li>
</ul>


<h2>Even more power?</h2>

<p>You may notice that if you reload the MainDemo.Reports project, you can now see <code>View in Designer</code> in the context menu when you right-click on the <em>.repx.cs</em> file.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-003.png"></p>

<p>Let&#8217;s click it and see what happens. It opens directly in Visual Studio (like an <code>XtraReport</code>).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-004.png"></p>

<p>Now, this is all highly experimental. You can see there are some warnings&#8230; Also, there is no connection with XPO, so the <em>Preview</em> is always empty.</p>

<p>That said, it doesn&#8217;t seem like too much of a stretch to eventually allow far more Visual Studio integration for XAF reports&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1/"/>
    <updated>2013-05-21T14:38:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The aim of these posts is to provide a two-way conversion process between .repx and C# files.'>
The ability to create reports using a report writer is a very powerful feature of <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, but there are some limitations which are particularly cumbersome to deal with in complex project.</p>

<p>One of the projects I work on has over 100 reports in it. Even though we make use of unit tests to ensure they are not broken, the maintenance of the code in the embedded scripts is particularly difficult to manage.</p>

<ul>
<li>XafReports are <em>.repx</em> files which are usually loaded into the report table during the database update routine. They are a subclass of XtraReports which with some added restrictions.</li>
<li>Any scripts are stored as a string or serialized to a <em>resources</em> property.</li>
<li>The report writer is available only in the Windows Forms application. This must be used whenever a change is made to a report. The modified report must be exported as a repx file and then added to the module as an embedded report. The procedure is <a href="http://documentation.devexpress.com/#Xaf/CustomDocument2786">described here</a>.</li>
</ul>


<p>These aspects of XAF reports give rise to several development headaches.</p>

<ul>
<li>While script syntax can be checked within the report writer at design time (via the Validate button in the scripts tab), the script code is still brittle.</li>
<li>Errors that result from Script syntax are sometimes only discovered at run time (you can write a unit test to check during build, but we really want to the compiler to tell us).</li>
<li>Refactoring any classes requires a considerable amount of work with the report writer in order to apply any changes to the code within the scripts.</li>
<li>There is no Intellisense in the report writer.</li>
<li>Version control diff comparisons and merging are impossible.</li>
</ul>


<p>The aim of these posts is to provide a two-way conversion process between .repx and C# files. In order to accomplish this we&#8217;ll be relying on Visual Studio&#8217;s excellent T4 templating engine.
</span></p>

<h2>Installing T4Toolbox</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 Text Transformation Toolkit</a> is a template based code generation framework which is included with Visual Studio. On top of this <a href="http://www.olegsych.com/">Oleg Sych</a> provides a Visual Studio extension called <a href="http://visualstudiogallery.msdn.microsoft.com/7f9bd62f-2505-4aa4-9378-ee7830371684">T4 Toolbox</a> which adds some additional features.</p>

<p>Install T4 Toolbox by selecting <strong>Tools/Extensions and Updates</strong> from Visual Studio and searching for it.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-001.png"></p>

<h2>The ReportSync MainDemo</h2>

<p>Next, download the modified MainDemo application from my <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">GitHub repository</a> and open it in Visual Studio.</p>

<p>First lets look at the embedded reports which I have modified slightly so that they include scripts. I added these scripts via the MainDemo.Win application.</p>

<p>Let&#8217;s look at the <em>ContactsGroupByPosition.repx</em> file. You will find that there is a section:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="s">&quot;\r\nprivate void xrLabel4_BeforePrint(object sender, System.Drawing.Printing.PrintE&quot;</span> <span class="p">+</span>
</span><span class='line'>    <span class="s">&quot;ventArgs e) {\r\n\txrLabel4.Text = xrLabel4.Text + \&quot; Test!\&quot;;\r\n}\r\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the script has been saved as a string. The other report, which has only slightly more complex script code looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">System</span><span class="p">.</span><span class="n">Resources</span><span class="p">.</span><span class="n">ResourceManager</span> <span class="n">resources</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_resources</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">string</span> <span class="n">resourceString</span> <span class="p">=</span> <span class="s">@&quot;zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPT.....5kIFtEdWVEYXRlXSA8PSAnQEN1cnJlbnREYXRlJwABEFRhc2tzU3RhdGVSZXBvcnQ=&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_resources</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">XtraReports</span><span class="p">.</span><span class="n">Serialization</span><span class="p">.</span><span class="n">XRResourceManager</span><span class="p">(</span><span class="n">resourceString</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">_resources</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="s">&quot;$this.ScriptsSource&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the scripts are not even in plain text. They have been serialised to the <em>resources</em> property.</p>

<h2>The MainDemo.Reports assembly</h2>

<p>You will find a new assembly <strong>MainDemo.Reports</strong> which contains a T4 template <em>RepxToCSharp.tt</em>. This is a T4 template which will search for repx files and transform them into much more helpful plain C#.</p>

<p>The template will run every time it is saved. Currently, it depends on code within the MainDemo.Reports assembly, so make sure you have compiled it in Debug mode. Then open the <em>RepxToCSharp.tt</em> and press <code>Ctrl+S</code> to save (and run the T4 transformation).</p>

<h2>The output</h2>

<p>The template will generate two types of output. First, it generates the following report which you should find in <em>RepxToCSharp.txt</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)
</span><span class='line'>
</span><span class='line'>Summary of repx transformation
</span><span class='line'>==============================
</span><span class='line'>Total repx files found                                      :  2
</span><span class='line'>  Total reports generated                                   :  2
</span><span class='line'>  Total reports skipped because unchanged                   :  0
</span><span class='line'>
</span><span class='line'>Time elapsed: 00:00:02.1762029
</span></code></pre></td></tr></table></div></figure>


<p>In addition, each repx will have been transformed into two correpsonding files. All the generated files are highlighted in yellow:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-002.png"></p>

<p>Now the scripts have been deserialized from the repx and put in a partial class and the remainder of the repx has been transformed into a corresponding <code>XafReport</code> descendant. See for instance, <em>ContactsGroupedByPosition.cs</em> (which stored its scripts as a string) is as follows:</p>

<figure class='code'><figcaption><span>ContactsGroupedByPosition.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_ContactsGroupedByPosition</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel4_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">+</span> <span class="s">&quot; Test!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <em>TasksStateReport.cs</em> is now like this</p>

<figure class='code'><figcaption><span>TasksStateReport.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_TasksStateReport</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel1_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// This is a test</span>
</span><span class='line'>        <span class="n">xrLabel1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel2_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">xrLabel2</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">GetLabel2Text</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetLabel2Text</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Label 2!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A note about performance</h2>

<p>The process of transforming the repx into C# is quite quick (a couple of seconds per <em>repx</em>), but when you have dozens of reports, it can quickly be tiresome. Therefore, there is a performance optimisation which checksums the repx and skips the transformation if it has not changed.</p>

<p>(In a future version, we will also use a similar checksum in the other direction to determine whether the scripts have been modified).</p>

<h2>Already much better</h2>

<p>Now we have much more useful source files. Versions can be compared easily. The compiler will immediately inform us of any problems with the scripts within our reports.</p>

<p>This is work in progress. Next up, I will be adding the &#8216;reverse&#8217;. That is, a new transformation template which looks for scripts which have changed and &#8216;injects&#8217; them back into the original <em>repx</em> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Bonus - Simultaneous EasyTests]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/"/>
    <updated>2013-04-22T16:31:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests</id>
    <content type="html"><![CDATA[<p>In <a href="http://ZeroSharp.github.com/load-testing-xaf-overview">my recent series on load testing XAF</a>, I used a Selenium javascript test to run the client browser instances. This is a good and cheap method of validating the performance of XAF applications under production load.</p>

<p>However, if the load tests fail because of a concurrency bug or a performance bottleneck, it can still be difficult to analyse and solve. For this, we need to be able to simulate load locally against the development environment.</p>

<p>In this post I will demonstrate how to run multiple simultaneous XAF EasyTests against a local server. As a load test, it is not very scientific, but it can be extremely useful as a debugging tool.</p>

<h2>The EasyTest script</h2>

<p>First, we will create a new EasyTest which will cycle through the existing navigation tabs. Open the XAF MainDemo and create a new EasyTest as follows.</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.ets  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#Application MainDemoWeb
</span><span class='line'>
</span><span class='line'>*FillForm
</span><span class='line'> User Name = Sam
</span><span class='line'> Password =
</span><span class='line'>*Action Log On
</span><span class='line'>
</span><span class='line'>*Action Navigation(Contact)
</span><span class='line'>*Action Navigation(Task)
</span><span class='line'>*Action Navigation(Department)
</span><span class='line'>*Action Navigation(Scheduler Event)
</span><span class='line'>*Action Navigation(My Details)
</span><span class='line'>*Action Navigation(Note)
</span><span class='line'>*Action Navigation(Payment)
</span><span class='line'>*Action Navigation(Position)
</span><span class='line'>*Action Navigation(Resume)
</span><span class='line'>*Action Navigation(Role)
</span><span class='line'>*Action Navigation(User)
</span><span class='line'>*Action Navigation(Reports.Analysis)
</span><span class='line'>*Action Navigation(Reports.Reports)
</span><span class='line'>*Action Log Off
</span></code></pre></td></tr></table></div></figure>


<p>(This test replicates the Selenium test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a> of my previous series on load testing with NeuStar and Amazon.) It is important to note that we are only testing the web application and that we do not include a <code>#DropDB</code> directive.</p>

<p>First, ensure that you can run this test with the default settings.</p>

<h2>The config file</h2>

<p>Now modify the config.xml file as follows:</p>

<figure class='code'><figcaption><span>Config.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;Options</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">TestRunTimeLimit=</span><span class="s">&quot;5&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Applications&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Web --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Application</span>
</span><span class='line'>      <span class="na">Name=</span><span class="s">&quot;MainDemoWeb&quot;</span>
</span><span class='line'>      <span class="na">Url=</span><span class="s">&quot;http://localhost:4030&quot;</span>
</span><span class='line'>      <span class="na">SingleWebDev=</span><span class="s">&quot;True&quot;</span>
</span><span class='line'>      <span class="na">WebBrowserType=</span><span class="s">&quot;Standalone&quot;</span>
</span><span class='line'>      <span class="na">PhysicalPath=</span><span class="s">&quot;[ConfigPath]\..\MainDemo.Web&quot;</span>
</span><span class='line'>      <span class="na">AdapterAssemblyName=</span><span class="s">&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- For IIS --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;Application</span>
</span><span class='line'><span class="c">      Name=&quot;MainDemoWeb&quot;</span>
</span><span class='line'><span class="c">      Url=&quot;http://localhost/MainDemo.Web/Default.aspx&quot;</span>
</span><span class='line'><span class="c">      PhysicalPath=&quot;&quot;</span>
</span><span class='line'><span class="c">      DontRestartIIS=&quot;True&quot;</span>
</span><span class='line'><span class="c">      DontRunWebDev=&quot;True&quot;</span>
</span><span class='line'><span class="c">      WebBrowserType=&quot;Standalone&quot;      </span>
</span><span class='line'><span class="c">      AdapterAssemblyName=&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;/--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Applications&gt;</span>
</span><span class='line'><span class="nt">&lt;/Options&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few important things to note.</p>

<p>I have not shown the <em>Win</em> section here since we are not using it. Also, I am using XAF 12.2.8. You may need to change the version number in the <code>AdapterAssemblyName</code> attribute. I have increased the <code>TestRunTimeLimit</code> attribute from 3 to 5. Everything goes a little slower when there are multiple browsers and we need to make sure the test does not time out.</p>

<p>With the above config, the EasyTest will no longer run from within Visual Studio.</p>

<p>You can choose to run the simultaneous tests against the debug web server or IIS. Uncomment the relevant section. The interesting settings are:</p>

<ul>
<li><code>SingleWebDev="True"</code> which instructs the EasyTest runner to run all tests against the same instance of the development webserver. Without this, the webserver would be stopped and started for each test.</li>
<li><code>WebBrowserType="Standalone"</code> which causes each launched browser to be launched with its own session. (There are a few mentions of this setting in the support center, but it is not very well documented).</li>
<li><code>DontRestartIIS</code> and <code>DontRunWebDev</code> which are self-explanatory</li>
</ul>


<h2>The launch command</h2>

<p>Next, create the following batch file in the MainDemo.EasyTests subdirectory. ##</p>

<figure class='code'><figcaption><span>Launch.bat  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">:: Requires the Debug webserver to be running on port 49660</span>
</span><span class='line'><span class="c">:: Requires EasyTests to be enabled</span>
</span><span class='line'><span class="c">:: Requires NetDA to be running</span>
</span><span class='line'><span class="c">:: Requires admin rights</span>
</span><span class='line'><span class="c">:: Must be run from a command prompt</span>
</span><span class='line'><span class="c">::</span>
</span><span class='line'><span class="c">:: Usage: &gt; launch &lt;numberOfBrowsers&gt;</span>
</span><span class='line'><span class="c">:: e.g. : &gt; launch 21</span>
</span><span class='line'><span class="c">:: will launch 21 simultaneous browsers at 3 second intervals</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:DELETE_OUTPUT</span>
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.jpeg <span class="k">del</span> *.jpeg
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.html <span class="k">del</span> *.html
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> TestsLog.xml <span class="k">del</span> TestsLog.xml
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_ADMIN</span>
</span><span class='line'>net session <span class="p">&gt;</span><span class="n">nul</span> <span class="m">2</span>&gt;&amp;<span class="m">1</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%ERRORLEVEL%</span> <span class="o">equ</span> <span class="m">0</span> <span class="k">goto</span> <span class="nl">CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative command window
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%CMDCMDLINE%</span> <span class="p">|</span> <span class="n">find</span> <span class="n">/i</span> <span class="s2">&quot;/c&quot;</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">if</span> <span class="k">ERRORLEVEL</span> <span class="m">1</span> <span class="k">goto</span> <span class="nl">CHECK_PARAMS</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative console (not Windows Explorer)
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_PARAMS</span>
</span><span class='line'><span class="k">IF</span> [<span class="nv">%1</span>]<span class="o">==</span>[] <span class="k">GOTO</span> <span class="nl">USAGE</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LAUNCH</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LOOP</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%i%</span><span class="o">==</span><span class="nv">%1</span> <span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="nv">%i%</span>+<span class="m">1</span>
</span><span class='line'>start <span class="s2">&quot;x&quot;</span> <span class="s2">&quot;C:\Program Files (x86)\DevExpress\DXperience 12.2\Tools\eXpressAppFramework\EasyTest\TestExecutor.v12.2.exe&quot;</span> MainDemo_CycleThroughTabs.ets
</span><span class='line'><span class="c">:: Wait 3 seconds</span>
</span><span class='line'>ping <span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span> -n <span class="m">1</span> -w <span class="m">3000</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">goto</span> <span class="nl">LOOP</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:USAGE</span>
</span><span class='line'><span class="k">echo</span> Usage: <span class="nv">%0</span> numberOfBrowsers
</span><span class='line'><span class="k">echo</span> numberOfBrowsers must be an integer
</span><span class='line'><span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:OK</span>
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to run your tests against the development webserver, you will need to make sure it is running before launching the batch file. The easiest way to do this is to run the application from within Visual Studio and then close the browser. You should still see the development webserver running in the task bar notification area. Against IIS, it is enough to ensure it is started.</p>

<p>Now, open an administrative command prompt. Note that you must run from an administrative console: it is not sufficient to &#8216;run as administrator&#8217; from Windows Explorer. Navigate to the EasyTest subdirectory where the Launch.bat file is located and launch a single test with the following command:</p>

<pre><code>launch.bat 1
</code></pre>

<p>You should see the test run without error. If this works, you can then launch 20 simultaneous test runs with 3 second intervals by running:</p>

<pre><code>launch.bat 20
</code></pre>

<h2>Conclusion</h2>

<p>As a load test, you do not get much useful information. Even if we managed to extract accurate data for client response times and throughput, the overhead of running the multiple browsers would skew the results too much. However, this approach is extremely useful for isolating concurrency and performance problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 5 - Analysis]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/"/>
    <updated>2013-04-14T07:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis</id>
    <content type="html"><![CDATA[<p>This is the final post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4: Launching the load test</a></li>
</ul>


<p>In this part, we analyse the results of the load test we ran in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 4</a>.</p>

<h2>Results</h2>

<p>The results of the test we ran are <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">here</a>. The graphs are interactive and give quite interesting data about the load tests. Feel free to have a look and play around with the results.</p>

<h2>The Performance Graphs</h2>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-006.png"></p>

<p>The above graph shows the basic information about the test. We can see there were 649 transactions (the Selenium script was run 649 times) and there were 17 errors.</p>

<p>You can see that the test managed to follow the planned scenario (the actual number of users follows the yellow line). You can also see information about the throughput in bytes during the test.</p>

<h2>The Script Performance Graphs</h2>

<p>Here we see information pertaining to the script we chose to run. Had we run multiple different scripts, we would be able to isolate each one.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-009.png"></p>

<p>It is clear that the transaction time rises quite slowly with the load until about 12:17 when there is a jump. More on that later.</p>

<p>First, I have removed the plot of the total transaction time, so that we can see more detail from the remaining steps. Two things seem to be clear: the response time for each individual step does not seem to be much affected by the load, but the login step rises gradually.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-010.png"></p>

<p>Now back to the spike at 12:17, if you look at the transaction data more closely (not shown here but available on the <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">NeuStar results page</a>, it looks like several transactions finished at the same time and that the jump coincides with several simultaneous logins.</p>

<p>So again, it seems that login is the &#8216;weakest link&#8217;, i.e., the most resource intensive step and the one that suffers the most under load.</p>

<h2>The Errors</h2>

<p>Lets look more closely at the errors.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-007.png"></p>

<p>The first type of error we can see from the screen-shot occurred at the login page. This error happened 6 times and was very similar to another error which occurred once. In fact, all 6 of these errors happened at the very end of the test. As such, they can be ignored, because it is likely that the load test was scaling down and interrupting sessions at this point.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-008.png"></p>

<p>One of the very nice features of NeuStar&#8217;s load testing solution is that you not only get a screenshot, but also a video which shows you exactly what the user experienced when an error occurs. By clicking on the second error, it looks like there may be a problem  when the system is under load. There were 6 errors and it is clear in the video that the errors occur when attempting to navigate away from the <em>Scheduler Event</em> view to the <em>My Details</em> view. The screen-shot gives us some useful information. DevExpress? Any ideas?</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-011.jpg"></p>

<p>There are a couple of other errors, but I think these are most likely a result of problems with the Selenium script rather than XAF. The AJAX update panels make it quite hard to detect when the page is fully ready and although we try to accommodate this with <code>selenium.waitForCondition()</code> my feeling is that the <code>click()</code> occurred before everything was properly wired up.</p>

<h2>Further tests</h2>

<p>This series has covered the process of load testing XAF applications in its entirety, but in some ways, it feels like only the beginning. There are many other configurations and tests which would be interesting.</p>

<p>For instance</p>

<ul>
<li>Reduce think time which is currently set to 3 seconds per step</li>
<li>Use a smaller/larger EC2 instance</li>
<li>Increase the number of virtual users</li>
<li>Try load balancing with sticky sessions</li>
<li>Experiment with/without compression (IIS or via the <code>web.config</code>)</li>
<li>Experiment with/without caching (both at the http level, and via the <a href="http://documentation.devexpress.com/#XPO/CustomDocument9892">cached data store</a></li>
</ul>


<p>There are also many ways of improving XAF performance that are not in the MainDemo. These include:</p>

<ul>
<li><a href="http://documentation.devexpress.com/#wpf/CustomDocument6279">Server mode</a> in all grids</li>
<li><a href="http://community.devexpress.com/blogs/xpo/archive/2006/03/27/session-management-and-caching.aspx">XPO Caching</a></li>
<li>Where possible, move any heavy operations to a separate asynchronous web service call</li>
</ul>


<p>We have implemented all of these in our production application.</p>

<h2>A note about concurrency</h2>

<p>In our experience, people tend to over estimate the number of concurrent users for their application. Our application has probably upwards of 5000 users defined, but we know from our logs that there have never been more than 80 simultaneously logged in. Also, even with 80 concurrent users, they have a much longer &#8216;think time&#8217; than 3 seconds on average.</p>

<p>For the production environment, we run at least one 25 user test for every major release and ensure the performance is at least as good as the previous release. We have occasionally run tests with up to 200 simultaneous users. The response time goes down to unacceptable levels (~30 seconds), but the application behaves. In production, the system is load balanced (with sticky sessions) and we know from previous experience that this is sufficient for our application.</p>

<h2>Conclusion</h2>

<p>This concludes my series on load testing. We&#8217;ve managed to get some very useful information with some very low-cost tools. The largest part of effort is the writing of the Selenium script which is certainly tricky. In the future I&#8217;d really like to harness the DevExpress EasyTests to replace the script but I haven&#8217;t yet found a way of doing this. Feel free to use my Selenium script as a starting point for testing your own XAF applications, and let us know of any interesting results!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we&#8217;ll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select &#8216;Create a new script&#8217;. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 2 - Selenium]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/"/>
    <updated>2013-03-28T16:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium</id>
    <content type="html"><![CDATA[<h1>Writing a Selenium User Test against MainDemo</h1>

<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
</ul>


<h2>Why not use DevExpress EasyTests?</h2>

<p>The DevExpress recommended method of writing functional tests is to use the EasyTest functionality of the expressAppFramework. This has several advantages over other functional testing approaches.</p>

<ul>
<li>It uses a domain specific language tailored for XAF making it easy to test views and actions</li>
<li>It makes it easy to interact with the DevExpress controls that are used within XAF</li>
<li>A single EasyTest can be run against both the ASP.NET and WinForms applications</li>
<li>EasyTests work against both the debug webserver and IIS</li>
</ul>


<p>However, one feature which is not (yet) available is the ability to use EasyTests for load testing.</p>

<p><strong>UPDATE</strong>: See my <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests">more recent post</a> on how run multiple simultaneous EasyTests.</p>

<h2>Modifications to the MainDemo</h2>

<p>The sample script I have written assumes the MainDemo is running with <em>Horizontal Navigation</em> rather than vertical. You can modify the script to add support for vertical navigation or you can change Global.asax.cs Application_Start as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>
</span><span class='line'><span class="gi">+    // Add the following line to default to horizontal layout</span>
</span><span class='line'><span class="gi">+    WebWindowTemplateHttpHandler.PreferredApplicationWindowTemplateType = DevExpress.ExpressApp.Web.Templates.TemplateType.Horizontal;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>The Selenium script</h2>

<p>Selenium is a powerful tool for automating browsers. It supports all of the major browsers and a Selenium test can be written in many different programming languages (C#, Java, Javascript, HTML, <em>etc.</em>) The load testing tool (which we will come to in part 3 of this series) uses Selenium scripts written in Javascript.</p>

<p>We will now create and verify a simple Selenium test. The test will open the browser, login to the MainDemo and cycle through all of the tabs before logging out. The script is extremely basic. For a more realistic load test, you want a combination of scripts running, some entering data, some triggering reports, etc.</p>

<p>Create a \scripts subdirectory and populate it with the following code:</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* global test */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for Neustar:</span>
</span><span class='line'><span class="c1">// replace the following with the public address of the application server,</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetHost</span> <span class="o">=</span> <span class="s2">&quot;http://zerosharp-maindemo.elasticbeanstalk.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">virtualShare</span> <span class="o">=</span> <span class="s2">&quot;MainDemo.Web_deploy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for debug webserver:</span>
</span><span class='line'><span class="c1">// (local script validator doesn&#39;t always work against localhost,</span>
</span><span class='line'><span class="c1">// so we use the excellent localtest.me instead.)</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me:58404&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for the build server or IIS:</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me/&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;MainDemo.Web&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thinkTimeInSeconds</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You an optionally set the simulated bandwidth for the script</span>
</span><span class='line'><span class="c1">// (max of 100KB/sec). A value of -1 means do not limit.</span>
</span><span class='line'><span class="c1">// E.g., </span>
</span><span class='line'><span class="c1">// var bandwidthLimit = 50 * 1024 * 8; // 50KB/sec</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bandwidthLimit</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="nx">test</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selenium</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getSelenium</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Support functions</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">think</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">test</span><span class="p">.</span><span class="nx">isValidation</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">test</span><span class="p">.</span><span class="nx">pause</span><span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">waitForCallbacks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForCondition</span><span class="p">(</span><span class="s2">&quot;(typeof selenium.browserbot.getUserWindow().xafHasPendingCallbacks === &#39;function&#39;) &amp;&amp; (selenium.browserbot.getUserWindow().xafHasPendingCallbacks() === false);&quot;</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogin</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Login&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">targetHost</span> <span class="o">+</span> <span class="nx">virtualShare</span> <span class="o">+</span> <span class="s2">&quot;/Default.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviUserName_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviPassword_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;Logon_PopupActions_Menu_DXI0_T&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogoff</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expectedSubstring</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Logoff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//li[@class=&#39;dxm-item&#39;]/div[@class=&#39;dxm-content dxm-hasText&#39;]//a[@class=&#39;dx dxalink&#39; and text()=&#39;Log Off&#39;]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expectedSubstring</span> <span class="o">=</span> <span class="s2">&quot;Logout.html&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="nx">maintabCaption</span><span class="p">,</span> <span class="nx">tabCaption</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// viewCaption is optional</span>
</span><span class='line'>    <span class="nx">viewCaption</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">viewCaption</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">tabCaption</span> <span class="o">:</span> <span class="nx">viewCaption</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - &quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">isVisible</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">initializetest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">bandwidthLimit</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="p">.</span><span class="nx">setSimulatedBps</span><span class="p">(</span><span class="nx">bandwidthLimit</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializetest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">stepLogin</span><span class="p">(</span><span class="s2">&quot;Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//stepNavigateToTab(&quot;Default&quot;, &quot;Contact&quot;);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Task&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Department&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Scheduler Event&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;My Details&quot;</span><span class="p">,</span> <span class="s2">&quot;User - Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Note&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Payment&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Position&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Resume&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Role&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Analysis&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Reports&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepLogoff</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">closeBrowser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endTransaction</span><span class="p">();</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Neustar</h2>

<p>In a future post we will create multiple test runners in the Amazon cloud using the <a href="https://home.wpm.neustar.biz/">Neustar web performance tool</a> (formerly BrowserMob). Neustar will gather statistics about each scripts reponse times and provide a load test report including details of any test failures.</p>

<p>For now we will verify locally that the Selenium script above works as expected.</p>

<h3>Installing the Neustar local script validator</h3>

<p>In order to verify that our script is supported by the Neustar framework, we need to install their <a href="http://static.wpm.neustar.biz/tools/local-validator.tar.gz">local script validator</a>. Download it and unzip it to a subdirectory of the MainDemo.</p>

<p>There are <a href="http://community.webmetrics.com/community/wpm/blog/2012/10/02/neustar-script-local-validator-user-guide-for-windows">instructions for setting up local script validation here</a>.</p>

<p>To run the script locally call the following:</p>

<pre><code>&gt; script-validator-4.8.81\bin\validator.bat CycleThroughTabs.js -keepbrowseronerror
</code></pre>

<p>I had some problems getting the NeuStar script validator to work in 64-bit Windows 8. The script validator instructions recommend FireFox 12 but I am using version 19. For the record I am using:</p>

<ul>
<li>DevExpress MainDemo 12.2.7</li>
<li>NeuStar localscriptvalidator 4.8.81</li>
<li>Mozilla FireFox 19</li>
<li>Java 7.0.90</li>
</ul>


<p>You need to modify your <code>C:\Users\&lt;Username&gt;\.wpm\config.properties</code> file as follows:</p>

<figure class='code'><figcaption><span>config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">FF</span><span class="o">=</span><span class="s">C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, for some reason, I could not get the local script validator to run against localhost. I kept getting the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARN 03/28 12:38:28 b.n.w.a.s.JavaScrip~ - Got script exception
</span><span class='line'>org.mozilla.javascript.WrappedException: Wrapped biz.neustar.webmetrics.agent.ap
</span><span class='line'>i.HttpErrorException: No valid HTTP Response received while navigating to URL 'h
</span><span class='line'>ttp://localhost:58404/Default.aspx' (CycleThroughTabs.js#50)</span></code></pre></td></tr></table></div></figure>


<p>The easiest solution was to change the localhost address in the javascript file to the excellent localhost alternative <a href="http://readme.localtest.me/">localtest.me</a>.</p>

<p>Now when I run the script using the local validator with</p>

<pre><code>&gt; validator cyclethroughtabs.js
</code></pre>

<p>I see Firefox startup after a few seconds and the script correctly cycles through all of the tabs and then exits.</p>

<p>We will use this scenario as the basis of a load test in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 1 - Deploying]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/"/>
    <updated>2013-03-22T11:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying</id>
    <content type="html"><![CDATA[<p>This is the first part of a tutorial about load testing XAF applications. See the <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">overview</a> for a bit of background. In this post we set up the target webserver.</p>

<p>You can target any machine which has a publicly available web address, but for this tutorial, I&#8217;m&#8217; deploying the MainDemo to the Amazon cloud, by following the instructions in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> and <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> of my previous series about Amazon Web Services.</p>

<p>I am using version 12.2.7 of the DevExpress XAF MainDemo. There are a couple of extra changes to make to the web.config.</p>

<ul>
<li>Set debug to false <code>&lt;compilation targetFramework="4.0" debug="false"&gt;</code> in the <code>&lt;compilation&gt;</code> section of <code>&lt;system.web&gt;</code></li>
<li>Switch to <em>Release</em> mode before deploying.</li>
</ul>


<p>There are a couple of differences compared to the tutorial:</p>

<ul>
<li>I chose a <em>Medium</em> instance instead of a <em>Micro</em> instance for EC2 (the web server) and deployed it against IIS 8.</li>
<li>For RDS (the database), I stuck with a <em>Micro</em> instance.</li>
</ul>


<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-001.png"></p>

<p>For the load test, it is also important to disable the automatic health checks performed by the load balancer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-002.png"></p>

<p>The reason for this is that we are trying to determine the breaking point of our application. If the elastic load balancer detects that a system is struggling, it might automatically flag it as unhealthy and replace it with a newly launched instance. While this behaviour might be desirable for a production system, it doesn&#8217;t make sense for a load test.</p>

<p>Make sure you can connect to your installation from a web browser before continuing. I chose to deploy to a Windows 2012 instance running IIS 8.0 (which was not available when I wrote my previous XAF AWS tutorial) and I had a little trouble with the URL. If I navigate to the application&#8217;s base URL (<em>http://zerosharp-maindemo.elasticbeanstalk.com/</em> in my case), then I get forwarding problems after logging in. Instead, I navigate to the full address <em>http://zerosharp-maindemo.elasticbeanstalk.com/MainDemo.Web_deploy/Default.aspx</em> and everything works. I&#8217;ll try to look into it later, but it&#8217;s not important for the load testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Overview]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-overview/"/>
    <updated>2013-03-12T18:20:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-overview</id>
    <content type="html"><![CDATA[<p>Over the next few posts, I will demonstrate how to load test XAF web applications.</p>

<h2>History</h2>

<p>Performance testing has traditionally been difficult and expensive. A few years ago, to do it well required a powerful piece of dedicated load testing software such as HP LoadRunner (typical cost back in 2007: USD 50,000-100,000 or more per year!). This software was capable of simulating multiple virtual users via the use of recorded scripts and providing detailed performance statistics. Usually the cost was increased further increased by the need for powerful hardware to be able to run the application.</p>

<p>In 2007 we were required by a big customer (a global bank) to provide load testing statistics for our expressApp Framework application. We could not afford anything as sophisticated as LoadRunner so we went with a cheaper alternative (NeoLoad, which was still several thousand per year). It was extremely painstaking work to produce a test. The approach was to record the http requests (as a stream of text values) and write a script to check the http response. Since there was no real browser involved, it was very difficult to determine if our test was really representative. Several machines in the office had to be dedicated to simulating virtual users. Nobody was allowed to use the internet for fear of skewing the results during a test. If an error occurred, it was almost impossible to determine what went wrong. We wrestled with it and managed to fulfill our requirements, but it was all a lot of effort for no real return.</p>

<p>Part of the problem was certainly that XAF is complex to test. The user interface is rich and makes use of complex controls. Most of these load testing tools work better when targetting a simple <code>&lt;INPUT type="button"&gt;</code> rather than an image of a button that sometimes is not even clickable until the mouse has hovered over it. DevExpress have made it easy to run tests via their EasyTests, but no load testing tool supports them yet. (They have informed me it&#8217;s in their plans&#8230;)</p>

<h2>Enter the cloud</h2>

<p><span class='pullquote-right' data-pullquote='The increased availability of cheap cloud-based virtualised machines has revolutionised load testing.'></p>

<p>The basic idea is this: instead of simulating users with specialised software, why not fire up a virtual machine and test with a real browser instance which is &#8216;remote controlled&#8217; via a script.</p>

<p>The increased availability of cheap cloud-based virtualised machines has revolutionised load testing. The rental of the virtualised machines is not free, but it is very cheap.  In about 2008, I started using the Amazon cloud to perform load tests. Our basic test costs us about USD 10.00 per run. We probably run this a dozen times a year, so our total cost is about USD 120.00 per year.
</span></p>

<p>We get better statistics than we ever got out of NeoLoad. We are confident that the test is realistic and we can compare with the actual performance of our production environments. We have been able to find and solve memory leak problems and various tricky multi-user problems with these tests.</p>

<p>Load testing is still a complex business. There are a lot of pieces to put together, but with the cloud, each piece is relatively simple and cheap.</p>

<h2>The solution</h2>

<ul>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, we install the DevExpress MainDemo on an Amazon EC2 instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>, we use Selenium to write a script which will run on the client machines to control a real browser instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3</a>, we create a NeuStar Web Performance test and validate the script.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4</a>, we launch a performance test and monitor the server.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/">Part 5</a>, we analyse the results of the clients.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/">a bonus part</a>, we learn how to run multiple simultaneous EasyTests as an alternative method of isolating performance and concurrency problems.</li>
</ul>


<p>If you follow all the steps, expect to pay a handful of dollars in Amazon EC2 costs and a few more in Neustar costs. You could alternatively skip step 1 and target one of your own development machines instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better handling of Decimals in the XAF audit trail]]></title>
    <link href="http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail/"/>
    <updated>2013-01-15T10:29:00+00:00</updated>
    <id>http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail</id>
    <content type="html"><![CDATA[<p>The following screenshot shows the detail view of an object change from the DevExpress XAF Audit Trail. The <code>DecimalValue</code> property was changed from 123.45 to 543.22.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-001.jpg"></p>

<p>Why is the <code>OldValue</code> property is displayed with two trailing zeros? The corresponding property is defined as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DefaultClassOptions]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="n">XPObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyClass</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">decimal</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'><span class="na">    [ModelDefault(&quot;DisplayFormat&quot;, &quot;{0:n2}&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">decimal</span> <span class="n">DecimalValue</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">SetPropertyValue</span><span class="p">(</span><span class="s">&quot;DecimalValue&quot;</span><span class="p">,</span> <span class="k">ref</span> <span class="n">_DecimalValue</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">ChangeHistory</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_ChangeHistory</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_ChangeHistory</span> <span class="p">=</span> <span class="n">AuditedObjectWeakReference</span><span class="p">.</span><span class="n">GetAuditTrail</span><span class="p">(</span><span class="n">Session</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Explanation and fix</h3>

<p>A C# <code>decimal</code> is a type which represents a number&#8217;s value <em>and its precision</em>. It actually stores the number of trailing zeros along with the value. For the <code>NewValue</code>, it has stored the decimal value as the user entered it - with no trailing zeros. Howevever, for the <code>OldValue</code>, it has retrieved the value from the database and used the SQL column definition to determine the precision.</p>

<p>The default SQL column type that XPO column type for properties of type <code>decimal</code> is the <code>money</code> type (<a href="http://msdn.microsoft.com/en-us/library/aa933242.aspx">see the MSDN documentation</a>) which stores 4 decimal places of precision. If we override this with, say, a <code>DECIMAL(28, 13)</code>, the audit trail would show 13 decimal places of precision.</p>

<p>From the user&#8217;s perspective, this looks a little confusing, so let&#8217;s fix it.</p>

<p>During the initialization of your application (in Application_Start for a web application), add an event to the <code>AuditTrailService</code> as follows.</p>

<pre><code>AuditTrailConfig.Initialize();
</code></pre>

<p>and then declare the <code>AuditTrailConfig</code> helper class as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">AuditTrailConfig</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AuditTrailService</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">SaveAuditTrailData</span> <span class="p">+=</span> <span class="n">Instance_SaveAuditTrailData</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Instance_SaveAuditTrailData</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">decimalAuditTrailDataItems</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">AuditTrailDataItems</span>
</span><span class='line'>                                          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">OldValue</span> <span class="k">is</span> <span class="kt">decimal</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">AuditDataItem</span> <span class="n">auditTrailItem</span> <span class="k">in</span> <span class="n">decimalAuditTrailDataItems</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// remove any trailing zeros from OldValue</span>
</span><span class='line'>            <span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span> <span class="p">=</span> <span class="p">((</span><span class="kt">decimal</span><span class="p">)</span><span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span><span class="p">).</span><span class="n">Normalize</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Normalize()</code> method is an extension method. See the <a href="http://ZeroSharp.github.com/how-to-remove-the-trailing-zeros-of-precision-from-a-c-number-decimal/">trick in my last post</a> for more information.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DecimalExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">decimal</span> <span class="nf">Normalize</span><span class="p">(</span><span class="k">this</span> <span class="kt">decimal</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">value</span> <span class="p">/</span> <span class="m">1.000000000000000000000000000000000</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the same change would be logged as follows.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-002.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 5]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/"/>
    <updated>2012-12-05T11:03:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing</id>
    <content type="html"><![CDATA[<h2>Part 5: Load balancing</h2>

<p>This is the final post in this 5 part series about deploying XAF to the Amazon cloud. The other parts are:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1 - Creating a database in RDS</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2 - Deploying to ElasticBeanstalk</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
</ul>


<p>This part covers load balancing and autoscaling.</p>

<h3>Load balancing</h3>

<p>In order to enable load balancing with DevExpress XAF applications, you must activate client affinity (sticky sessions) which you can do in the <strong>Load Balancer tab</strong>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-2.jpg" title="'figure 19'" ></p>

<p>This is because XAF relies http session variables (notably the <code>WebApplication</code>). With sticky sessions enabled, when a user first hits the Elastic Load Balancer, they are assigned a random server but all subsequent requests are routed to the same server instance.</p>

<h2>Autoscaling</h2>

<h3>Adding Capacity (Works)</h3>

<p>Switch to the <strong>Auto Scaling</strong> tab of the Elastic Beanstalk instance.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-1.jpg" title="'figure 19'" ></p>

<p>The options for autoscaling are extensive and there is plenty information on the <a href="http://aws.amazon.com/autoscaling">Amazon website</a>. In the above screenshot we have the Elastic Load Balancer configured so that it will initially deploy 1 server (the Minimum Instance Count), but whenever the NetworkOut measurement of 600,000 bytes over a 5 minute interval, a new server launch is triggered up to a maximum of 4 servers. Adding capacity works fine with XAF applications.</p>

<h3>Removing Capacity (Fails)</h3>

<p>The configuration above also shows that if the NetworkOut drops to below 200,000 bytes over a period of 5 minutes then the number of servers should decrease. <strong>This will NOT work</strong>.</p>

<p>The problem is that the Elastic Load Balancer will terminate the surplus server immediately (the equivalent of a <code>shutdown -s</code>). Any users connected to that server will immediately lose their session and will probably receive an ugly error.</p>

<p>One workaround is to allow scaling out but to disable scaling in. To do this, set the &#8216;Lower Threshold&#8217; to zero.</p>

<h3>Possible Improvements</h3>

<p>There are a couple of potential longer term solutions to the problem of dropped sessions when scaling in.</p>

<p>DevExpress could make the classes they use in the session variables serializable (e.g., <code>WebApplication</code>). When this is the case, the application can be configured to store the session variables to a persistent data store (SQL Server for instance) instead of in the session and then we could configure autoscaling to work correctly. There is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q426045">an item in the Support Center in this regard</a> and <a href="http://www.devexpress.com/Support/Center/p/S36497.aspx">another one here</a>.</p>

<p>Another solution would be if Amazon provided a new option to handle a server termination in a less brutal fashion. That is, stop routing new users to the surplus server but continue to server existing users until their sessions have all terminated. This approach is discussed in <a href="https://forums.aws.amazon.com/thread.jspa?threadID=61278">this AWS forum thread</a>.</p>

<h2>Conclusions</h2>

<p>The load balancing features of AWS work fine with XAF applications, but the benefits of autoscaling are lost because there is currently no effective method of removing capacity without knocking out existing sessions.</p>

<h2>What next</h2>

<p>In a future series, I will demonstrate how to load test XAF applications cheaply and effectively by making use of Amazon Web Services. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 4]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/"/>
    <updated>2012-11-05T14:16:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment</id>
    <content type="html"><![CDATA[<h2>Part 4: Incremental Deployment</h2>

<p>This is the fourth post in a series about deploying ASP.NET applications to the Amazon cloud. In the first three posts covered deploying the XAF ASP.NET MainDemo to the Amazon cloud (<a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3</a>).</p>

<p>When we deployed to the Elastic Beanstalk in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, we chose <em>not</em> to enable incremental deployment.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>I want to explain this decision further.</p>

<p>If you choose not to deploy incrementally your deployment will take longer because the entire web deployment package needs to be uploaded every time you re-publish which takes about 4-5 minutes on my connection. The incremental deployment option creates a git repository in the target environment so that only the modified files are re-deployed. If you are frequently making changes and redploying, you can save considerable time. A re-deployment takes only a few seconds.</p>

<p>However, if you try to deploy from the default MainDemo location with incremental deployment enabled, you will probably get the following error</p>

<pre><code>Commencing deployment for project MainDemo.Web
...building deployment package obj\Release\Package\Archive...
...deployment package created at C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.Web\obj\Release\Package\Archive
...build of project archive completed succesfully
...starting deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo'
...starting incremental deployment to environment 'zerosharp-maindemo'
Deployment to AWS Elastic Beanstalk failed with exception: Exception caught during execution of add command,
Inner Exception Message: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
...
Deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo' did not complete successfully
</code></pre>

<p>The problem is with the NGit libraries that the AWS Toolkit uses. Presumably a fix will emerge, but the simplest workaround is to move the application to a shorter path. Then you can enable incremental deployment when you publish:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-incremental-2.jpg" title="'figure 21'" ></p>

<p>Note that you can toggle incremental deployment whenever you publish, so you&#8217;re not locked in either way.</p>

<h2>Next up</h2>

<p>In the <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">next post</a> we will enable load balancing (which is easy) and discuss the problems with autoscaling XAF applications (which is not).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 3]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/"/>
    <updated>2012-11-02T17:54:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop</id>
    <content type="html"><![CDATA[<h1>Part 3: Troubleshooting</h1>

<p>This is the third post in a series about deploying ASP.NET applications to the Amazon cloud.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> we created an Amazon RDS instance of SQL Server to act as the database for the deployment.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> we published the DevExpress MainDemo.Web to the Amazon Elastic Beanstalk.</p>

<p>In this part we will look at troubleshooting methods and in particular how to connect to an EC2 instance in order to troubleshoot installations.</p>

<h2>The Beanstalk Events tab</h2>

<p>When there is a problem with the deployment, the first place to look is in the Elastic Beanstalk events tab. You will find warnings and error messages which frequently point to the source of any problem.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-events-1.jpg" title="'figure 18'" ></p>

<p>Sometimes, the events window point to a log file which is automatically generated in an S3 bucket. By opening S3 in the AWS Explorer, you can find and download the log file which usually has excellent error information in it, for instance:</p>

<figure class='code'><figcaption><span>An example log file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2012-11-02T12:37:13.000Z Warning 3:Web Event ASP.NET 4.0.30319.0 - Event code: 3008
</span><span class='line'>    Event message: A configuration error has occurred.
</span><span class='line'>    [...]
</span><span class='line'>
</span><span class='line'>    Application information:
</span><span class='line'>    Application domain: /LM/W3SVC/1/ROOT/MainDemo.Web_deploy-2-129963334311133960
</span><span class='line'>    Trust level: Full
</span><span class='line'>    Application Virtual Path: /MainDemo.Web_deploy
</span><span class='line'>    Application Path: C:\inetpub\wwwroot\MainDemo.Web_deploy\
</span><span class='line'>    Machine name: AMAZONA-C6H7CEI
</span><span class='line'>
</span><span class='line'>    Process information:
</span><span class='line'>    Process ID: 2436
</span><span class='line'>    Process name: w3wp.exe
</span><span class='line'>    Account name: IIS APPPOOL\DefaultAppPool
</span><span class='line'>
</span><span class='line'>    Exception information:
</span><span class='line'>    Exception type: ConfigurationErrorsException
</span><span class='line'>    Exception message: Could not load file or assembly 'DevExpress.ExpressApp.AuditTrail.v12.1, Version=12.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a' or one of its dependencies. The system cannot find the file specified. (C:\inetpub\wwwroot\MainDemo.Web_deploy\web.config line 94)
</span><span class='line'>      at System.Web.Configuration.CompilationSection.LoadAssemblyHelper(String assemblyName, Boolean starDirective)
</span><span class='line'>      at System.Web.Configuration.AssemblyInfo.get_AssemblyInternal()
</span><span class='line'>      at System.Web.Compilation.BuildManager.GetReferencedAssemblies(CompilationSection compConfig)
</span><span class='line'>      at System.Web.Compilation.BuildManager.CallPreStartInitMethods(String preStartInitListPath)
</span><span class='line'>      at System.Web.Compilation.BuildManager.ExecutePreAppStart()
</span><span class='line'>      at System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException)
</span><span class='line'>    [...]</span></code></pre></td></tr></table></div></figure>


<h2>Connecting via Remote Desktop</h2>

<p>If you&#8217;re still in the dark, you can use Windows Remote Desktop to connect to the EC2 machine to troubleshoot.</p>

<p>In the AWS Explorer, go to <strong>Amazon EC2/Instances</strong>.</p>

<p>There are two ways of connecting. You can <strong>Get Windows Passwords</strong>, but this takes about an hour for the password to be decrypted.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-troubleshooting-1.jpg" title="'figure 19'" ></p>

<p>Alternatively, you can <strong>Open Remote Desktop</strong> and then <strong>Use EC2 keypair to logon</strong>. You should have the <em>.pem</em> private key file associated with the EC2 key pair that was used to launch the instance (it was created when you created your AWS account or when you launched your first EC2 instance). Whenever an EC2 instance is provisioned, it is launched with an EC2 key pair (you selected a keypair to use in the wizard above). You can open the .pem file and cut and paste the key into the remote desktop window.</p>

<p>You will then be logged in as an Administrator on the EC2 Instance running Windows 2008 R2. You can perform whatever operations you see fit - install software, change Control Panel options, restart IIS, <em>etc.</em> The changes will last until you terminate the instance (by deleting the Elastic Beanstalk stack for example).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-troubleshooting-2.jpg" title="'figure 20'" ></p>

<p>Note that it is easy to create new key pairs if you can&#8217;t find the .pem file, but you cannot change the key pair of a running instance. (You should terminate and launch again with the new key pair). One nice feature of the AWS Toolkit, is that if you create a new key pair within Visual Studio, you can choose to store the private key in the Toolkit.</p>

<h2>Next up</h2>

<p>The <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">next post</a> will cover incremental deployment options.</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">Part 5 - Load balancing</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 2]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/"/>
    <updated>2012-10-31T12:52:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo</id>
    <content type="html"><![CDATA[<h1>Part 2: Publishing MainDemo</h1>

<p>This is the second post in a series about deploying ASP.NET applications to the <a href="http://aws.amazon.com/">Amazon cloud</a>.</p>

<p>In <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> we created an Amazon RDS instance of SQL Server to act as the database for the deployment. Make sure this is up and running before continuing.</p>

<p>This part guides you through publishing the <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> MainDemo application to the Amazon Elastic Beanstalk.</p>

<h2>Amazon Elastic Beanstalk</h2>

<p><span class='pullquote-right' data-pullquote='Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring.'>
Amazon Elastic Beanstalk provides automatic capacity provisioning, load balancing, auto-scaling, and application health monitoring. <strong>That sounds like a lot of features we don&#8217;t really need</strong> for the MainDemo, so let me explain.</p>

<p>With Amazon Web Services, the choices are endless. An Amazon EC2 instance is a virtual machine running an actual Windows (or other) operating system that you can connect to with Remote Desktop and configure however you want. It might seem that the simplest would be to put everything on a &#8216;single machine&#8217; instance. However, the default &#8216;single machine&#8217; does not have SQL Server Express installed. We could connect to it and install it, but it ends up being a lot of extra steps. There are other Amazon Machine Images (AMIs) that include SQL Server Express, but these don&#8217;t support automatic deployment from Visual Studio.
</span></p>

<p>In fact (and Amazon should advertise this better), the Elastic Beanstalk is designed to make it very simple to deploy applications quickly <strong>even if you have no intention of ever needing more than a single little instance</strong>. It is the recommended starting point for all new deployments regardless of size. Ignore the long list of amazing additional features for now, (but one day you might need them.)</p>

<h2>Prepare the MainDemo for deployment</h2>

<p>First we need to fix a few problems with the MainDemo. (These will cause deployment in problems any environment, not just Amazon Web Services.)</p>

<ul>
<li>remove the reference to <em>stdole</em> in the web.config <em>&lt;assemblies&gt;</em> section</li>
<li>add a reference to the project <em>DevExpress.XtraPrinting.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.XtraNavBar.v12.1</em></li>
<li>add a reference to the project <em>DevExpress.Utils.v12.1.UI</em></li>
<li>set the <em>CopyLocal</em> flag to true for all DevExpress assemblies</li>
</ul>


<p>(Some of these might have been fixed if you are using a newer release of XAF than 12.1.7.)</p>

<p>Also, if there are any errors, we don&#8217;t get much useful feedback unless we turn custom errors off. Go to the web.config and add a tag just before the end of the <em>&lt;system.web&gt;</em> section.</p>

<pre><code>    ...
      &lt;customErrors mode="Off"/&gt;
    &lt;/system.web&gt;
</code></pre>

<p>Make sure you can build without errors.</p>

<h2>Deploy to Elastic Beanstalk</h2>

<p>You might like to switch to <strong>Release</strong> mode since we will be publishing. Right click on the MainDemo.Web project in the Solution Explorer and select <strong>Publish to AWS&#8230;</strong></p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-solution-explorer-1.jpg" title="'figure 9'" ></p>

<p>This opens the AWS publishing wizard. Select the <strong>AWS Elastic Beanstalk</strong> template.  I have also selected to deploy in the <strong>EU West (Ireland)</strong> region. Click <strong>Next</strong>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-1.jpg" title="'figure 10'" ></p>

<p>Make sure you uncheck the <strong>Deploy application incrementally</strong> checkbox (see the upcoming Part 4 for more information on this option).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>The next few screens are self-explanatory.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-3.jpg" title="'figure 12'" ></p>

<p>(Note the keypair property is referred to in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3</a> in the section about connecting via Remote Desktop.)</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-4.jpg" title="'figure 13'" ></p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-6.jpg" title="'figure 14'" ></p>

<p>The following screen appears only if we have active RDS instances running (which you should if you followed <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>). It allows us to add a permission for the application to access the database. This can also be done manually via the <em>Security Groups</em> section in the AWS Explorer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-7.jpg" title="'figure 15'" ></p>

<p>The last screen summarizes all the choices so far.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-8.jpg" title="'figure 16'" ></p>

<p>After you click <strong>Launch</strong>, you can follow the progress in the Amazon Web Services output window. It will upload the MainDemo web deployment package to a temporary S3 bucket. It will then provision an EC2 instance and install the application to it. It will also provision an Elastic Load Balancer and connect up all the pieces. This will all take a few minutes.</p>

<h2>Navigate to the Deployed MainDemo</h2>

<p>Launch your browser and navigate to the instance web address which will look something like <strong>http://zerosharp-maindemo.elasticbeanstalk.com/</strong>. It should forward you to the login page. Login as Sam. Depending on whether the database needs to be created, this may take a couple of minutes and may even time out. I had to wait a minute and then click Login again before I was in.</p>

<p>When you have finished <strong>don&#8217;t forget to terminate both the Elastic Beanstalk application and the DB Instance</strong> (right click and &#8216;Delete&#8217; from the AWS Explorer) otherwise you will be charged for the time the machines are provisioned. You can always check that everything has terminated properly in the <a href="https://console.aws.amazon.com/">AWS Console</a>.</p>

<h2>Next up</h2>

<p>In the next posts we will look some additional details:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">Part 5 - Load balancing</a></li>
</ul>


<h4>References</h4>

<ul>
<li>The <a href="https://www.youtube.com/watch?v=z-N0z5K_WFI">Amazon tutorial for the AWS Visual Studio Toolkit</a></li>
<li>Nathanial Woolls has written an excellent similar article on hosting <a href="http://nwoolls.wordpress.com/2012/09/20/hosting-xaf-asp-net-projects-using-azure-web-sites/">XAF ASP.NET applications on Azure</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
