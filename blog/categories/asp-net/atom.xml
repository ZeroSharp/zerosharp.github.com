<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/asp-net/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-11-07T10:55:51+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Force a complete garbage collection in an ASP.NET application.]]></title>
    <link href="http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application/"/>
    <updated>2015-08-05T09:26:00+01:00</updated>
    <id>http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application</id>
    <content type="html"><![CDATA[<p>How can I force a full garbage collection easily within an ASP.NET application? The method here is for XAF web applications but the same approach should work with any ASP.NET app.</p>

<p><span class='pullquote-right' data-pullquote='First up: Never mess with the .NET garbage collector.'>
First up: Never mess with the .NET garbage collector.</p>

<p>I sometimes mess with the garbage collector in .NET when I'm trying to pin down some memory problem. Also, after <a href="/load-testing-xaf-part-1-deploying/">a load test</a>, I prefer to force the garbage collector to collect everything it can so that I can check that the memory drops as expected.
</span></p>

<p>Garbage collection in .NET is complex and it is hard to be sure you've done it correctly. <a href="///%20See%20http://blogs.msdn.com/b/tess/archive/2006/02/02/net-memory-my-object-is-not-rooted-why-wasn-t-it-garbage-collected.aspx">This ancient article by Tess Ferrandez</a> pointed me in the following direction.</p>

<p>```c#
void ForceGarbageCollection()
{</p>

<pre><code>/// This will garbage collect all generations (including large object), 
GC.Collect(3);
/// then execute any finalizers
GC.WaitForPendingFinalizers();
/// and then garbage collect again to take care of all the objects that had finalizers.            
GC.Collect(3);
</code></pre>

<p>}
```</p>

<p>How can we easily trigger this routine in an XAF web application? First, add the following to the <em>Global.asax.cs</em> file:</p>

<p>```c# Global.asax.cs
protected void Application_BeginRequest(object sender, EventArgs e) {</p>

<pre><code>var shouldForceGarbageCollection = Request.QueryString["ForceGC"] != null;
if (shouldForceGarbageCollection)
{
    ForceGarbageCollection();
    Response.Write("&lt;H1&gt;Forced garbage collection OK!&lt;/H1&gt;");
}
</code></pre>

<p>}
```</p>

<p>Then whenever you want to trigger a garbage collection, visit the following URL:</p>

<pre><code>http://.../Login.aspx?ForceGC=1
</code></pre>

<p>You should see the text <strong>'Forced garbage collection OK'</strong> in the top left of the browser window.</p>
]]></content>
  </entry>
  
</feed>
