<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: performance | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-11-30T17:13:37+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<p>```html</p>

<pre><code>&lt;!-- MiniProfiler --&gt;
&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;asp:PlaceHolder ID="mp" runat="server"&gt;
  &lt;%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
&lt;/asp:PlaceHolder&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a '<em>jQuery is undefined</em>' javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<p>```diff
protected void Application_Start(object sender, EventArgs e) {</p>

<pre><code>RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</code></pre>

<ul>
<li>MiniProfilerHelper.RegisterPathsToIgnore();
ASPxWebControl.CallbackError += new EventHandler(Application_Error);
// etc...
<code>
and modify `BeginRequest` and `EndRequest` as follows:
</code>diff
protected void Application_BeginRequest(object sender, EventArgs e) {</li>
<li>if (MiniProfilerHelper.IsEnabled())</li>
<li>{</li>
<li><pre><code>MiniProfiler.Start();
</code></pre></li>
<li>}
string filePath = HttpContext.Current.Request.PhysicalPath;
if(!string.IsNullOrEmpty(filePath)

<pre><code>&amp;&amp; (filePath.IndexOf("Images") &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
HttpContext.Current.Response.End();
</code></pre>

<p>}
}</p></li>
</ul>


<p>protected void Application_EndRequest(Object sender, EventArgs e)
{
+   if (MiniProfilerHelper.IsEnabled())
+       MiniProfiler.Stop();
}      <br/>
<code>
Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the `IsEnabled()` function always returns true.
</code>c#  <br/>
public static class MiniProfilerHelper
{</p>

<pre><code>public static bool IsEnabled()
{
    // While we are testing let's always return true
    return true;

    // We should not profile if we are EasyTesting
    if (TestScriptsManager.EasyTestEnabled == true)
        return false;

    // We could choose to profile only local requests
    if (HttpContext.Current.Request.IsLocal)
        return true;

    // Or based on a cookie
    HttpCookie miniProfileCookie = HttpContext.Current.Request.Cookies["MainDemoMiniProfiler"];
    return miniProfileCookie != null &amp;&amp; miniProfileCookie.Value != "0";
}

// Optionally ignore some paths to prevent the output being too busy.
public static void RegisterPathsToIgnore()
{
    if (!NetSecuritySettings.IsProfilingAllowed())
        return;

    List&lt;String&gt; ignoredByMiniProfiler = new List&lt;String&gt;(MiniProfiler.Settings.IgnoredPaths);
    // these are a substring search so wildcards are not supported
    ignoredByMiniProfiler.Add("SessionKeepAliveReconnect.aspx");
    ignoredByMiniProfiler.Add("TemplateScripts.js");
    ignoredByMiniProfiler.Add("EasyTestJavaScripts.js");
    ignoredByMiniProfiler.Add("MoveFooter.js");
    ignoredByMiniProfiler.Add("ImageResource.axd");
    MiniProfiler.Settings.IgnoredPaths = ignoredByMiniProfiler.ToArray(); 
}
</code></pre>

<p>}
```</p>

<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable 'chiclets' in the top left of the browser page.</p>

<p>{% img /images/blog/xaf-miniprofiler-1.png %}</p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let's say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a 'step' to the MiniProfiler breakdown.</p>

<p>```c#
protected override void OnLoad(EventArgs e)
{</p>

<pre><code>var profiler = MiniProfiler.Current; // it's ok for this to be null
using (profiler.Step("ASP.NET: Page_Load(Default)"))
{
     base.OnLoad(e);
}
</code></pre>

<p>}
```</p>

<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application's <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p>{% img /images/blog/xaf-miniprofiler-2.png %}</p>

<p>As another example, let's profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<p>```diff
private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
{
+   var profiler = MiniProfiler.Current;
+   using (profiler.Step("FindBySubject")) // doesn't matter if profiler is null
+   {</p>

<pre><code>    IObjectSpace objectSpace = Application.CreateObjectSpace();
    string paramValue = e.ParameterCurrentValue as string;
    if (!string.IsNullOrEmpty(paramValue))
    {
        paramValue = "%" + paramValue + "%";
    }
    object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
        new BinaryOperator("Subject", paramValue, BinaryOperatorType.Like));
    if (obj != null)
    {
        e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
    }
</code></pre>

<ul>
<li>}
}     <br/>
```</li>
</ul>


<p>{% img right /images/blog/xaf-miniprofiler-3.png %}</p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says 'Type Subject...'. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It's often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A look at the DevExpress MainDemo with Google Page Speed]]></title>
    <link href="http://ZeroSharp.github.com/a-look-at-the-devexpress-maindemo-with-google-page-speed/"/>
    <updated>2012-09-12T17:22:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-look-at-the-devexpress-maindemo-with-google-page-speed</id>
    <content type="html"><![CDATA[<p>In this post I'll demonstrate how to use the <a href="https://developers.google.com/speed/pagespeed/">Google Page Speed</a> tools to analyse the performance of the DevExpress XAF MainDemo.</p>

<p>The easiest way to run Google Page Speed is as a Chrome or Firefox plugin. Both are available <a href="https://developers.google.com/speed/pagespeed/insights_extensions">here</a>. I use Chrome.</p>

<p>Now open the DevExpress MainDemo from Visual Studio. By default it is installed to:</p>

<pre><code>C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.sln
</code></pre>

<p>Set the MainDemo.Web as the startup project and change the connection string in web.config if necessary. Launch the application with Chrome and login as 'Sam' (password is blank). Then press <code>F12</code> to bring up the developer tools. The last tab is the Page Speed Analysis and your browser should look like this:</p>

<p>{% img /images/blog/google-page-speed-001.png %}</p>

<p>Now click <code>Start Analysis</code> button. After a few seconds you should get something like the following results.</p>

<h4>Results against the debug webserver</h4>

<p>{% img /images/blog/google-page-speed-002.png %}</p>

<p>It's as easy as that. We now have a list of suggested improvements. The same report can be generated for any page you visit with your browser.</p>

<p>I get an overall score of 72 out of 100. First thing to note is that the only 'high priority' recommendation is to 'enable keep-alive' which I suspect will not be necessary when running in IIS instead of the debug webserver.</p>

<h4>Switch to use IIS</h4>

<p>Actually to get the main demo to run in IIS is not altogether simple because of the security permissions required for logging in and creating or updating the schema. If you get an error message after login:</p>

<pre><code>Login failed for user 'IIS APPPOOL\DefaultAppPool
</code></pre>

<p>you will need to add the IIS application pool identity to the SQL Server security.</p>

<ul>
<li>Launch SQL Server management studio and connect to the database.</li>
<li>In the <code>Security\Logins</code> right click and select <code>New Login...</code>.</li>
<li>Type in <code>IIS APPPOOL\DefaultAppPool</code> (you won't find it by searching) or <code>IIS APPPOOL\ASP.NET v4.0</code> depending on the security context of the application pool you are using.</li>
<li>Select <code>Server Roles</code> and check <code>public</code> and <code>sysadmin</code> to allow the MainDemo to create the database.</li>
</ul>


<p>(All of this is assuming you are using a non-public instance of SQL Server for development.)</p>

<h4>Results against IIS</h4>

<p>The results are much better: an overall score of 93.</p>

<p>{% img /images/blog/google-page-speed-003.png %}</p>

<h4>Other points of interest</h4>

<p>Let's experiment by turning off compression in the webconfig.</p>

<pre><code>&lt;compression 
  enableHtmlCompression="false" 
  enableCallbackCompression="false" 
  enableResourceCompression="false" 
  enableResourceMerging="false" /&gt;
</code></pre>

<p>The overall score drops to 62.</p>

<p>{% img right /images/blog/google-page-speed-004.png %}</p>

<p>You can alternatively use IIS's dynamic compression by setting <code>enableResourceMerging="true"</code> and the others false and adding a <code>urlCompression</code> setting as follows.</p>

<pre><code>&lt;system.webServer&gt;
  &lt;urlCompression doDynamicCompression="true" /&gt;
  ...
&lt;/system.webServer&gt; 
</code></pre>

<p>(Note that you may need to install the dynamic compression module via <strong>Control Panel/Programs/Turn Windows Features On or Off</strong>.)</p>

<p>Then the analysis is back up to 93. The advantage of IIS dynamic compression in IIS 7 is that it turns itself off automatically when the CPU load is high. See <a href="http://www.codeproject.com/Articles/242133/Making-the-most-out-of-IIS-compression-Part-1-conf">Matt Perdeck's series of articles about IIS Compression</a> for more information.</p>

<p>One mysterious point: if you navigate to the <a href="http://demos.devexpress.com/XAF/MainDemo/default.aspx">online version of the MainDemo</a> and run the analysis there you will notice that compression resource merging must be turned off for some reason and the overall score is only 75. Perhaps someone from DevExpress can explain...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XpoBatch source code available]]></title>
    <link href="http://ZeroSharp.github.com/xpobatch-source-code-available/"/>
    <updated>2012-07-25T16:24:00+01:00</updated>
    <id>http://ZeroSharp.github.com/xpobatch-source-code-available</id>
    <content type="html"><![CDATA[<p>The source code for the fast batch operations with DevExpress XPO <a href="https://github.com/ZeroSharp/XpoBatch">is now available on on GitHub</a>.</p>

<p>It includes unit tests that can be run against SQL Server or in memory. It runs against DevExpress 12.1.7, but it will work against 11.2 (and possibly earlier versions) with a couple of minor modifications which are documented in the code.</p>

<h4>References</h4>

<ul>
<li><a href="/fast-batch-deletions-with-devexpress-xpo/">Fast batch deletions</a></li>
<li><a href="/fast-batch-modifications-with-devexpress-xpo/">Fast batch modifications</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast batch modifications with DevExpress XPO]]></title>
    <link href="http://ZeroSharp.github.com/fast-batch-modifications-with-devexpress-xpo/"/>
    <updated>2012-07-24T14:02:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fast-batch-modifications-with-devexpress-xpo</id>
    <content type="html"><![CDATA[<p>Last week I wrote about <a href="/fast-batch-deletions-with-devexpress-xpo/">fast batch deletions</a>. In this post I'll show how to do the same for modifications.</p>

<p>Let's assume we want to replace the 'State' property with 'CA' and CostCenter with 123 for all records where the 'City' is 'San Francisco'.  The recommended DevExpress approach would be something like the following:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>var xpCollection = new XPCollection&lt;MyObject&gt;(uow, CriteriaOperator.Parse("City == 'San Francisco'"));
foreach (MyObject myObject in xpCollection)
{
    myObject.State = "CA";
    myObject.CostCenter = 123;
}
uow.CommitChanges();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The problem with the above code is that every record must be loaded and then an individual <code>UPDATE</code> command is generated for each modification.  This is necessary for the business logic to be applied correctly (such as the code in methods such as <code>OnSaving()</code>). It is also necessary to handle record locking.</p>

<p>If you know that your objects do not require any of this processing, you can use use direct SQL <a href="http://documentation.devexpress.com/#XPO/CustomDocument8914">as described in the XPO documentation</a>. This however requires knowledge of the underlying database table and is not very versatile, (although the <code>DevExpress.Data.Filtering.CriteriaToWhereClauseHelper()</code> can help if you choose this route).</p>

<p>However, there is a method similar to the one described in the previous post which is equivalent to the direct SQL approach, but is much easier to use. The approach makes use of an extension method on the <code>Session</code> class.</p>

<h4>Example</h4>

<p>Since the extension method is somewhat more complicated than for the <code>Delete</code> case, I will start by showing an example of use before drilling into the supporting code.</p>

<p>The above example would now look like this:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>uow.Update&lt;MyObject&gt;(
    () =&gt; new MyObject(uow) 
              { 
                 State = "CA", 
                 CostCenter = 123 
              }, 
    CriteriaOperator.Parse("City == 'San Francisco'"));
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The Update<T> method takes an <code>Expression&lt;Func&lt;T&gt;&gt;</code> as the first parameter which allows us to pass in an anonymous type which serves as a template for the modification. This way we get strong typing for the property values.</p>

<h4>The extensions method</h4>

<p>Now for the guts of it:</p>

<p>{% codeblock lang:csharp %}
public class PropertyValueStore : List&lt;KeyValuePair&lt;XPMemberInfo, Object>>
{
}</p>

<p>public static class SessionExtensions
{</p>

<pre><code>public static PropertyValueStore CreatePropertyValueStore(XPClassInfo classInfo, MemberInitExpression memberInitExpression)
{
    PropertyValueStore propertyValueStore = new PropertyValueStore();

    /// Parse each expression binding within the anonymous class.  
    /// Each binding represents a property assignment within the IXPObject.
    /// Add a KeyValuePair for the corresponding MemberInfo and (invoked) value.
    foreach (var binding in memberInitExpression.Bindings)
    {
        var assignment = binding as MemberAssignment;
        if (binding == null)
        {
            throw new NotImplementedException("All bindings inside the MemberInitExpression are expected to be of type MemberAssignment.");
        }

        // Get the memberInfo corresponding to the property name.
        string memberName = binding.Member.Name;
        XPMemberInfo memberInfo = classInfo.GetMember(memberName);
        if (memberInfo == null)
            throw new ArgumentOutOfRangeException(memberName, String.Format("The member {0} of the {1} class could not be found.", memberName, classInfo.FullName));

        if (!memberInfo.IsPersistent)
            throw new ArgumentException(memberName, String.Format("The member {0} of the {1} class is not persistent.", memberName, classInfo.FullName));

        // Compile and invoke the assignment expression to obtain the contant value to add as a parameter.
        var constant = Expression.Lambda(assignment.Expression, null).Compile().DynamicInvoke();

        // Add the 
        propertyValueStore.Add(new KeyValuePair&lt;XPMemberInfo, Object&gt;(memberInfo, constant));
    }
    return propertyValueStore;
}

public static ModificationResult Update&lt;T&gt;(this Session session, Expression&lt;Func&lt;T&gt;&gt; evaluator, CriteriaOperator criteria) where T : IXPObject
{
    if (ReferenceEquals(criteria, null))
        criteria = CriteriaOperator.Parse("True");

    XPClassInfo classInfo = session.GetClassInfo(typeof(T));
    var batchWideData = new BatchWideDataHolder4Modification(session);
    int recordsAffected = (int)session.Evaluate&lt;T&gt;(CriteriaOperator.Parse("Count()"), criteria);

    /// Parse the Expression.
    /// Expect to find a single MemberInitExpression.
    PropertyValueStore propertyValueStore = null;
    int memberInitCount = 1;
    evaluator.Visit&lt;MemberInitExpression&gt;(expression =&gt;
        {
            if (memberInitCount &gt; 1)
            {
                throw new NotImplementedException("Only a single MemberInitExpression is allowed for the evaluator parameter.");
            }
            memberInitCount++;
            propertyValueStore = CreatePropertyValueStore(classInfo, expression);
            return expression;
        });

    MemberInfoCollection properties = new MemberInfoCollection(classInfo, propertyValueStore.Select(x =&gt; x.Key).ToArray());

    List&lt;ModificationStatement&gt; collection = UpdateQueryGenerator.GenerateUpdate(classInfo, properties, criteria, batchWideData);
    foreach (UpdateStatement updateStatement in collection.OfType&lt;UpdateStatement&gt;())
    {
        for (int i = 0; i &lt; updateStatement.Parameters.Count; i++)
        {
            Object value = propertyValueStore[i].Value;
            if (value is IXPObject)
                updateStatement.Parameters[i].Value = ((IXPObject)(value)).ClassInfo.GetId(value);
            else
                updateStatement.Parameters[i].Value = value;
        }
        updateStatement.RecordsAffected = recordsAffected;
    }
    return session.DataLayer.ModifyData(collection.ToArray&lt;ModificationStatement&gt;());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h4>Limitations</h4>

<p>There is currently no way to refer to another field within the assignment expressions - you can only set the value to an <code>OperandValue</code>.  So you cannot do</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>uow.Update&lt;MyObject&gt;(
    o =&gt; new MyObject(uow) 
              { 
                 // Does not Compile !!!
                 Property1 = o.Property2,
                 // Neither does this !!!
                 Property3 = o.Property3 + 1
              }, 
    null);
</code></pre>

<p>{% endcodeblock %}</p>

<p>In order to fix this, the <code>evaluator</code> has to be of type <code>Expression&lt;Func&lt;T, T&gt;&gt;</code> instead of <code>Expression&lt;Func&lt;T&gt;&gt;</code>, and then you can use expression trees to get an assignment expression. But then there is no way to pass it to a DevExpress <code>UpdateStatement.Parameter</code> as an <code>OperandValue</code>.</p>

<p><strong>Update:</strong> The <a href="https://github.com/ZeroSharp/XpoBatch">source code is now available on GitHub</a>.</p>

<h4>References</h4>

<p>The code was inspired by <a href="http://www.aneyfamily.com/terryandann/post/2008/04/Batch-Updates-and-Deletes-with-LINQ-to-SQL.aspx">an old blog post Terry Aney</a> in which he describes a similar approach for LINQ to SQL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast batch deletions with DevExpress XPO]]></title>
    <link href="http://ZeroSharp.github.com/fast-batch-deletions-with-devexpress-xpo/"/>
    <updated>2012-07-12T17:00:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fast-batch-deletions-with-devexpress-xpo</id>
    <content type="html"><![CDATA[<p>When deleting a collection of objects, DevExpress recommends using <a href="http://documentation.devexpress.com/#XPO/DevExpressXpoSession_Deletetopic116"><code>Session.Delete(ICollection objects)</code></a>. This has the same effect as calling the <code>Delete()</code> method for every object in the collection so that the business logic is applied correctly. The business logic in this context refers to code such as that in the <code>OnDeleting()</code>, <code>OnDeleted()</code> methods, but it also includes the clearing of references to the object by other objects. This approach is slow, but ensures the integrity of the data.</p>

<p>If you know that your objects do not require any of this processing, you can use use direct SQL <a href="http://documentation.devexpress.com/#XPO/CustomDocument8914">as described in the XPO documentation</a>. This however requires knowledge of the underlying database table and is not very versatile, (although the <code>DevExpress.Data.Filtering.CriteriaToWhereClauseHelper()</code> can help if you choose this route).</p>

<p>An alternative is to use the extension method below:</p>

<p>{% codeblock lang:csharp %}
public static class SessionExtensions
{</p>

<pre><code>public static ModificationResult Delete&lt;T&gt;(this Session session, CriteriaOperator criteria = null) where T : IXPObject
{
    if (ReferenceEquals(criteria, null))
        criteria = CriteriaOperator.Parse("True");

    XPClassInfo classInfo = session.GetClassInfo(typeof(T));
    var batchWideData = new BatchWideDataHolder4Modification(session);    
    int recordsAffected = (int)session.Evaluate&lt;T&gt;(CriteriaOperator.Parse("Count()"), criteria);    
    List&lt;ModificationStatement&gt; collection = DeleteQueryGenerator.GenerateDelete(classInfo, criteria, batchWideData);
    foreach (ModificationStatement item in collection)
    {
        item.RecordsAffected = recordsAffected;
    }

    ModificationStatement[] collectionToArray = collection.ToArray&lt;ModificationStatement&gt;();
    ModificationResult result = session.DataLayer.ModifyData(collectionToArray);
    return result;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Here is an example of how to call the method:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>uow.Delete&lt;MyObject&gt;(CriteriaOperator.Parse("City != 'Chicago'"));
uow.CommitChanges();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>This achieves the same as result and similar performance to direct SQL, but with cleaner syntax and support for criteria.  Also, since it uses a <code>ModificationStatement[]</code>, it works with a remote <code>IDataStore</code>.</p>

<p>See the next post for <a href="/fast-batch-modifications-with-devexpress-xpo/">a similar approach for fast batch modifications</a>.</p>

<p><strong>Update:</strong> The <a href="https://github.com/ZeroSharp/XpoBatch">source code is now available on GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
