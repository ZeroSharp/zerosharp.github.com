<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reports | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/reports/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2018-09-18T11:57:38+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2/"/>
    <updated>2013-05-28T11:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2</id>
    <content type="html"><![CDATA[<p>{% pullquote %}
Good news. The conversion is now two-way. Get the source code <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">from GitHub</a>. Make sure you have built MainDemo.Reports project.</p>

<p>You will find there are now two T4 transforms in the project. <em>RepxToCSharp.tt</em> is covered in the <a href="/making-xaf-reports-even-better-part-1">Part 1</a>. It searches for any <em>.repx</em> files in the solution and converts the scripts into compilable C#.</p>

<p>The second transform is new. <em>CSharpToRepx.tt</em> copies any changes to the script part back into the original <em>.repx</em> files. Again, there are performance optimisations via checksums to prevent overwriting unchanged files.</p>

<p>{% codeblock lang:text %}
(This is an automatically generated file which should be excluded from version control)</p>

<h1>Summary of C# transformation</h1>

<p>Total C# files found                                        :  2
  Total reports injected                                    :  1
  Total reports missing                                     :  0
  Total reports skipped because unchanged                   :  1</p>

<p>Time elapsed: 00:00:02.3483264
{% endcodeblock %}</p>

<p>{"Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily."} You could even write unit tests against the code in the scripts.</p>

<p>{% endpullquote %}</p>

<p>Currently the easiest way of running these scripts is to open them and save them with <code>Ctrl+S</code>. This is because T4 templates were originally designed as a Visual Studio tool.</p>

<p>In the future I'm hoping to improve the integration further. There are ways of including the transformations into the build instead, most of which are covered in <a href="http://www.olegsych.com/2010/04/understanding-t4-msbuild-integration">a blog post by Mr T4, Oleg Sych</a>. I like the idea of it being a NuGet package that can be easily added to any XAF project, but there's a but I'll need some more time to work out how best to achieve this.</p>

<h2>Basic usage summary</h2>

<p>Until then, here are some basic usage instructions.</p>

<ul>
<li>Add the T4 Toolbox extension to Visual Studio</li>
<li>Add a copy of the MainDemo.Reports project to your own solution</li>
<li>Make sure you build it before running the transforms</li>
<li>Open <em>RepxToCSharp.tt</em> in Visual Studio.</li>
<li>Save it with <code>Ctrl+S</code> to run the transform. It will search all the folders in your Solution for <em>.repx</em> files and add corresponding C# classes.</li>
<li>Make any changes you like to the script section (anything outside of <code>// -- Start of embedded scripts --</code> and <code>// -- End of embedded scripts --</code>) will be ignored.</li>
<li>Open <em>CSharpToRepx.tt</em> and run it with <code>Ctrl+S</code>. The changes will be saved back to the corresponding <em>.repx</em>.</li>
</ul>


<h2>Even more power?</h2>

<p>You may notice that if you reload the MainDemo.Reports project, you can now see <code>View in Designer</code> in the context menu when you right-click on the <em>.repx.cs</em> file.</p>

<p>{% img /images/blog/xaf-report-sync-003.png %}</p>

<p>Let's click it and see what happens. It opens directly in Visual Studio (like an <code>XtraReport</code>).</p>

<p>{% img /images/blog/xaf-report-sync-004.png %}</p>

<p>Now, this is all highly experimental. You can see there are some warnings... Also, there is no connection with XPO, so the <em>Preview</em> is always empty.</p>

<p>That said, it doesn't seem like too much of a stretch to eventually allow far more Visual Studio integration for XAF reports...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1/"/>
    <updated>2013-05-21T14:38:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1</id>
    <content type="html"><![CDATA[<p>{% pullquote %}
The ability to create reports using a report writer is a very powerful feature of <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, but there are some limitations which are particularly cumbersome to deal with in complex project.</p>

<p>One of the projects I work on has over 100 reports in it. Even though we make use of unit tests to ensure they are not broken, the maintenance of the code in the embedded scripts is particularly difficult to manage.</p>

<ul>
<li>XafReports are <em>.repx</em> files which are usually loaded into the report table during the database update routine. They are a subclass of XtraReports which with some added restrictions.</li>
<li>Any scripts are stored as a string or serialized to a <em>resources</em> property.</li>
<li>The report writer is available only in the Windows Forms application. This must be used whenever a change is made to a report. The modified report must be exported as a repx file and then added to the module as an embedded report. The procedure is <a href="http://documentation.devexpress.com/#Xaf/CustomDocument2786">described here</a>.</li>
</ul>


<p>These aspects of XAF reports give rise to several development headaches.</p>

<ul>
<li>While script syntax can be checked within the report writer at design time (via the Validate button in the scripts tab), the script code is still brittle.</li>
<li>Errors that result from Script syntax are sometimes only discovered at run time (you can write a unit test to check during build, but we really want to the compiler to tell us).</li>
<li>Refactoring any classes requires a considerable amount of work with the report writer in order to apply any changes to the code within the scripts.</li>
<li>There is no Intellisense in the report writer.</li>
<li>Version control diff comparisons and merging are impossible.</li>
</ul>


<p>{"The aim of these posts is to provide a two-way conversion process between .repx and C# files."} In order to accomplish this we'll be relying on Visual Studio's excellent T4 templating engine.
{% endpullquote %}</p>

<h2>Installing T4Toolbox</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 Text Transformation Toolkit</a> is a template based code generation framework which is included with Visual Studio. On top of this <a href="http://www.olegsych.com/">Oleg Sych</a> provides a Visual Studio extension called <a href="http://visualstudiogallery.msdn.microsoft.com/7f9bd62f-2505-4aa4-9378-ee7830371684">T4 Toolbox</a> which adds some additional features.</p>

<p>Install T4 Toolbox by selecting <strong>Tools/Extensions and Updates</strong> from Visual Studio and searching for it.</p>

<p>{% img /images/blog/xaf-report-sync-001.png %}</p>

<h2>The ReportSync MainDemo</h2>

<p>Next, download the modified MainDemo application from my <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">GitHub repository</a> and open it in Visual Studio.</p>

<p>First lets look at the embedded reports which I have modified slightly so that they include scripts. I added these scripts via the MainDemo.Win application.</p>

<p>Let's look at the <em>ContactsGroupByPosition.repx</em> file. You will find that there is a section:</p>

<p>{% codeblock lang:csharp %}
this.ScriptsSource = "\r\nprivate void xrLabel4_BeforePrint(object sender, System.Drawing.Printing.PrintE" +</p>

<pre><code>"ventArgs e) {\r\n\txrLabel4.Text = xrLabel4.Text + \" Test!\";\r\n}\r\n";
</code></pre>

<p>{% endcodeblock %}</p>

<p>In this case, the script has been saved as a string. The other report, which has only slightly more complex script code looks like this:</p>

<p>{% codeblock lang:csharp %}
private System.Resources.ResourceManager resources {</p>

<pre><code>get {
    if (_resources == null) {
        string resourceString = @"zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPT.....5kIFtEdWVEYXRlXSA8PSAnQEN1cnJlbnREYXRlJwABEFRhc2tzU3RhdGVSZXBvcnQ=";
        this._resources = new DevExpress.XtraReports.Serialization.XRResourceManager(resourceString);
    }
    return this._resources;
}
</code></pre>

<p>}
// ...
this.ScriptsSource = resources.GetString("$this.ScriptsSource");
{% endcodeblock %}</p>

<p>Here, the scripts are not even in plain text. They have been serialised to the <em>resources</em> property.</p>

<h2>The MainDemo.Reports assembly</h2>

<p>You will find a new assembly <strong>MainDemo.Reports</strong> which contains a T4 template <em>RepxToCSharp.tt</em>. This is a T4 template which will search for repx files and transform them into much more helpful plain C#.</p>

<p>The template will run every time it is saved. Currently, it depends on code within the MainDemo.Reports assembly, so make sure you have compiled it in Debug mode. Then open the <em>RepxToCSharp.tt</em> and press <code>Ctrl+S</code> to save (and run the T4 transformation).</p>

<h2>The output</h2>

<p>The template will generate two types of output. First, it generates the following report which you should find in <em>RepxToCSharp.txt</em></p>

<p>{% codeblock lang:text %}
(This is an automatically generated file which should be excluded from version control)</p>

<h1>Summary of repx transformation</h1>

<p>Total repx files found                                      :  2
  Total reports generated                                   :  2
  Total reports skipped because unchanged                   :  0</p>

<p>Time elapsed: 00:00:02.1762029
{% endcodeblock %}</p>

<p>In addition, each repx will have been transformed into two correpsonding files. All the generated files are highlighted in yellow:</p>

<p>{% img /images/blog/xaf-report-sync-002.png %}</p>

<p>Now the scripts have been deserialized from the repx and put in a partial class and the remainder of the repx has been transformed into a corresponding <code>XafReport</code> descendant. See for instance, <em>ContactsGroupedByPosition.cs</em> (which stored its scripts as a string) is as follows:</p>

<p>{% codeblock lang:csharp ContactsGroupedByPosition.cs %}
public partial class _ContactsGroupedByPosition
{</p>

<pre><code>// -- Start of embedded scripts -- 

private void xrLabel4_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
    xrLabel4.Text = xrLabel4.Text + " Test!";
}

// -- End of embedded scripts --    
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>And <em>TasksStateReport.cs</em> is now like this</p>

<p>{% codeblock lang:csharp TasksStateReport.cs %}
public partial class _TasksStateReport
{</p>

<pre><code>// -- Start of embedded scripts -- 

private void xrLabel1_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
    // This is a test
    xrLabel1.Text = "Hello";
}

private void xrLabel2_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
    xrLabel2.Text = GetLabel2Text();
}

public string GetLabel2Text()
{
    return "Label 2!";
}

// -- End of embedded scripts --    
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>A note about performance</h2>

<p>The process of transforming the repx into C# is quite quick (a couple of seconds per <em>repx</em>), but when you have dozens of reports, it can quickly be tiresome. Therefore, there is a performance optimisation which checksums the repx and skips the transformation if it has not changed.</p>

<p>(In a future version, we will also use a similar checksum in the other direction to determine whether the scripts have been modified).</p>

<h2>Already much better</h2>

<p>Now we have much more useful source files. Versions can be compared easily. The compiler will immediately inform us of any problems with the scripts within our reports.</p>

<p>This is work in progress. Next up, I will be adding the 'reverse'. That is, a new transformation template which looks for scripts which have changed and 'injects' them back into the original <em>repx</em> file.</p>
]]></content>
  </entry>
  
</feed>
