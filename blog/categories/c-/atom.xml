<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | ZeroSharp]]></title>
  <link href="http://blog.zerosharp.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://blog.zerosharp.com/"/>
  <updated>2012-10-23T17:28:16+01:00</updated>
  <id>http://blog.zerosharp.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 1]]></title>
    <link href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/"/>
    <updated>2012-10-23T12:52:00+01:00</updated>
    <id>http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud</id>
    <content type="html"><![CDATA[<h1>Part 1: Putting the Database in the Cloud</h1>

<p>This is the first part of a tutorial for installing the DevExpress MainDemo.Web to Amazon Web Services, but the same principles apply to any ASP.NET web application.</p>

<p>This part covers creating an Amazon RDS instance running SQL Server Express and connecting a (locally running) MainDemo to it.</p>

<p>At the time of writing the DevExpress version is 12.1.7.</p>

<h2>Amazon Web Services</h2>

<p>If you have not already done so, you will need to sign up with <a href="http://aws.amazon.com/">Amazon Web Services</a>. There are costs associated with AWS, but the tutorial only uses very small cheap instances which cost as little as 2 cents per hour to run. Also, new customers get a load of hours for free as part of the <a href="http://aws.amazon.com/free/">AWS Free Usage Tier</a>. See the <a href="http://aws.amazon.com/ec2/pricing/">AWS pricing</a> for more information. Don't forget to terminate your instances when you have finished.</p>

<h2>AWS Toolkit</h2>

<p>Amazon have made it all easy by providing a Visual Studio add-in.</p>

<p>Install the <a href="http://aws.amazon.com/visualstudio/">AWS Toolkit for Microsoft Visual Studio</a>. If you haven't used it before, then when you start a wizard it will ask you for your AWS fcredentials.</p>

<p><img src="/images/blog/aws/publish-to-aws-1.jpg" title="'figure 1'" ></p>

<p>The <strong>Display Name</strong> is the a name you give to the AWS account you are using. I set mine to <em>zerosharp</em>. This is helpful when you have multiple AWS accounts. The <strong>Access Key</strong> and the <strong>Secret Key</strong> are both available on the <a href="https://aws.amazon.com/security-credentials">security credentials page</a> - you will have to click <strong>Show</strong> in order to display the secret key.
You can leave the account number blank.</p>

<h2>The database</h2>

<p>Now let's provision a new SQL Server Express database.</p>

<p>In Visual Studio, open the AWS Explorer (<code>Ctrl+K,A</code> or in the <em>View</em> menu). You probably want to select a region near your physical location. I chose <em>EU West (Ireland)</em>. Right-click on 'Amazon RDS' and select 'Launch Instance'.</p>

<p><img src="/images/blog/aws/aws-explorer-1.jpg" title="&#34;figure 2&#34;" alt="&#34;figure 2&#34;"></p>

<p>At the following screen, select <strong>SQL Server Express</strong>. Note that we could just as easily provision the Standard or Enterprise editions as well as a host of other database options.</p>

<p><img src="/images/blog/aws/launch-aws-rds-1.jpg" title="&#34;figure 3&#34;" alt="&#34;figure 3&#34;"></p>

<p>Configure the settings for the connection. Choose an instance class of <strong>Micro</strong> which is fine for our needs. Note the <em>Master User Name</em> and the <em>Master User Password</em> will be needed when we modify the MainDemo's connection string.</p>

<p><img src="/images/blog/aws/launch-aws-rds-2.jpg" title="&#34;figure 4&#34;" alt="&#34;figure 4&#34;"></p>

<p>In this screen we configure settings for the port and security. In order to connect from our local MainDemo, you need to add the permission for the your CIDR route which will let you connect to the database from your local machine. It's easy to add it to the default group later (via DB Security Groups).</p>

<p><img src="/images/blog/aws/launch-aws-rds-3.jpg" title="&#34;figure 5&#34;" alt="&#34;figure 5&#34;"></p>

<p>Set the backup options to 'No backups'. Nice to have the option though.</p>

<p><img src="/images/blog/aws/launch-aws-rds-4.jpg" title="&#34;figure 6&#34;" alt="&#34;figure 6&#34;"></p>

<p>Review the options and click 'Launch'.</p>

<p><img src="/images/blog/aws/launch-aws-rds-5.jpg" title="&#34;figure 7&#34;" alt="&#34;figure 7&#34;"></p>

<p>The database instance will be available after a few minutes. You have to be patient here - there is not much feedback, just the yellow <em>creating</em> status. You can press 'Refresh' once in a while, but it's likely to take up to 15 minutes. Eventually you should see a green <em>created</em> status.</p>

<h2>Modify the MainDemo connection string</h2>

<p>Open the MainDemo in Visual Studio.  Open the web.config file and set the connection string to point to your Amazon RDS instance.</p>

<p>The 'User ID' and 'Password' should be the same as the ones you entered above. The address is available from the Visual Studio Properties window as 'Endpoint' when you select the DB Instance in the AWS Explorer.</p>

<p><img src="/images/blog/aws/aws-properties-1.jpg" title="&#34;figure 8&#34;" alt="&#34;figure 8&#34;"></p>

<p>For instance mine looks like this:</p>

<pre><code>&lt;add name="ConnectionString" connectionString="User ID=zerosharp;Password=password;Pooling=false;Data Source=maindemo.c5uchpz3rigs.eu-west-1.rds.amazonaws.com;Initial Catalog=MainDemo_v12.1"/&gt;    
</code></pre>

<h2>Run the MainDemo locally</h2>

<p>Now run the MainDemo locally. When you get to the login page, login as Sam (no password).  At this point, the MainDemo will connect to the Amazon RDS instance using the connection string we specified above and create the database (which takes at least 30 seconds on my machine). Afterwards the MainDemo will function as normal.</p>

<h2>Next up</h2>

<p>In the next post I explain how to publish the MainDemo application itself to an EC2 instance in the Amazon cloud.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The best PC laptop is a Mac]]></title>
    <link href="http://blog.zerosharp.com/the-best-pc-laptop-is-a-mac/"/>
    <updated>2012-10-09T17:09:00+01:00</updated>
    <id>http://blog.zerosharp.com/the-best-pc-laptop-is-a-mac</id>
    <content type="html"><![CDATA[<h3>A month ago</h3>

<p>I've never liked laptops. The screen seems so small. A powerful laptop is too heavy; a light one doesn't cut the mustard.
I can't even find the on/off switch.</p>

<p>Then there are those fancy new <strong>Macbook Pro</strong>s with retina displays. They seem light and powerful and the screen looks great. I don't know much about Macs, but I'd like to learn.</p>

<p><blockquote><p>But I need Microsoft Windows and Visual Studio. I know theoretically I can run a virtual machine or setup a dual boot, but I'll bet it's all a bit of a hassle and rather clunky...</p></blockquote></p>

<h3>Three hours after my Macbook Pro arrived</h3>

<p>Windows 8 is installed and looks absolutely beautiful! The font is small, but the screen is so sharp that it is quite readable. Visual Studio looks great with the font size in the editor Window set to 14 or 15.</p>

<p>The installation was much simpler than most other Windows installations I've done. I followed <a href="http://www.iclarified.com/entry/index.php?enid=20961">this tutorial on iClarified</a> to set up a dual boot. You use a tool called the Bootcamp Advisor which is already installed on your Mac to create an bootable USB for installing Windows. Since all Macs are the same, the Bootcamp Advisor sets up all the drivers correctly for you.</p>

<h3>Three weeks later</h3>

<p><blockquote><p>This is by far the most pleasant laptop I've ever used for development.</p></blockquote></p>

<p>The screen is wonderful - the machine seems very fast and it is no weight to carry around.</p>

<h3>A tiny little gripe</h3>

<p>There is a little annoyance with the Bootcamp Control Panel which won't start properly, but Thomas Jespersen found a <a href="http://apple.stackexchange.com/a/59132/30710">workaround</a>, <a href="https://gist.github.com/3859956">which I've put in a batch file</a>. You need this to make the F1-12 keys work as they would in Windows.</p>

<h3>Some help with the Mac keyboard and trackpad</h3>

<p>I'm very picky about keyboards and I need to be able to find all my Visual Studio shortcuts in the same places. All in all I find the keyboard fine to work with.</p>

<p>The <code>delete</code> key works like a PC <code>backspace</code> so you have to do <code>fn+delete</code> to delete forwards. Here's a list of other shortcuts:</p>

<table>
<thead>
<tr>
<th align="left">PC (running Windows)       </th>
<th align="left"> &nbsp;Macbook (running Windows)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>Windows</code> key              </td>
<td align="left"> &nbsp;<code>command</code></td>
</tr>
<tr>
<td align="left"><code>Del</code>                      </td>
<td align="left"> &nbsp;<code>fn+delete</code> </td>
</tr>
<tr>
<td align="left"><code>Ins</code>                      </td>
<td align="left"> &nbsp;<code>fn+return</code></td>
</tr>
<tr>
<td align="left"><code>Home</code>                     </td>
<td align="left"> &nbsp;<code>fn+left</code></td>
</tr>
<tr>
<td align="left"><code>End</code>                      </td>
<td align="left"> &nbsp;<code>fn+right</code></td>
</tr>
<tr>
<td align="left"><code>PgUp</code>                     </td>
<td align="left"> &nbsp;<code>fn+up</code></td>
</tr>
<tr>
<td align="left"><code>PgDn</code>                     </td>
<td align="left"> &nbsp;<code>fn+down</code></td>
</tr>
<tr>
<td align="left"><code>Ctrl+Home</code>                </td>
<td align="left"> &nbsp;<code>fn+control+left</code></td>
</tr>
<tr>
<td align="left"><code>Ctrl+End</code>                 </td>
<td align="left"> &nbsp;<code>fn+control+right</code></td>
</tr>
</tbody>
</table>


<p>There are some keys which you will still not find, for instance, <code>NumLock</code>, <code>PrtScn</code>, <code>Break</code>.</p>

<p>If I need these, I use the On-Screen keyboard (type 'osk' into the search bar). If you cannot see the <code>NumLock</code>, the options allow you to show the numeric keypad. Alternatively, you could always plug in a USB keyboard.</p>

<p>The trackpad works great including the two-finger click for right-click and two-finger swipe for scroll.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A look at the DevExpress MainDemo with Google Page Speed]]></title>
    <link href="http://blog.zerosharp.com/a-look-at-the-devexpress-maindemo-with-google-page-speed/"/>
    <updated>2012-09-12T17:22:00+01:00</updated>
    <id>http://blog.zerosharp.com/a-look-at-the-devexpress-maindemo-with-google-page-speed</id>
    <content type="html"><![CDATA[<p>In this post I'll demonstrate how to use the <a href="https://developers.google.com/speed/pagespeed/">Google Page Speed</a> tools to analyse the performance of the DevExpress XAF MainDemo.</p>

<p>The easiest way to run Google Page Speed is as a Chrome or Firefox plugin. Both are available <a href="https://developers.google.com/speed/pagespeed/insights_extensions">here</a>. I use Chrome.</p>

<p>Now open the DevExpress MainDemo from Visual Studio. By default it is installed to:</p>

<pre><code>C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.sln
</code></pre>

<p>Set the MainDemo.Web as the startup project and change the connection string in web.config if necessary. Launch the application with Chrome and login as 'Sam' (password is blank). Then press <code>F12</code> to bring up the developer tools. The last tab is the Page Speed Analysis and your browser should look like this:</p>

<p><img src="/images/blog/google-page-speed-001.png"></p>

<p>Now click <code>Start Analysis</code> button. After a few seconds you should get something like the following results.</p>

<h4>Results against the debug webserver</h4>

<p><img src="/images/blog/google-page-speed-002.png"></p>

<p>It's as easy as that. We now have a list of suggested improvements. The same report can be generated for any page you visit with your browser.</p>

<p>I get an overall score of 72 out of 100. First thing to note is that the only 'high priority' recommendation is to 'enable keep-alive' which I suspect will not be necessary when running in IIS instead of the debug webserver.</p>

<h4>Switch to use IIS</h4>

<p>Actually to get the main demo to run in IIS is not altogether simple because of the security permissions required for logging in and creating or updating the schema. If you get an error message after login:</p>

<pre><code>Login failed for user 'IIS APPPOOL\DefaultAppPool
</code></pre>

<p>you will need to add the IIS application pool identity to the SQL Server security.</p>

<ul>
<li>Launch SQL Server management studio and connect to the database.</li>
<li>In the <code>Security\Logins</code> right click and select <code>New Login...</code>.</li>
<li>Type in <code>IIS APPPOOL\DefaultAppPool</code> (you won't find it by searching) or <code>IIS APPPOOL\ASP.NET v4.0</code> depending on the security context of the application pool you are using.</li>
<li>Select <code>Server Roles</code> and check <code>public</code> and <code>sysadmin</code> to allow the MainDemo to create the database.</li>
</ul>


<p>(All of this is assuming you are using a non-public instance of SQL Server for development.)</p>

<h4>Results against IIS</h4>

<p>The results are much better: an overall score of 93.</p>

<p><img src="/images/blog/google-page-speed-003.png"></p>

<h4>Other points of interest</h4>

<p>Let's experiment by turning off compression in the webconfig.</p>

<pre><code>&lt;compression 
  enableHtmlCompression="false" 
  enableCallbackCompression="false" 
  enableResourceCompression="false" 
  enableResourceMerging="false" /&gt;
</code></pre>

<p>The overall score drops to 62.</p>

<p><img class="right" src="/images/blog/google-page-speed-004.png"></p>

<p>You can alternatively use IIS's dynamic compression by setting <code>enableResourceMerging="true"</code> and the others false and adding a <code>urlCompression</code> setting as follows.</p>

<pre><code>&lt;system.webServer&gt;
  &lt;urlCompression doDynamicCompression="true" /&gt;
  ...
&lt;/system.webServer&gt; 
</code></pre>

<p>(Note that you may need to install the dynamic compression module via <strong>Control Panel/Programs/Turn Windows Features On or Off</strong>.)</p>

<p>Then the analysis is back up to 93. The advantage of IIS dynamic compression in IIS 7 is that it turns itself off automatically when the CPU load is high. See <a href="http://www.codeproject.com/Articles/242133/Making-the-most-out-of-IIS-compression-Part-1-conf">Matt Perdeck's series of articles about IIS Compression</a> for more information.</p>

<p>One mysterious point: if you navigate to the <a href="http://demos.devexpress.com/XAF/MainDemo/default.aspx">online version of the MainDemo</a> and run the analysis there you will notice that compression resource merging must be turned off for some reason and the overall score is only 75. Perhaps someone from DevExpress can explain...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XpoBatch source code available]]></title>
    <link href="http://blog.zerosharp.com/xpobatch-source-code-available/"/>
    <updated>2012-07-25T16:24:00+01:00</updated>
    <id>http://blog.zerosharp.com/xpobatch-source-code-available</id>
    <content type="html"><![CDATA[<p>The source code for the fast batch operations with DevExpress XPO <a href="https://github.com/ZeroSharp/XpoBatch">is now available on on GitHub</a>.</p>

<p>It includes unit tests that can be run against SQL Server or in memory. It runs against DevExpress 12.1.7, but it will work against 11.2 (and possibly earlier versions) with a couple of minor modifications which are documented in the code.</p>

<h4>References</h4>

<ul>
<li><a href="/fast-batch-deletions-with-devexpress-xpo/">Fast batch deletions</a></li>
<li><a href="/fast-batch-modifications-with-devexpress-xpo/">Fast batch modifications</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast batch modifications with DevExpress XPO]]></title>
    <link href="http://blog.zerosharp.com/fast-batch-modifications-with-devexpress-xpo/"/>
    <updated>2012-07-24T14:02:00+01:00</updated>
    <id>http://blog.zerosharp.com/fast-batch-modifications-with-devexpress-xpo</id>
    <content type="html"><![CDATA[<p>Last week I wrote about <a href="/fast-batch-deletions-with-devexpress-xpo/">fast batch deletions</a>. In this post I'll show how to do the same for modifications.</p>

<p>Let's assume we want to replace the 'State' property with 'CA' and CostCenter with 123 for all records where the 'City' is 'San Francisco'.  The recommended DevExpress approach would be something like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">UnitOfWork</span> <span class="n">uow</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnitOfWork</span><span class="p">())</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">var</span> <span class="n">xpCollection</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XPCollection</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MyObject</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">uow</span><span class="p">,</span> <span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;City == &#39;San Francisco&#39;&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="n">MyObject</span> <span class="n">myObject</span> <span class="k">in</span> <span class="n">xpCollection</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">myObject</span><span class="p">.</span><span class="n">State</span> <span class="p">=</span> <span class="s">&quot;CA&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myObject</span><span class="p">.</span><span class="n">CostCenter</span> <span class="p">=</span> <span class="m">123</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">uow</span><span class="p">.</span><span class="n">CommitChanges</span><span class="p">();</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The problem with the above code is that every record must be loaded and then an individual <code>UPDATE</code> command is generated for each modification.  This is necessary for the business logic to be applied correctly (such as the code in methods such as <code>OnSaving()</code>). It is also necessary to handle record locking.</p>

<p>If you know that your objects do not require any of this processing, you can use use direct SQL <a href="http://documentation.devexpress.com/#XPO/CustomDocument8914">as described in the XPO documentation</a>. This however requires knowledge of the underlying database table and is not very versatile, (although the <code>DevExpress.Data.Filtering.CriteriaToWhereClauseHelper()</code> can help if you choose this route).</p>

<p>However, there is a method similar to the one described in the previous post which is equivalent to the direct SQL approach, but is much easier to use. The approach makes use of an extension method on the <code>Session</code> class.</p>

<h4>Example</h4>

<p>Since the extension method is somewhat more complicated than for the <code>Delete</code> case, I will start by showing an example of use before drilling into the supporting code.</p>

<p>The above example would now look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">UnitOfWork</span> <span class="n">uow</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnitOfWork</span><span class="p">())</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">uow</span><span class="p">.</span><span class="n">Update</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MyObject</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span>
</span><span class='line'>    <span class="p">()</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">new</span> <span class="n">MyObject</span><span class="p">(</span><span class="n">uow</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                 <span class="n">State</span> <span class="p">=</span> <span class="s">&quot;CA&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">CostCenter</span> <span class="p">=</span> <span class="m">123</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>    <span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;City == &#39;San Francisco&#39;&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Update<T> method takes an <code>Expression&lt;Func&lt;T&gt;&gt;</code> as the first parameter which allows us to pass in an anonymous type which serves as a template for the modification. This way we get strong typing for the property values.</p>

<h4>The extensions method</h4>

<p>Now for the guts of it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PropertyValueStore</span> <span class="p">:</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">XPMemberInfo</span><span class="p">,</span> <span class="n">Object</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SessionExtensions</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="n">PropertyValueStore</span> <span class="n">CreatePropertyValueStore</span><span class="p">(</span><span class="n">XPClassInfo</span> <span class="n">classInfo</span><span class="p">,</span> <span class="n">MemberInitExpression</span> <span class="n">memberInitExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PropertyValueStore</span> <span class="n">propertyValueStore</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PropertyValueStore</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Parse each expression binding within the anonymous class.  </span>
</span><span class='line'>    <span class="c1">/// Each binding represents a property assignment within the IXPObject.</span>
</span><span class='line'>    <span class="c1">/// Add a KeyValuePair for the corresponding MemberInfo and (invoked) value.</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">binding</span> <span class="k">in</span> <span class="n">memberInitExpression</span><span class="p">.</span><span class="n">Bindings</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">assignment</span> <span class="p">=</span> <span class="n">binding</span> <span class="k">as</span> <span class="n">MemberAssignment</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">binding</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">(</span><span class="s">&quot;All bindings inside the MemberInitExpression are expected to be of type MemberAssignment.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get the memberInfo corresponding to the property name.</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">memberName</span> <span class="p">=</span> <span class="n">binding</span><span class="p">.</span><span class="n">Member</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>        <span class="n">XPMemberInfo</span> <span class="n">memberInfo</span> <span class="p">=</span> <span class="n">classInfo</span><span class="p">.</span><span class="n">GetMember</span><span class="p">(</span><span class="n">memberName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">memberInfo</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="n">memberName</span><span class="p">,</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;The member {0} of the {1} class could not be found.&quot;</span><span class="p">,</span> <span class="n">memberName</span><span class="p">,</span> <span class="n">classInfo</span><span class="p">.</span><span class="n">FullName</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">memberInfo</span><span class="p">.</span><span class="n">IsPersistent</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">memberName</span><span class="p">,</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;The member {0} of the {1} class is not persistent.&quot;</span><span class="p">,</span> <span class="n">memberName</span><span class="p">,</span> <span class="n">classInfo</span><span class="p">.</span><span class="n">FullName</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Compile and invoke the assignment expression to obtain the contant value to add as a parameter.</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">constant</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Lambda</span><span class="p">(</span><span class="n">assignment</span><span class="p">.</span><span class="n">Expression</span><span class="p">,</span> <span class="k">null</span><span class="p">).</span><span class="n">Compile</span><span class="p">().</span><span class="n">DynamicInvoke</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the </span>
</span><span class='line'>        <span class="n">propertyValueStore</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">XPMemberInfo</span><span class="p">,</span> <span class="n">Object</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">memberInfo</span><span class="p">,</span> <span class="n">constant</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">propertyValueStore</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">ModificationResult</span> <span class="n">Update</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="k">this</span> <span class="n">Session</span> <span class="n">session</span><span class="p">,</span> <span class="n">Expression</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Func</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">evaluator</span><span class="p">,</span> <span class="n">CriteriaOperator</span> <span class="n">criteria</span><span class="p">)</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IXPObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ReferenceEquals</span><span class="p">(</span><span class="n">criteria</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
</span><span class='line'>        <span class="n">criteria</span> <span class="p">=</span> <span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;True&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XPClassInfo</span> <span class="n">classInfo</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">GetClassInfo</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">batchWideData</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BatchWideDataHolder4Modification</span><span class="p">(</span><span class="n">session</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">recordsAffected</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">session</span><span class="p">.</span><span class="n">Evaluate</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;Count()&quot;</span><span class="p">),</span> <span class="n">criteria</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Parse the Expression.</span>
</span><span class='line'>    <span class="c1">/// Expect to find a single MemberInitExpression.</span>
</span><span class='line'>    <span class="n">PropertyValueStore</span> <span class="n">propertyValueStore</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">memberInitCount</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">evaluator</span><span class="p">.</span><span class="n">Visit</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MemberInitExpression</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">expression</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">memberInitCount</span> <span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">(</span><span class="s">&quot;Only a single MemberInitExpression is allowed for the evaluator parameter.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">memberInitCount</span><span class="p">++;</span>
</span><span class='line'>            <span class="n">propertyValueStore</span> <span class="p">=</span> <span class="n">CreatePropertyValueStore</span><span class="p">(</span><span class="n">classInfo</span><span class="p">,</span> <span class="n">expression</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">expression</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MemberInfoCollection</span> <span class="n">properties</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemberInfoCollection</span><span class="p">(</span><span class="n">classInfo</span><span class="p">,</span> <span class="n">propertyValueStore</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="p">.</span><span class="n">Key</span><span class="p">).</span><span class="n">ToArray</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ModificationStatement</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">collection</span> <span class="p">=</span> <span class="n">UpdateQueryGenerator</span><span class="p">.</span><span class="n">GenerateUpdate</span><span class="p">(</span><span class="n">classInfo</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">criteria</span><span class="p">,</span> <span class="n">batchWideData</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="n">UpdateStatement</span> <span class="n">updateStatement</span> <span class="k">in</span> <span class="n">collection</span><span class="p">.</span><span class="n">OfType</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UpdateStatement</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">updateStatement</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="k">value</span> <span class="p">=</span> <span class="n">propertyValueStore</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="k">is</span> <span class="n">IXPObject</span><span class="p">)</span>
</span><span class='line'>                <span class="n">updateStatement</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="p">((</span><span class="n">IXPObject</span><span class="p">)(</span><span class="k">value</span><span class="p">)).</span><span class="n">ClassInfo</span><span class="p">.</span><span class="n">GetId</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">updateStatement</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">updateStatement</span><span class="p">.</span><span class="n">RecordsAffected</span> <span class="p">=</span> <span class="n">recordsAffected</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="p">.</span><span class="n">DataLayer</span><span class="p">.</span><span class="n">ModifyData</span><span class="p">(</span><span class="n">collection</span><span class="p">.</span><span class="n">ToArray</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ModificationStatement</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Limitations</h4>

<p>There is currently no way to refer to another field within the assignment expressions - you can only set the value to an <code>OperandValue</code>.  So you cannot do</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">uow</span><span class="p">.</span><span class="n">Update</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MyObject</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span>
</span><span class='line'>    <span class="n">o</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">new</span> <span class="n">MyObject</span><span class="p">(</span><span class="n">uow</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                 <span class="c1">// Does not Compile !!!</span>
</span><span class='line'>                 <span class="n">Property1</span> <span class="p">=</span> <span class="n">o</span><span class="p">.</span><span class="n">Property2</span><span class="p">,</span>
</span><span class='line'>                 <span class="c1">// Neither does this !!!</span>
</span><span class='line'>                 <span class="n">Property3</span> <span class="p">=</span> <span class="n">o</span><span class="p">.</span><span class="n">Property3</span> <span class="p">+</span> <span class="m">1</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>    <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In order to fix this, the <code>evaluator</code> has to be of type <code>Expression&lt;Func&lt;T, T&gt;&gt;</code> instead of <code>Expression&lt;Func&lt;T&gt;&gt;</code>, and then you can use expression trees to get an assignment expression. But then there is no way to pass it to a DevExpress <code>UpdateStatement.Parameter</code> as an <code>OperandValue</code>.</p>

<p><strong>Update:</strong> The <a href="https://github.com/ZeroSharp/XpoBatch">source code is now available on GitHub</a>.</p>

<h4>References</h4>

<p>The code was inspired by <a href="http://www.aneyfamily.com/terryandann/post/2008/04/Batch-Updates-and-Deletes-with-LINQ-to-SQL.aspx">an old blog post Terry Aney</a> in which he describes a similar approach for LINQ to SQL.</p>
]]></content>
  </entry>
  
</feed>
