<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2014-09-11T09:08:32+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 2: The Solution]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/"/>
    <updated>2014-09-11T09:18:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2</id>
    <content type="html"><![CDATA[<p>Previously: <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></p>

<h2>The solution</h2>

<p>The code for the example is <a href="https://github.com/ZeroSharp/RoslynPlugins">available on GitHub</a>.</p>

<h4>How it looks</h4>

<p>So here's the Hello World page in production:</p>

<p><img src="/images/blog/roslyn-plugins-001.png">.</p>

<p>We navigate to the plugins view and create a new replacement for the HelloWorldGenerator:</p>

<p><img src="/images/blog/roslyn-plugins-002.png">.</p>

<p>Without restarting, we can return to the HelloWorld page and see that the new class is being used because the output has changed.</p>

<p><img src="/images/blog/roslyn-plugins-003.png">.</p>

<p>If you delete the row from the plugins page, the behaviour reverts to the original implementation (the code that was originally shipped with production).</p>

<h4>Basic project setup</h4>

<p>First, I created a new ASP.NET MVC 5 application. I added a HelloWorldContrroller and a View. I added a <code>Plugin</code> model and corresponding views. To get started I followed the tutorial here (http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started). Once I had the basics in place, I added the following NuGet packages.</p>

<p><strong>Stable</strong></p>

<ul>
<li>EntityFramework</li>
<li>Ninject</li>
<li>Ninject.MVC5</li>
<li>Ninject.Conventions</li>
</ul>


<p><strong>Pre-release</strong></p>

<ul>
<li>Microsoft.CodeAnalysis.CSharp</li>
</ul>


<p>The <em>Microsoft.CodeAnalysis.CSharp</em> is the 'Roslyn' package. It is still in beta, so you have to switch to the pre-release.</p>

<p>Next we'll look at the dependency injection part in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 1: The Goal]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/"/>
    <updated>2014-09-09T10:47:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1</id>
    <content type="html"><![CDATA[<h2>The goal</h2>

<p><span class='pullquote-right' data-pullquote='How can we replace a given class&#8217;s code with new code at runtime?'>
How can we replace a given class's code with new code at runtime? In particular, how we can we do this while allowing dependency injection and  sidestepping assembly versioning issues.
</span></p>

<p>Let's say you have bunch of classes like this:</p>

<p>```c# SomeGenerator.cs
public class SomeGenerator : IGenerator
{</p>

<pre><code>public SomeGenerator(ISomeDependency dependency, IAnotherDependency another)
{
    ...
}

public void Generate()
{
    ...
    // generate some output
}
</code></pre>

<p>}
```</p>

<p>Now let's assume that you need the ability to modify the behaviour of these classes at runtime without upgrading. And change the dependencies. Without restarting the application.</p>

<h4>Old school - The MEF approach (and most other plug-in frameworks)</h4>

<p>One approach would be to place each generator in a separate assembly and then you could load them at runtime. (This was my first effort - <em>oh how I struggled</em>).</p>

<p>You can make use of something like <a href="http://msdn.microsoft.com/en-us/library/dd460648.aspx">MEF</a> to help with the grunt work, but can still be very complex.</p>

<p>One difficulty is the dependencies. The dependencies are often defined in other assemblies and you have to be very careful to avoid 'dll hell'. It is very easy to get message like:</p>

<pre><code>Could not load file or assembly 'SomeAssembly, Version=1.2.9.1, Culture=neutral, PublicKeyToken=ad2d246d2bace800' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.
</code></pre>

<p>Or even exceptions like</p>

<pre><code>Object (of type 'SomeGenerator') is not of type 'SomeGenerator'.
</code></pre>

<p>You either have to write your plug-in code so that it is totally independent (i.e., has no dependencies), or you need to resort to a heap of <code>&lt;bindingRedirect&gt;</code> tags in your web.config.</p>

<p>Also, with one assembly per format, you can end up with a huge proliferation of assemblies. If you have 50 different formats, that would be 50 assemblies.</p>

<h4>New school - The Rosyln approach</h4>

<p>An alternative is to use the compiler-as-a-service features of <a href="http://msdn.microsoft.com/en-gb/vstudio/roslyn.aspx">Roslyn</a>.</p>

<p>Can we upload a modified <em>SomeGenerator.cs</em> and get it to reference the deployed assemblies and thereby avoid dll hell? With Roslyn we can do this.</p>

<p>If the compilation fails, we can immediately inform the user that the file is not compatible. If it succeeds, we can use it in lieu of the version that was originally deployed.</p>

<p>Also, you do <strong>not</strong> need separate assemblies for the plug-ins. Your production code contains, within it somewhere a class named <code>SomeGenerator</code>. At runtime, we are going to create an in-memory assembly which contains only a single class (still named <code>SomeGenerator</code>), but which can nevertheless reference any other class available to the original implementation. Then we will get the dependency injection container to 'replace' the old generator with the new one.</p>

<h2>The plan</h2>

<ul>
<li>Build an ASP.NET MVC 5 web application. It will use an instance of <code>HelloWorldGenerator</code> to generate some output. (This is the <em>original implementation</em>).</li>
<li>Allow a replacement for the <code>HelloWorldGenerator</code> class to be uploaded into the application as raw C# code. (This is the <em>plug-in implementation</em>.)</li>
<li>Store the C# code in a database. If the application is restarted, the plug-in code will be reloaded.</li>
<li>When the output is next requested, compile the new C# class. Any dependencies will be instantiated by the IoC container. If there are any compilation errors, these will be displayed.</li>
<li>Show that the plug-in class is now being used and the output has changed. The originally shipped <code>HelloWorldGenerator</code> class has been replaced by our plug-in.</li>
<li>Delete the plug-in from the table and show the output has reverted to the default (the originally implementation code).</li>
</ul>


<p>Over next few posts I'll guide you through building the application and demonstrate the runtime replacement of the generator class.</p>

<p>See <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2</a> for screen shots of the working application and an overview of the basic project set up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting changes to config files within NuGet packages]]></title>
    <link href="http://ZeroSharp.github.com/persisting-changes-to-config-files-within-nuget-packages/"/>
    <updated>2014-08-13T06:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/persisting-changes-to-config-files-within-nuget-packages</id>
    <content type="html"><![CDATA[<p>Whenever NuGet updates or restores a NuGet package, the config files within it are overwritten. Here's a method to make sure the changes are reapplied via a <a href="http://msdn.microsoft.com/en-us/library/dd465326.aspx">config transform</a> whenever the solution is built.</p>

<p>I'm using the NUnit.Runners NuGet packages. To get our coverage tool to play nicely, I need to replace <code>&lt;supportedRuntime "v2.0.50727"&gt;</code> with <code>&lt;supportedRuntime "v4.0.30319"&gt;</code> within the <em>NUnit-console-x86.exe.config</em>.</p>

<p>Normally, a config transform is for modifying the <em>web.config</em> or <em>app.config</em> files. Here, we need to modify a config file within the <em>packages</em> subdirectory.</p>

<p>In my <em>.csproj</em> file, I have added the following:</p>

<p>```xml
  <PropertyGroup>
   <NUnitRunnerDir>$(SolutionDir)packages\NUnit.Runners.2.6.3\tools&lt;/NUnitRunnerDir>
  <PropertyGroup></p>

<p>  <!-- Default NUnit test runner requires a modification to the config file-->
  &lt;UsingTask</p>

<pre><code>TaskName="TransformXml"
AssemblyFile="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v12.0\Web\Microsoft.Web.Publishing.Tasks.dll" /&gt;
</code></pre>

<p>  <Target Name="AfterBuild" Condition="exists('$(NUnitRunnerDir)NUnit-console-x86.exe.config')"></p>

<pre><code>&lt;TransformXml
    Source="$(NUnitRunnerDir)NUnit-console-x86.exe.config"
    Destination="$(NUnitRunnerDir)NUnit-console-x86.exe.config"
    Transform="$(SolutionDir)UnitTests\Transforms\NUnit-console-x86.exe.CLR4.config" /&gt;
</code></pre>

<p>  </Target>
```</p>

<p>And the transform file itself looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NUnit-console-x86.exe.CLR4.config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'><span class="nt">&lt;configuration</span> <span class="na">xmlns:xdt=</span><span class="s">&quot;http://schemas.microsoft.com/XML-Document-Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;startup&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>supportedRuntime version=&quot;v4.0.30319&quot; xdt:Transform=&quot;Replace&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/startup&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By the way, <a href="https://webconfigtransformationtester.apphb.com/">Web.config Transformation Tester</a> is a handy tool!</p>

<p>Now whenever I build the project, the <em>AfterBuild</em> event ensures the supportedRuntime version is set correctly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A web UI performance tip for XAF web applications]]></title>
    <link href="http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications/"/>
    <updated>2014-03-31T10:16:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to raise your awareness of a toggle which exists in the <a href="http://www.devexpress.com/xaf/">DevExpress XAF framework</a> which can significantly improve UI performance in the web application.</p>

<p><span class='pullquote-right' data-pullquote='In fact the general responsiveness of the entire web-application seems much better.'>
The biggest XAF project I work with has one very complex business object. The layout for this screen includes about 100 properties, several nested tabs, some custom editors, several collection properties and a whole lot of <a href="https://documentation.devexpress.com/#Xaf/CustomDocument3286">Conditional Appearance</a> rules. It was very sluggish to navigate - it was taking several seconds to load the detail view and then it was very slow switching between tabs. Switching to edit mode was also slow.</p>

<p>Last week, I almost accidentally changed the value of <code>DelayedViewItemsInitialization</code> to <code>false</code> and noticed that the UI speed was much much better. In fact the general responsiveness of the entire web-application seems much better.</p>

<p>In order to give it a whirl, navigate to the WebApplication.cs file (normally in the ApplicationCode subfolder of your web project) and modify the constructor as follows:</p>

<p></span></p>

<p>```c#
public MainDemoWebApplication() {</p>

<pre><code>InitializeComponent();
this.DelayedViewItemsInitialization = false;
</code></pre>

<p>}
```</p>

<p>Certainly this is not without consequences, and I would urge a careful reading of the <a href="https://documentation.devexpress.com/#xaf/DevExpressExpressAppXafApplication_DelayedViewItemsInitializationtopic">relevant documentation</a>. To be honest, I still don't really understand why my detail view is so much slower without this change. I have tried to isolate the cause without much success and I will update this post if I find anything new. But if some of your detail views seem overly slow, certainly try it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glimpse with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/glimpse-with-devexpress-xaf/"/>
    <updated>2013-12-17T12:41:00+00:00</updated>
    <id>http://ZeroSharp.github.com/glimpse-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>I have finally got around to getting Glimpse working with XAF. Glimpse is an amazing extensible ASP.NET plug-in which gives you valuable information about what is going on within your server in production. It's also very pretty.</p>

<p>Let's jump right in and have a look at what XAF looks like with Glimpse running.</p>

<p><img src="/images/blog/xaf-with-glimpse-016.png"></p>

<p>That banner along the bottom of the screen is the Glimpse heads up display (HUD). Hovering over various sections of it pops up more information:</p>

<p><img src="/images/blog/xaf-with-glimpse-019.png"></p>

<p><img src="/images/blog/xaf-with-glimpse-018.png"></p>

<p><img src="/images/blog/xaf-with-glimpse-017.png"></p>

<p>If you click on the Glimpse icon in the bottom right, you get even more goodies. Here's the <em>Timeline</em> view.</p>

<p><img src="/images/blog/xaf-with-glimpse-011.png"></p>

<p>And there are many other tabs available. The <em>Configuration</em> tab shows the contents of the <em>web.config</em> file.
<img src="/images/blog/xaf-with-glimpse-009.png">
Here's the <em>Control Tree</em> tab:
<img src="/images/blog/xaf-with-glimpse-010.png">
The <em>Page Life Cycle</em> tab:
<img src="/images/blog/xaf-with-glimpse-005.png">
The <em>Request</em> tab:
<img src="/images/blog/xaf-with-glimpse-004.png">
The <em>Session</em> tab:
<img src="/images/blog/xaf-with-glimpse-003.png">
And the <em>Trace</em> tab including the DevExpress log items that were added to the trace during this page load:
<img src="/images/blog/xaf-with-glimpse-002.png">
As you can see, this is a very valuable glimpse into the server which can be turned on as needed in production.</p>

<h2>Adding Glimpse to an XAF application</h2>

<p>First install the Glimpse Nuget package into the project.</p>

<p><img src="/images/blog/xaf-with-glimpse-001.png"></p>

<p>The Nuget installation will make various incorrect changes to the web.config. The corrected sections are below:</p>

<p>First, add Glimpse to the <code>&lt;configSections&gt;</code>.
```diff web.config
  <configSections></p>

<pre><code>&lt;sectionGroup name="devExpress"&gt;
  &lt;section name="compression" requirePermission="false" type="DevExpress.Web.ASPxClasses.CompressionConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;section name="themes" type="DevExpress.Web.ASPxClasses.ThemesConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;section name="settings" type="DevExpress.Web.ASPxClasses.SettingsConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/sectionGroup&gt;
</code></pre>

<ul>
<li><section name="glimpse" type="Glimpse.Core.Configuration.Section, Glimpse.Core" />
</configSections>
```</li>
</ul>


<p>Next, <code>&lt;system.webserver&gt;</code> should look like this:
```diff
  &lt;system.webServer></p>

<pre><code>&lt;handlers&gt;
  &lt;add name="TestControls.axd_*" path="TestControls.axd" verb="*" type="DevExpress.ExpressApp.Web.TestScripts.TestScriptsManager, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ImageResource.axd_*" path="ImageResource.axd" verb="*" type="DevExpress.ExpressApp.Web.ImageResourceHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="SessionKeepAliveReconnectHttpHandler" verb="*" path="SessionKeepAliveReconnect.aspx*" type="DevExpress.ExpressApp.Web.SessionKeepAliveReconnectHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="WebWindowTemplateHttpHandler" verb="*" path="*.aspx" type="DevExpress.ExpressApp.Web.WebWindowTemplateHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ASPxUploadProgressHandler" verb="GET,POST" path="ASPxUploadProgressHandlerPage.ashx" type="DevExpress.Web.ASPxUploadControl.ASPxUploadProgressHttpHandler, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ReportExportResource.axd_*" preCondition="integratedMode" verb="*" path="ReportExportResource.axd" type="DevExpress.ExpressApp.Reports.Web.ReportExportHttpHandler, DevExpress.ExpressApp.Reports.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
</code></pre>

<ul>
<li>  <add name="Glimpse" path="glimpse.axd" verb="GET" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" preCondition="integratedMode" />
</handlers>
<validation validateIntegratedModeConfiguration="false" />
<modules>
  <add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /></li>
<li>  <add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" preCondition="integratedMode" />
</modules>
&lt;/system.webServer>
```</li>
</ul>


<p>NuGet added some incorrect definitions to <code>system.web</code>. Make sure to restore this section to the DevExpress default:</p>

<p>```xml
  &lt;system.web></p>

<pre><code>&lt;httpRuntime requestValidationMode="2.0" /&gt;
&lt;sessionState mode="InProc" timeout="2" /&gt;
&lt;httpHandlers configSource="HttpHandlers.Web.Config" /&gt;
&lt;httpModules configSource="HttpModules.Web.Config" /&gt;
</code></pre>

<p>```</p>

<p>And now we'll add the corrected changes to <code>HttpHandlers.Web.Config</code> and <code>HttpModule.Web.Config</code></p>

<p><code>diff HttpHandlers.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpHandlers&gt;
+ &lt;add verb="GET" path="glimpse.axd" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" /&gt;
  &lt;add verb="*" path="TestControls.axd" type="DevExpress.ExpressApp.Web.TestScripts.TestScriptsManager, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="ImageResource.axd" type="DevExpress.ExpressApp.Web.ImageResourceHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="SessionKeepAliveReconnect.aspx*" type="DevExpress.ExpressApp.Web.SessionKeepAliveReconnectHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="*.aspx" type="DevExpress.ExpressApp.Web.WebWindowTemplateHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="GET,POST" path="ASPxUploadProgressHandlerPage.ashx" validate="false" type="DevExpress.Web.ASPxUploadControl.ASPxUploadProgressHttpHandler, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="ReportExportResource.axd" type="DevExpress.ExpressApp.Reports.Web.ReportExportHttpHandler, DevExpress.ExpressApp.Reports.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/httpHandlers&gt;
</code></p>

<p><code>xml HttpModules.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpModules&gt;
+ &lt;add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" /&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/httpModules&gt;
</code></p>

<p>Next, there is <a href="https://github.com/Glimpse/Glimpse/issues/632">an outstanding problem</a> with the current release version of the Glimpse ASP.NET NuGet package (1.6.0) which prevents it from working with the development webserver. (Apparently it's fixed in 1.7.0 which should be released soon). If you try to run MainDemo.Web you will get the following error:</p>

<pre><code>Type 'System.Web.HttpContextWrapper' in assembly 'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' is not marked as serializable.
</code></pre>

<p>However it works fine against IIS Express (or full IIS). Go to the MainDemo.Web and change the debug properties as follows:</p>

<p><img src="/images/blog/xaf-with-glimpse-015.png"></p>

<p>Then run the web application. Glimpse is off by default. In order to turn it on, you need to set a cookie, which you can do by navigating to <code>Glimpse.axd</code>. This is the Glimpse configuration screen.</p>

<p><img src="/images/blog/xaf-with-glimpse-014.png"></p>

<h2>Additional Glimpse extensions</h2>

<p>Glimpse is extensible and there are <a href="http://getglimpse.com/Packages">many additional plugins</a> available. Many of these take the form of additional tabs with details about a particular aspect of your application: SQL Queries, Elmah errors, ASP.NET caching, logging, dependency injection, <em>etc.</em></p>

<h2>MainDemo Sample Project</h2>

<p>I have uploaded a modified XAF MainDemo to this <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Glimpse">GitHub repository</a> with all the above changes. (Don't forget to debug against IIS Express).</p>
]]></content>
  </entry>
  
</feed>
