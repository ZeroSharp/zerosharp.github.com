<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: neustar | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/neustar/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-03-04T18:17:32+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 5 - Analysis]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/"/>
    <updated>2013-04-14T07:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis</id>
    <content type="html"><![CDATA[<p>This is the final post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
<li><a href="/load-testing-xaf-part-4-launching-the-load-test/">Part 4: Launching the load test</a></li>
</ul>


<p>In this part, we analyse the results of the load test we ran in <a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 4</a>.</p>

<h2>Results</h2>

<p>The results of the test we ran are <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">here</a>. The graphs are interactive and give quite interesting data about the load tests. Feel free to have a look and play around with the results.</p>

<h2>The Performance Graphs</h2>

<p><img src="/images/blog/load-testing/load-testing-006.png"></p>

<p>The above graph shows the basic information about the test. We can see there were 649 transactions (the Selenium script was run 649 times) and there were 17 errors.</p>

<p>You can see that the test managed to follow the planned scenario (the actual number of users follows the yellow line). You can also see information about the throughput in bytes during the test.</p>

<h2>The Script Performance Graphs</h2>

<p>Here we see information pertaining to the script we chose to run. Had we run multiple different scripts, we would be able to isolate each one.</p>

<p><img src="/images/blog/load-testing/load-testing-009.png"></p>

<p>It is clear that the transaction time rises quite slowly with the load until about 12:17 when there is a jump. More on that later.</p>

<p>First, I have removed the plot of the total transaction time, so that we can see more detail from the remaining steps. Two things seem to be clear: the response time for each individual step does not seem to be much affected by the load, but the login step rises gradually.</p>

<p><img src="/images/blog/load-testing/load-testing-010.png"></p>

<p>Now back to the spike at 12:17, if you look at the transaction data more closely (not shown here but available on the <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">NeuStar results page</a>, it looks like several transactions finished at the same time and that the jump coincides with several simultaneous logins.</p>

<p>So again, it seems that login is the 'weakest link', i.e., the most resource intensive step and the one that suffers the most under load.</p>

<h2>The Errors</h2>

<p>Lets look more closely at the errors.</p>

<p><img src="/images/blog/load-testing/load-testing-007.png"></p>

<p>The first type of error we can see from the screen-shot occurred at the login page. This error happened 6 times and was very similar to another error which occurred once. In fact, all 6 of these errors happened at the very end of the test. As such, they can be ignored, because it is likely that the load test was scaling down and interrupting sessions at this point.</p>

<p><img src="/images/blog/load-testing/load-testing-008.png"></p>

<p>One of the very nice features of NeuStar's load testing solution is that you not only get a screenshot, but also a video which shows you exactly what the user experienced when an error occurs. By clicking on the second error, it looks like there may be a problem  when the system is under load. There were 6 errors and it is clear in the video that the errors occur when attempting to navigate away from the <em>Scheduler Event</em> view to the <em>My Details</em> view. The screen-shot gives us some useful information. DevExpress? Any ideas?</p>

<p><img src="/images/blog/load-testing/load-testing-011.jpg"></p>

<p>There are a couple of other errors, but I think these are most likely a result of problems with the Selenium script rather than XAF. The AJAX update panels make it quite hard to detect when the page is fully ready and although we try to accommodate this with <code>selenium.waitForCondition()</code> my feeling is that the <code>click()</code> occurred before everything was properly wired up.</p>

<h2>Further tests</h2>

<p>This series has covered the process of load testing XAF applications in its entirety, but in some ways, it feels like only the beginning. There are many other configurations and tests which would be interesting.</p>

<p>For instance</p>

<ul>
<li>Reduce think time which is currently set to 3 seconds per step</li>
<li>Use a smaller/larger EC2 instance</li>
<li>Increase the number of virtual users</li>
<li>Try load balancing with sticky sessions</li>
<li>Experiment with/without compression (IIS or via the <code>web.config</code>)</li>
<li>Experiment with/without caching (both at the http level, and via the <a href="http://documentation.devexpress.com/#XPO/CustomDocument9892">cached data store</a></li>
</ul>


<p>There are also many ways of improving XAF performance that are not in the MainDemo. These include:</p>

<ul>
<li><a href="http://documentation.devexpress.com/#wpf/CustomDocument6279">Server mode</a> in all grids</li>
<li><a href="http://community.devexpress.com/blogs/xpo/archive/2006/03/27/session-management-and-caching.aspx">XPO Caching</a></li>
<li>Where possible, move any heavy operations to a separate asynchronous web service call</li>
</ul>


<p>We have implemented all of these in our production application.</p>

<h2>A note about concurrency</h2>

<p>In our experience, people tend to over estimate the number of concurrent users for their application. Our application has probably upwards of 5000 users defined, but we know from our logs that there have never been more than 80 simultaneously logged in. Also, even with 80 concurrent users, they have a much longer 'think time' than 3 seconds on average.</p>

<p>For the production environment, we run at least one 25 user test for every major release and ensure the performance is at least as good as the previous release. We have occasionally run tests with up to 200 simultaneous users. The response time goes down to unacceptable levels (~30 seconds), but the application behaves. In production, the system is load balanced (with sticky sessions) and we know from previous experience that this is sufficient for our application.</p>

<h2>Conclusion</h2>

<p>This concludes my series on load testing. We've managed to get some very useful information with some very low-cost tools. The largest part of effort is the writing of the Selenium script which is certainly tricky. In the future I'd really like to harness the DevExpress EasyTests to replace the script but I haven't yet found a way of doing this. Feel free to use my Selenium script as a starting point for testing your own XAF applications, and let us know of any interesting results!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we'll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select 'Create a new script'. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 2 - Selenium]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/"/>
    <updated>2013-03-28T16:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium</id>
    <content type="html"><![CDATA[<h1>Writing a Selenium User Test against MainDemo</h1>

<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
</ul>


<h2>Why not use DevExpress EasyTests?</h2>

<p>The DevExpress recommended method of writing functional tests is to use the EasyTest functionality of the expressAppFramework. This has several advantages over other functional testing approaches.</p>

<ul>
<li>It uses a domain specific language tailored for XAF making it easy to test views and actions</li>
<li>It makes it easy to interact with the DevExpress controls that are used within XAF</li>
<li>A single EasyTest can be run against both the ASP.NET and WinForms applications</li>
<li>EasyTests work against both the debug webserver and IIS</li>
</ul>


<p>However, one feature which is not (yet) available is the ability to use EasyTests for load testing.</p>

<p><strong>UPDATE</strong>: See my <a href="/load-testing-xaf-bonus-simultaneous-easytests">more recent post</a> on how run multiple simultaneous EasyTests.</p>

<h2>Modifications to the MainDemo</h2>

<p>The sample script I have written assumes the MainDemo is running with <em>Horizontal Navigation</em> rather than vertical. You can modify the script to add support for vertical navigation or you can change Global.asax.cs Application_Start as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e)
</span><span class='line'>{&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'>ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt; // Add the following line to default to horizontal layout&lt;/li&gt;
</span><span class='line'>&lt;li&gt; WebWindowTemplateHttpHandler.PreferredApplicationWindowTemplateType = DevExpress.ExpressApp.Web.Templates.TemplateType.Horizontal;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h2>The Selenium script</h2>

<p>Selenium is a powerful tool for automating browsers. It supports all of the major browsers and a Selenium test can be written in many different programming languages (C#, Java, Javascript, HTML, <em>etc.</em>) The load testing tool (which we will come to in part 3 of this series) uses Selenium scripts written in Javascript.</p>

<p>We will now create and verify a simple Selenium test. The test will open the browser, login to the MainDemo and cycle through all of the tabs before logging out. The script is extremely basic. For a more realistic load test, you want a combination of scripts running, some entering data, some triggering reports, etc.</p>

<p>Create a \scripts subdirectory and populate it with the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">/&lt;em&gt; global test &lt;/em&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Settings for Neustar:</span>
</span><span class='line'><span class="c1">// replace the following with the public address of the application server,</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetHost</span> <span class="o">=</span> <span class="s2">&quot;http://zerosharp-maindemo.elasticbeanstalk.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">virtualShare</span> <span class="o">=</span> <span class="s2">&quot;MainDemo.Web_deploy&quot;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Settings for debug webserver:</span>
</span><span class='line'><span class="c1">// (local script validator doesn&#39;t always work against localhost,</span>
</span><span class='line'><span class="c1">// so we use the excellent localtest.me instead.)</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me:58404&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;&quot;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Settings for the build server or IIS:</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me/&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;MainDemo.Web&quot;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Test parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thinkTimeInSeconds</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// You an optionally set the simulated bandwidth for the script</span>
</span><span class='line'><span class="c1">// (max of 100KB/sec). A value of -1 means do not limit.</span>
</span><span class='line'><span class="c1">// E.g.,</span>
</span><span class='line'><span class="c1">// var bandwidthLimit = 50 * 1024 * 8; // 50KB/sec</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bandwidthLimit</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="nx">test</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selenium</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getSelenium</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Support functions</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">think</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">test</span><span class="p">.</span><span class="nx">isValidation</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="p">.</span><span class="nx">pause</span><span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">waitForCallbacks</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForCondition</span><span class="p">(</span><span class="s2">&quot;(typeof selenium.browserbot.getUserWindow().xafHasPendingCallbacks === &#39;function&#39;) &amp;amp;&amp;amp; (selenium.browserbot.getUserWindow().xafHasPendingCallbacks() === false);&quot;</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">stepLogin</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Login&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">targetHost</span> <span class="o">+</span> <span class="nx">virtualShare</span> <span class="o">+</span> <span class="s2">&quot;/Default.aspx&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviUserName_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviPassword_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;Logon_PopupActions_Menu_DXI0_T&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">stepLogoff</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">expectedSubstring</span><span class="p">;</span>
</span><span class='line'><span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Logoff&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//li[@class=&#39;dxm-item&#39;]/div[@class=&#39;dxm-content dxm-hasText&#39;]//a[@class=&#39;dx dxalink&#39; and text()=&#39;Log Off&#39;]/..&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="nx">expectedSubstring</span> <span class="o">=</span> <span class="s2">&quot;Logout.html&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="nx">maintabCaption</span><span class="p">,</span> <span class="nx">tabCaption</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// viewCaption is optional</span>
</span><span class='line'><span class="nx">viewCaption</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">viewCaption</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">tabCaption</span> <span class="o">:</span> <span class="nx">viewCaption</span><span class="p">;</span>
</span><span class='line'><span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - &quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">isVisible</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selenium</span><span class="p">.</span><span class="nx">assertText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">);</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">initializetest</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">bandwidthLimit</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">setSimulatedBps</span><span class="p">(</span><span class="nx">bandwidthLimit</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">initializetest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">stepLogin</span><span class="p">(</span><span class="s2">&quot;Sam&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//stepNavigateToTab(&quot;Default&quot;, &quot;Contact&quot;);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Task&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Department&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Scheduler Event&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;My Details&quot;</span><span class="p">,</span> <span class="s2">&quot;User - Sam&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Note&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Payment&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Position&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Resume&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Role&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Analysis&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Reports&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">stepLogoff</span><span class="p">();</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">closeBrowser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">endTransaction</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}());</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Neustar</h2>

<p>In a future post we will create multiple test runners in the Amazon cloud using the <a href="https://home.wpm.neustar.biz/">Neustar web performance tool</a> (formerly BrowserMob). Neustar will gather statistics about each scripts reponse times and provide a load test report including details of any test failures.</p>

<p>For now we will verify locally that the Selenium script above works as expected.</p>

<h3>Installing the Neustar local script validator</h3>

<p>In order to verify that our script is supported by the Neustar framework, we need to install their <a href="http://static.wpm.neustar.biz/tools/local-validator.tar.gz">local script validator</a>. Download it and unzip it to a subdirectory of the MainDemo.</p>

<p>There are <a href="http://community.webmetrics.com/community/wpm/blog/2012/10/02/neustar-script-local-validator-user-guide-for-windows">instructions for setting up local script validation here</a>.</p>

<p>To run the script locally call the following:</p>

<pre><code>&gt; script-validator-4.8.81\bin\validator.bat CycleThroughTabs.js -keepbrowseronerror
</code></pre>

<p>I had some problems getting the NeuStar script validator to work in 64-bit Windows 8. The script validator instructions recommend FireFox 12 but I am using version 19. For the record I am using:</p>

<ul>
<li>DevExpress MainDemo 12.2.7</li>
<li>NeuStar localscriptvalidator 4.8.81</li>
<li>Mozilla FireFox 19</li>
<li>Java 7.0.90</li>
</ul>


<p>You need to modify your <code>C:\Users\&lt;Username&gt;\.wpm\config.properties</code> file as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">FF</span><span class="o">=</span><span class="s">C:\Program Files (x86)\Mozilla Firefox\firefox.exe</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also, for some reason, I could not get the local script validator to run against localhost. I kept getting the error:</p>

<p><code>
WARN 03/28 12:38:28 b.n.w.a.s.JavaScrip~ - Got script exception
org.mozilla.javascript.WrappedException: Wrapped biz.neustar.webmetrics.agent.ap
i.HttpErrorException: No valid HTTP Response received while navigating to URL 'h
ttp://localhost:58404/Default.aspx' (CycleThroughTabs.js#50)
</code></p>

<p>The easiest solution was to change the localhost address in the javascript file to the excellent localhost alternative <a href="http://readme.localtest.me/">localtest.me</a>.</p>

<p>Now when I run the script using the local validator with</p>

<pre><code>&gt; validator cyclethroughtabs.js
</code></pre>

<p>I see Firefox startup after a few seconds and the script correctly cycles through all of the tabs and then exits.</p>

<p>We will use this scenario as the basis of a load test in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 1 - Deploying]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/"/>
    <updated>2013-03-22T11:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying</id>
    <content type="html"><![CDATA[<p>This is the first part of a tutorial about load testing XAF applications. See the <a href="/load-testing-xaf-overview/">overview</a> for a bit of background. In this post we set up the target webserver.</p>

<p>You can target any machine which has a publicly available web address, but for this tutorial, I'm' deploying the MainDemo to the Amazon cloud, by following the instructions in <a href="/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> and <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> of my previous series about Amazon Web Services.</p>

<p>I am using version 12.2.7 of the DevExpress XAF MainDemo. There are a couple of extra changes to make to the web.config.</p>

<ul>
<li>Set debug to false <code>&lt;compilation targetFramework="4.0" debug="false"&gt;</code> in the <code>&lt;compilation&gt;</code> section of <code>&lt;system.web&gt;</code></li>
<li>Switch to <em>Release</em> mode before deploying.</li>
</ul>


<p>There are a couple of differences compared to the tutorial:</p>

<ul>
<li>I chose a <em>Medium</em> instance instead of a <em>Micro</em> instance for EC2 (the web server) and deployed it against IIS 8.</li>
<li>For RDS (the database), I stuck with a <em>Micro</em> instance.</li>
</ul>


<p><img src="/images/blog/load-testing/load-testing-001.png"></p>

<p>For the load test, it is also important to disable the automatic health checks performed by the load balancer.</p>

<p><img src="/images/blog/load-testing/load-testing-002.png"></p>

<p>The reason for this is that we are trying to determine the breaking point of our application. If the elastic load balancer detects that a system is struggling, it might automatically flag it as unhealthy and replace it with a newly launched instance. While this behaviour might be desirable for a production system, it doesn't make sense for a load test.</p>

<p>Make sure you can connect to your installation from a web browser before continuing. I chose to deploy to a Windows 2012 instance running IIS 8.0 (which was not available when I wrote my previous XAF AWS tutorial) and I had a little trouble with the URL. If I navigate to the application's base URL (<em>http://zerosharp-maindemo.elasticbeanstalk.com/</em> in my case), then I get forwarding problems after logging in. Instead, I navigate to the full address <em>http://zerosharp-maindemo.elasticbeanstalk.com/MainDemo.Web_deploy/Default.aspx</em> and everything works. I'll try to look into it later, but it's not important for the load testing.</p>
]]></content>
  </entry>
  
</feed>
