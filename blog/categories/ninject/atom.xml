<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ninject | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/ninject/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-11-21T09:47:49+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 4: Roslyn]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4/"/>
    <updated>2014-09-17T08:08:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4</id>
    <content type="html"><![CDATA[<p>This is the fourth and final part of a series about using Roslyn with dependency injection to create a flexible and powerful plug-in framework. Here I review the parts of the solution that deal with the Roslyn runtime compilation of plug-ins. Check out <a href="https://github.com/ZeroSharp/RoslynPlugins">the working example on GitHub</a>.</p>

<p>Previously</p>

<ul>
<li><a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></li>
<li><a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2: The Solution</a></li>
<li><a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/">Part 3: Dependency Injection</a></li>
</ul>


<h2>Roslyn</h2>

<p>Let's look at some of the main classes used to compile plug-in code at runtime.</p>

<p>The <code>PluginSnippetCompiler.Compile()</code> method takes a string (for instance, the contents of an uploaded raw C# file) and converts it into an in-memory assembly with the same assembly references as the main project.</p>

<p>The Roslyn compiler is still in beta, and the Microsoft team have recently removed some syntactic sugar which made the code in the <code>Compile()</code> routine look cleaner. Hopefully they will include something similar soon. The code below works with version 0.7.0.0.</p>

<p>```c#
public class PluginSnippetCompiler
{</p>

<pre><code>public PluginSnippetCompiler(IAssemblyReferenceCollector assemblyReferenceCollector)
{
    if (assemblyReferenceCollector == null)
        throw new ArgumentNullException("assemblyReferenceCollector");

    _AssemblyReferenceCollector = assemblyReferenceCollector;
}

private readonly IAssemblyReferenceCollector _AssemblyReferenceCollector;

private IEnumerable&lt;Diagnostic&gt; _Diagnostics = Enumerable.Empty&lt;Diagnostic&gt;();

public IEnumerable&lt;Diagnostic&gt; Errors
{
    get
    {
        return _Diagnostics
            .Where(d =&gt; d.Severity == DiagnosticSeverity.Error);
    }
}

public IEnumerable&lt;Diagnostic&gt; Warnings
{
    get
    {
        return _Diagnostics
            .Where(d =&gt; d.Severity == DiagnosticSeverity.Warning);
    }
}

private string GetOutputAssemblyName(string name)
{
    return String.Format("RoslynPlugins.Snippets.{0}", name);
}

/// &lt;summary&gt;
/// Compiles source code at runtime into an assembly. The assembly will automatically include all
/// the same assembly references as the main RoslynPlugins assembly, so you can call any function which is
/// available from within the deployed RoslynPlugins. Compilation errors and warnings can be obtained from 
/// the Errors and Warnings properties.
/// &lt;/summary&gt;
/// &lt;param name="name"&gt;The name of the class, e.g., HelloWorldGenerator&lt;/param&gt;
/// &lt;param name="script"&gt;Source code such as the contents of HelloWorldGenerator.cs&lt;/param&gt;
/// &lt;returns&gt;The compiled assembly in memory. If there were errors, it will return null.&lt;/returns&gt;
public Assembly Compile(string name, string script)
{
    if (name == null)
        throw new ArgumentNullException("name");

    if (script == null)
        throw new ArgumentNullException("script");

    string outputAssemblyName = GetOutputAssemblyName(name);

    var defaultImplementationAssembly = typeof(HelloWorldGenerator).Assembly;
    var assemblyReferences = _AssemblyReferenceCollector.CollectMetadataReferences(defaultImplementationAssembly);

    // Parse the script to a SyntaxTree
    var syntaxTree = CSharpSyntaxTree.ParseText(script);

    // Compile the SyntaxTree to an in memory assembly
    var compilation = CSharpCompilation.Create(outputAssemblyName,
        new[] { syntaxTree },
        assemblyReferences,
        new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

    using (var outputStream = new MemoryStream())
    {
        using (var pdbStream = new MemoryStream())
        {
            // Emit assembly to streams. Throw an exception if there are any compilation errors
            var result = compilation.Emit(outputStream, pdbStream: pdbStream);

            // Populate the _diagnostics property in order to read Errors and Warnings
            _Diagnostics = result.Diagnostics;

            if (result.Success)
            {
                return Assembly.Load(outputStream.ToArray(), pdbStream.ToArray());
            }
            else
            {
                return null;
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<p>In this demo, I have not included any user feedback about compilation errors, but they are easily obtainable from the <code>Errors</code> and <code>Warnings</code> properties. At present, if there is an error, the plug-in will be ignored and the original implementation will be used.</p>

<p>The class above depends on an <code>AssemblyReferenceCollector</code> which is responsible for enumerating the references to add to the runtime-generated plug-in assembly. We want exactly the same assembly references as the assembly which contains the original implementation so that we can reference any dependencies within those references.</p>

<p>```c#
public class AssemblyReferenceCollector : IAssemblyReferenceCollector
{</p>

<pre><code>public IEnumerable&lt;MetadataReference&gt; CollectMetadataReferences(Assembly assembly)
{
    var referencedAssemblyNames = assembly.GetReferencedAssemblies();

    var references = new List&lt;MetadataReference&gt;();
    foreach (AssemblyName assemblyName in referencedAssemblyNames)
    {
        var loadedAssembly = Assembly.Load(assemblyName);
        references
            .Add(new MetadataFileReference(loadedAssembly.Location));
    }

    references
        .Add(new MetadataFileReference(assembly.Location)); // add a reference to 'self', i.e., NetMWC

    return references;
}
</code></pre>

<p>}
```</p>

<h4>Connecting the pieces</h4>

<p>We need the <code>PluginLocator</code> class to connect the Ninject resolution root to the runtime-generated assembly (if one exists). It just looks for classes with the correct interface <code>IGenerator</code> within the <code>PluginAssemblyCache</code>.</p>

<p>Here's how it looks:</p>

<p>```c#
public class PluginLocator
{</p>

<pre><code>public PluginLocator(PluginAssemblyCache pluginAssemblyCache)
{
    if (pluginAssemblyCache == null)
        throw new ArgumentNullException("pluginAssemblyCache");

    _PluginAssemblyCache = pluginAssemblyCache;
}

private readonly PluginAssemblyCache _PluginAssemblyCache;

public Type Locate&lt;T&gt;()
{
    return Locate(new[] { typeof(T) });
}

protected Type Locate(IEnumerable&lt;Type&gt; serviceTypes)
{
    var implementingClasses = AssemblyExplorer.GetImplementingClasses(_PluginAssemblyCache.GetAssemblies(), serviceTypes);

    if (implementingClasses.Any())
    {
        if (implementingClasses.Count() &gt; 1)
            throw new Exception("More than one plugin class found which implements " + String.Join(" + ", serviceTypes.Select(t =&gt; t.ToString())));
        else
            return implementingClasses.Single();
    }
    return null;
}
</code></pre>

<p>}
```</p>

<p>The <code>PluginAssemblyCache</code> avoids having to run the <code>Compile()</code> routine more than once by maintaining a dictionary of previously compiled plug-ins. It has the following dependencies:</p>

<ul>
<li>an <code>IPluginSnippetProvider</code> which (in this case) reads the existing snippets from the database (not shown here)</li>
<li>a <code>PluginLoader</code> which uses the above <code>PluginSnippetCompiler</code> to convert a snippet into a runtime assembly.</li>
</ul>


<p>```c#</p>

<pre><code>/// &lt;summary&gt;
/// This class maintains a list of runtime-compiled in memory assemblies loaded from the plugins
/// available via the provider. It is a singleton class.
/// &lt;/summary&gt;
public class PluginAssemblyCache
{
    public PluginAssemblyCache(IPluginSnippetProvider pluginSnippetProvider, PluginLoader pluginLoader)
    {
        if (pluginSnippetProvider == null)
            throw new ArgumentNullException("pluginSnippetProvider");
        _PluginSnippetProvider = pluginSnippetProvider;

        if (pluginLoader == null)
            throw new ArgumentNullException("pluginLoader");
        _PluginLoader = pluginLoader;
    }

    private class CacheEntry
    {
        public string Name { get; set; }
        public Version Version { get; set; }
        public Assembly Assembly { get; set; }
    }

    private readonly IPluginSnippetProvider _PluginSnippetProvider;
    private readonly PluginLoader _PluginLoader;

    private List&lt;CacheEntry&gt; _Cache = new List&lt;CacheEntry&gt;();

    private void Add(string name, string version, Assembly assembly)
    {
        var cacheEntry =
            new CacheEntry()
            {
                Name = name,
                Version = new Version(version),
                Assembly = assembly
            };
        _Cache.Add(cacheEntry);
    }

    private void RefreshCache()
    {
        var pluginScriptContainers = _PluginSnippetProvider.GetPlugins();

        // Add a new assembly for any new or updated plugin
        foreach (var pluginScriptContainer in pluginScriptContainers)
        {
            var name = pluginScriptContainer.Name;
            var version = pluginScriptContainer.Version;
            if (!_Cache.Any(a =&gt; a.Name == name &amp;&amp; a.Version == new Version(version)))
            {
                var assembly = _PluginLoader.Load(pluginScriptContainer);
                Add(name, version, assembly);
            }
        }

        // Remove any assemblies which we no longer have a plugin for.
        _Cache
            .RemoveAll(cacheEntry =&gt;
                !pluginScriptContainers
                    .Select(plugin =&gt; plugin.Name)
                    .Contains(cacheEntry.Name));
    }

    public IEnumerable&lt;Assembly&gt; GetAssemblies()
    {
        RefreshCache();

        // Return only the assemblies with the highest version numbers
        return _Cache
            .GroupBy(d =&gt; d.Name)
            .Select(g =&gt; g
                    .OrderByDescending(d =&gt; d.Version)
                    .First()
                    .Assembly);
    }
}
</code></pre>

<p>```</p>

<p>So whenever the <code>SomeGenerator</code> class is resolved by Ninject, it will now</p>

<ul>
<li>Check whether there are any new plug-ins and compile them into runtime assemblies and add them to the <code>PluginAssemblyCache</code>.</li>
<li>Then the <code>PluginLocator</code> will search these assemblies for a newer version of <code>SomeGenerator</code>.</li>
<li>If it finds one, it will be resolved along with any constructor dependencies, otherwise it will use the original <code>SomeGenerator</code>.</li>
</ul>


<h4>Version numbers</h4>

<p>The version number of the plug-in is a key part of our solution. Let's say you have version 1.0 in production. Then you fix some bugs in staging (version 1.1). You create a plug-in from this staging code and upload it into production. Then much later, you decide to upgrade production to 1.2. Then, with the query in <code>GetAssemblies()</code>, the 1.1 plug-in will automatically be ignored and be superseded by whatever was shipped with 1.2 <em>since that is newer code</em>. So we do not have to remember to remove obsolete plug-ins after an upgrade - they will automatically be ignored because of the version number.</p>

<h4>Security</h4>

<p>Obviously, security is a chief concern and you may have to secure the plug-ins. In this demo project, I just created a simple view for the <code>IPlugin</code> object, but in our production environment we handle the creation of plug-ins differently. We use a combination of role-based security (to control who has permission to upload plugins) and encryption with checksumming. No user can directly enter arbitrary code - instead, we send the user a zip file which contains the code (encrypted), the version number and a checksum and our application verifies the checksum and builds the <code>IPlugin</code> object from the contents of the zip. A Powershell script running on our build server is responsible for creating the checksummed plug-in directly from the source code used in our staging environment.</p>

<h2>Conclusions - the ultimate plug-in framework?</h2>

<p>The strength of the Roslyn approach is that it is easy to maintain while being extremely versatile. In our case, it provides us with the ability to restrict the number of major releases approximately one per annum while catering for the inevitable little fixes to output formats and reports.</p>

<p>In the example we replaced an existing class, but it would be straightforward to add the concept of <em>discovery</em> and use the same Roslyn features to make any <em>new</em> plug-in classes available to your application. Ninject, makes it easy to instantiate, say, every implementor of <code>IGenerator</code>, so you could enumerate all available plug-ins instead of replacing a single one.</p>

<p>So here's a basic plug-in framework which is very flexible and very powerful without many of the versioning headaches of MEF or MAF. It's also easy to maintain, since the plug-in code is identical to the 'normal' code in staging (just packaged, delivered and compiled in a different way to production).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 3: Dependency Injection]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/"/>
    <updated>2014-09-15T08:01:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3</id>
    <content type="html"><![CDATA[<p>This is the third part of a series about using Roslyn with dependency injection to create a flexible and powerful plug-in framework. Here I review the parts of the solution that deal with dependency injection. Check out <a href="https://github.com/ZeroSharp/RoslynPlugins">the working example on GitHub</a>.</p>

<p>Previously</p>

<ul>
<li><a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></li>
<li><a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2: The Solution</a></li>
</ul>


<h2>Dependency injection</h2>

<p>The first trick is to use dependency injection to create any instance of the <code>HelloWorldGenerator</code> class. Then if we need to add a new dependency to the class, we can just add it to the constructor without breaking anything.</p>

<p>```c# HelloWorldGenerator.cs
public class HelloWorldGenerator : IGenerator
{</p>

<pre><code>public HelloWorldGenerator(
    ISomeDependency dependency, 
    IAnotherDependency another, 
    INewDependency new // a new dependency!!!)
{
    ...
}
</code></pre>

<p>```</p>

<p>We'll use Ninject here, but you ought to be able to achieve the same with any dependency injection framework.</p>

<p>So normally, we'd have a binding something like:</p>

<p><code>c#
Bind&lt;IGenerator&gt;().To&lt;HelloWorldGenerator&gt;();
</code></p>

<p>Instead we'll replace this with a binding to a factory method instead.</p>

<p><code>c#
Bind&lt;IGenerator&gt;().ToMethod(context =&gt; CreatePluginInstance(context));
</code></p>

<p>The <code>CreatePluginInstance(context)</code> method will try to find an <code>IGenerator</code> class within any available plug-ins. If it finds one, it will ask the Ninject framework to create an instance of the plug-in class. Otherwise it falls back to the default type (the original implementation of the generator). The <code>PluginLocator</code> it is responsible for searching any runtime-compiled assemblies for candidate plug-ins. We'll look at it in more detail later.</p>

<p>```c#
private IGenerator CreatePluginInstance(IContext context)
{</p>

<pre><code>var pluginLocator = context.Kernel.Get&lt;PluginLocator&gt;();
Type roslynPluginType = pluginLocator.Locate&lt;IGenerator&gt;();

/// if we found a plug-in, create an instance of it
if (roslynPluginType != null)
    return (IGenerator)context.Kernel.Get(roslynPluginType);
else ///otherwise create an instance of the original implementation
    return context.Kernel.Get&lt;HelloWorldGenerator&gt;();
</code></pre>

<p>}
```</p>

<h4>By convention</h4>

<p>Of course, you might have dozens of <code>IGenerator</code> descendants, in which case you can use <a href="https://github.com/ninject/ninject.extensions.conventions">Ninject's convention-based binding module</a>. (Don't forget to add it with NuGet). My version looks something like the following.</p>

<p>```c#
/// If you have a lot of IGenerator subclasses, you can use Ninject's
/// convention based module.
///
///   For each Generator, bind to IGenerator.
///   For example, Bind<IGenerator>.To<SomeGenerator>();
///
Kernel.Bind(scanner => scanner</p>

<pre><code>.FromThisAssembly()
.SelectAllClasses()
.InheritedFrom(typeof(IGenerator))
.BindToPluginOtherwiseDefaultInterfaces()); //This is a custom extension method (see below)
</code></pre>

<p>```</p>

<p>```c#</p>

<pre><code>public static class ConventionSyntaxExtensions
{
    public static IConfigureSyntax BindToPluginOtherwiseDefaultInterfaces(this IJoinFilterWhereExcludeIncludeBindSyntax syntax)
    {
        return syntax.BindWith(new DefaultInterfacesBindingGenerator(new BindableTypeSelector(), new PluginOtherwiseDefaultBindingCreator()));
    }
}

/// &lt;summary&gt;
/// Returns a Ninject binding to a method which returns the plug-in type if one exists, otherwise returns the default type.
/// &lt;/summary&gt;
public class PluginOtherwiseDefaultBindingCreator : IBindingCreator
{
    public IEnumerable&lt;IBindingWhenInNamedWithOrOnSyntax&lt;object&gt;&gt; CreateBindings(IBindingRoot bindingRoot, IEnumerable&lt;Type&gt; serviceTypes, Type implementationType)
    {
        if (bindingRoot == null)
        {
            throw new ArgumentNullException("bindingRoot");
        }

        return !serviceTypes.Any()
         ? Enumerable.Empty&lt;IBindingWhenInNamedWithOrOnSyntax&lt;object&gt;&gt;()
         : new[] { bindingRoot.Bind(serviceTypes.ToArray()).ToMethod(context =&gt; context.Kernel.Get(context.Kernel.Get&lt;PluginLocator&gt;().Locate(serviceTypes) ?? implementationType)) };
    }
}
</code></pre>

<p>```</p>

<p>Next we'll look at <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4/">the Roslyn part</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 2: The Solution]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/"/>
    <updated>2014-09-11T09:18:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2</id>
    <content type="html"><![CDATA[<p>Previously: <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></p>

<h2>The solution</h2>

<p>The code for the example is <a href="https://github.com/ZeroSharp/RoslynPlugins">available on GitHub</a>.</p>

<h4>How it looks</h4>

<p>So here's the Hello World page in production:</p>

<p><img src="/images/blog/roslyn-plugins-001.png">.</p>

<p>We navigate to the plugins view and create a new replacement for the HelloWorldGenerator:</p>

<p><img src="/images/blog/roslyn-plugins-002.png">.</p>

<p>Without restarting, we can return to the HelloWorld page and see that the new class is being used because the output has changed.</p>

<p><img src="/images/blog/roslyn-plugins-003.png">.</p>

<p>If you delete the row from the plugins page, the behaviour reverts to the original implementation (the code that was originally shipped with production).</p>

<h4>Basic project setup</h4>

<p>First, I created a new ASP.NET MVC 5 application. I added a HelloWorldContrroller and a View. I added a <code>Plugin</code> model and corresponding views. To get started I followed the tutorial here (http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started). Once I had the basics in place, I added the following NuGet packages.</p>

<p><strong>Stable</strong></p>

<ul>
<li>EntityFramework</li>
<li>Ninject</li>
<li>Ninject.MVC5</li>
<li>Ninject.Conventions</li>
</ul>


<p><strong>Pre-release</strong></p>

<ul>
<li>Microsoft.CodeAnalysis.CSharp</li>
</ul>


<p>The <em>Microsoft.CodeAnalysis.CSharp</em> is the 'Roslyn' package. It is still in beta, so you have to switch to the pre-release.</p>

<p>Next we'll look at <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/">the dependency injection part</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 1: The Goal]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/"/>
    <updated>2014-09-09T10:47:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1</id>
    <content type="html"><![CDATA[<h2>The goal</h2>

<p><span class='pullquote-right' data-pullquote='How can we replace a given class&#8217;s code with new code at runtime?'>
How can we replace a given class's code with new code at runtime? In particular, how we can we do this while allowing dependency injection and  sidestepping assembly versioning issues.
</span></p>

<p>Let's say you have bunch of classes like this:</p>

<p>```c# SomeGenerator.cs
public class SomeGenerator : IGenerator
{</p>

<pre><code>public SomeGenerator(ISomeDependency dependency, IAnotherDependency another)
{
    ...
}

public void Generate()
{
    ...
    // generate some output
}
</code></pre>

<p>}
```</p>

<p>Now let's assume that you need the ability to modify the behaviour of these classes at runtime without upgrading. And change the dependencies. Without restarting the application.</p>

<h4>Old school - The MEF approach (and most other plug-in frameworks)</h4>

<p>One approach would be to place each generator in a separate assembly and then you could load them at runtime. (This was my first effort - <em>oh how I struggled</em>).</p>

<p>You can make use of something like <a href="http://msdn.microsoft.com/en-us/library/dd460648.aspx">MEF</a> to help with the grunt work, but can still be very complex.</p>

<p>One difficulty is the dependencies. The dependencies are often defined in other assemblies and you have to be very careful to avoid 'dll hell'. It is very easy to get message like:</p>

<pre><code>Could not load file or assembly 'SomeAssembly, Version=1.2.9.1, Culture=neutral, PublicKeyToken=ad2d246d2bace800' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.
</code></pre>

<p>Or even exceptions like</p>

<pre><code>Object (of type 'SomeGenerator') is not of type 'SomeGenerator'.
</code></pre>

<p>You either have to write your plug-in code so that it is totally independent (i.e., has no dependencies), or you need to resort to a heap of <code>&lt;bindingRedirect&gt;</code> tags in your web.config.</p>

<p>Also, with one assembly per format, you can end up with a huge proliferation of assemblies. If you have 50 different formats, that would be 50 assemblies.</p>

<h4>New school - The Rosyln approach</h4>

<p>An alternative is to use the compiler-as-a-service features of <a href="http://msdn.microsoft.com/en-gb/vstudio/roslyn.aspx">Roslyn</a>.</p>

<p>Can we upload a modified <em>SomeGenerator.cs</em> and get it to reference the deployed assemblies and thereby avoid dll hell? With Roslyn we can do this.</p>

<p>If the compilation fails, we can immediately inform the user that the file is not compatible. If it succeeds, we can use it in lieu of the version that was originally deployed.</p>

<p>Also, you do <strong>not</strong> need separate assemblies for the plug-ins. Your production code contains, within it somewhere a class named <code>SomeGenerator</code>. At runtime, we are going to create an in-memory assembly which contains only a single class (still named <code>SomeGenerator</code>), but which can nevertheless reference any other class available to the original implementation. Then we will get the dependency injection container to 'replace' the old generator with the new one.</p>

<h2>The plan</h2>

<ul>
<li>Build an ASP.NET MVC 5 web application. It will use an instance of <code>HelloWorldGenerator</code> to generate some output. (This is the <em>original implementation</em>).</li>
<li>Allow a replacement for the <code>HelloWorldGenerator</code> class to be uploaded into the application as raw C# code. (This is the <em>plug-in implementation</em>.)</li>
<li>Store the C# code in a database. If the application is restarted, the plug-in code will be reloaded.</li>
<li>When the output is next requested, compile the new C# class. Any dependencies will be instantiated by the IoC container. If there are any compilation errors, these will be displayed.</li>
<li>Show that the plug-in class is now being used and the output has changed. The originally shipped <code>HelloWorldGenerator</code> class has been replaced by our plug-in.</li>
<li>Delete the plug-in from the table and show the output has reverted to the default (the originally implementation code).</li>
</ul>


<p>Over next few posts I'll guide you through building the application and demonstrate the runtime replacement of the generator class.</p>

<p>See <a href="/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2</a> for screen shots of the working application and an overview of the basic project set up.</p>
]]></content>
  </entry>
  
</feed>
