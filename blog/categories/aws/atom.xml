<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-09-22T21:17:10+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serverless Framework Part 5: Pulling in a node package]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-5-pulling-in-a-node-package/"/>
    <updated>2016-02-09T11:31:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-5-pulling-in-a-node-package</id>
    <content type="html"><![CDATA[<p>This is the final part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>.</p>

<p>In the previous posts, the <code>PasswordGenerator</code> always returned 'Password'. Instead each date should corresponds to a new unique password. We'll make use of the <a href="https://www.npmjs.com/package/crypto-js">Crypto-js</a> node package and we'll see that the AWS lambda copes just fine.</p>

<h3>Installing a node package</h3>

<p>Pull in the crypto-js package into the serverless component.</p>

<pre><code>$ cd nodejscomponent/
$ npm install crypto-js --save
crypto-js@3.1.6 node_modules/crypto-js
</code></pre>

<p>Now we need the typescript definitions. Watch out there are two different TypeScript typings called <em>cryptojs</em> and <em>crypto-js</em>. The first one is more complete.</p>

<pre><code>$ typings install cryptojs --ambient --save
? Found cryptojs typings for DefinitelyTyped. Continue? Yes
Installing cryptojs@~3.1.2 (DefinitelyTyped)...

cryptojs
└── (No dependencies)
</code></pre>

<p>I'm not sure why, but there's no <code>export</code> in the typings file for <em>cryptojs</em>. Add the following to the bottom of the <em>cryptojs.d.ts</em> file.</p>

<p>{% codeblock lang:javascript nodejscomponent/typings/main/ambient/cryptojs.d.ts %}
  ...
declare module "crypto-js" {</p>

<pre><code>export = CryptoJS;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>Improved PasswordGenerator</h3>

<p>{% codeblock lang:javascript nodejscomponent/src/passwordOfTheDay.ts %}
/// <reference path="../typings/main.d.ts" />
import CryptoJS = require("crypto-js");</p>

<p>export function checkPotd(password : string) : boolean
{</p>

<pre><code>return new PasswordGenerator().check(password);
</code></pre>

<p>}</p>

<p>export class PasswordGenerator
{</p>

<pre><code>generate(date: Date) : string 
{
    // Get the current date as a YYYYMMDD string
    var yyyy = date.getFullYear().toString();
    var mm = (date.getMonth()+1).toString(); // getMonth() is zero-based
    var dd  = date.getDate().toString();
    var plain = `${yyyy}${mm}${dd}`;

    // Using AES CTR with 32 byte key and iv ensures the encrypted string is not too long
    // See http://stackoverflow.com/a/13298019/1077279

    var key = CryptoJS.enc.Hex.parse('108c786594543687891374723e809ec5e475a8361f7ad82df04e91ba2c139321');
    // Use a different initialization vector each time by using the date as part of the vector
    var iv  = CryptoJS.enc.Hex.parse(plain + '3a8fe4440be1e113a271574f379d70a76c3477aaff036d1e83fcd4b9');
    var options = { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv: iv };

    var encrypted = CryptoJS.AES.encrypt(plain, key, options);

    return encrypted.ciphertext.toString();
}   

check(password : string) : boolean 
{
    // check the value matches today's password of the day
    return password == this.generate(new Date());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>Run the tests</h3>

<p>We expect the tests to fail now since we are no longer returning the same password.</p>

<p>```
$ npm test</p>

<blockquote><p>@0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
tsc</p>

<p>@0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
mocha ./lib/test</p></blockquote>

<p>  Generator</p>

<pre><code>#generate
  1) should generate the password
#check
  ✓ should return false when the password is incorrect
#check
  2) should return true when the password is correct
</code></pre>

<p>  1 passing (16ms)
  2 failing</p>

<p>  1) Generator #generate should generate the password:</p>

<pre><code> Error: Expected 'Password' but was bb4bde4d76b055
  at Context.&lt;anonymous&gt; (lib/test/passwordOfTheDayTest.js:12:23)
</code></pre>

<p>  2) Generator #check should return true when the password is correct:</p>

<pre><code> Error: Expected 'true' but was false
  at Context.&lt;anonymous&gt; (lib/test/passwordOfTheDayTest.js:28:23)
</code></pre>

<p>npm ERR! Test failed.  See above for more details.
```</p>

<h3>Update and improve the tests</h3>

<p>It's getting a little more complicated so let's pull in <a href="http://chaijs.com/">chai</a> which is a pretty assertions library.</p>

<p><code>
$ npm install chai --save-dev
chai@3.5.0 node_modules/chai
├── assertion-error@1.0.1
├── type-detect@1.0.0
└── deep-eql@0.1.3 (type-detect@0.1.1)
</code>
And the Typescript definitions for chai.</p>

<p>```
$ typings install chai --save --ambient
? Found chai typings for DefinitelyTyped. Continue? Yes
Installing chai@~3.4.0 (DefinitelyTyped)...</p>

<p>chai
└── (No dependencies)
```</p>

<p>Now let's flesh out the tests for the <code>PasswordGenerator</code> class.</p>

<p>{% codeblock lang:javascript nodejscomponent/src/test/passwordOfTheDayTest.ts %}
/// <reference path="../../typings/main.d.ts" />
import PasswordOfTheDay = require("../passwordOfTheDay");
import Chai = require("chai");</p>

<p>// Tell chai that we'll be using the "should" style assertions.
Chai.should();</p>

<p>describe("Generator", () => {</p>

<pre><code>var subject : PasswordOfTheDay.PasswordGenerator;

beforeEach(function () {
    subject = new PasswordOfTheDay.PasswordGenerator();
});

describe("#generate", () =&gt; {
    it("should generate the password when the date is 24th July 2010", () =&gt; {
        var date : Date = new Date(2010, 6, 24);
        var password : string = subject.generate(date); 

        password.should.equal("92ab1ff89bf9af");           
    });
});

describe("#generate", () =&gt; {
    it("should generate a different password when the date is 25th July 2010", () =&gt; {
        var date : Date = new Date(2010, 6, 25);
        var password : string = subject.generate(date); 

        password.should.equal("26a394b21800f1");           
    });
});  
describe("#check", () =&gt; {
    it("should return false when the password is incorrect", () =&gt; {
        var password : string = "garbage";
        var result : boolean = subject.check(password);

        result.should.be.false;
    });
});

describe("#check", () =&gt; {
    it("should return false when the password is null", () =&gt; {
        var password : string = null;
        var result : boolean = subject.check(password);

        result.should.be.false;
    });
});

describe("#check", () =&gt; {
    it("should return true when the password is correct", () =&gt; {
        var password : string = subject.generate(new Date());
        var result : boolean = subject.check(password);

        result.should.be.true;
    });
});
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>Run our tests:</p>

<p>```
$ npm test</p>

<blockquote><p>@0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
tsc</p>

<p>@0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
mocha ./lib/test</p></blockquote>

<p>  Generator</p>

<pre><code>#generate
  ✓ should generate the password when the date is 24th July 2010
#generate
  ✓ should generate a different password when the date is 25th July 2010
#check
  ✓ should return false when the password is incorrect
#check
  ✓ should return false when the password is null
#check
  ✓ should return true when the password is correct
</code></pre>

<p>  5 passing (20ms)
```</p>

<h3>Deploy</h3>

<pre><code>$ serverless dash deploy
</code></pre>

<p>Now when we visit the endpoint with the correct password for today's date which happens to be <em>89366e6199f3</em>.</p>

<pre><code>https://...amazonaws.com/dev/potd/check?password=89366e6199f3
</code></pre>

<p>```json
{</p>

<pre><code>message: true
</code></pre>

<p>}
```</p>

<p>Mission accomplished! Notice that using a node package did not require any special steps on the AWS side. In fact we have not had to login to AWS since the very beginning when we created an IAM user for the project. And yet we've managed to build and deploy a cheap and scalable cloud-based service.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>

<p>That wraps up my series on building a small, but real-world Serverless application. In a future post, I'd like to look at providing a secured 'generate' service to allow authorized users to get today's password. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 4: Connecting the parts]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts/"/>
    <updated>2016-02-01T09:44:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>: <a href="/serverless-framework-part-1-up-and-running/">Part 1</a>, <a href="/serverless-framework-part-2-typescript-and-mocha/">part 2</a>, <a href="/serverless-framework-part-3-the-guts/">part 3</a>.</p>

<h2>New version 0.3.1</h2>

<p>{% highlight Edit: since the original version of this post, a new version 0.3.1 of Serverless was released. I have updated the tutorial below to reflect the newer version. Also, <a href="https://github.com/DefinitelyTyped/tsd/issues/269">TSD has been deprecated</a> in favour of <a href="https://www.npmjs.com/package/typings">Typings</a> so I've updated to use Typings instead. %}
All parts have been updated for the latest version of the framework 0.3.1.</p>

<h2>The Password of the Day Generator class</h2>

<p>First up we need a class to generate and check the password of the day. For the moment, let's pretend the password of the day is always the string <em>"Password"</em>. Put the following typescript class in <em>nodejscomponent/src</em>.</p>

<p>{% codeblock lang:javascript nodejscomponent/src/passwordOfTheDay.ts %}
export function checkPotd(password : string) : boolean
{</p>

<pre><code>return new PasswordGenerator().check(password);
</code></pre>

<p>}</p>

<p>export class PasswordGenerator
{</p>

<pre><code>generate(date: Date) : string 
{
    // generate today's password
    return "Password"; 
}   

check(password : string) : boolean 
{
    // check the value matches today's password of the day
    return password == this.generate(new Date());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Now add a mocha test for it.</p>

<p>{% codeblock lang:javascript nodejscomponent/src/test/passwordOfTheDayTest.ts %}
/// <reference path="../../typings/main.d.ts" />
import PasswordOfTheDay = require("../passwordOfTheDay");</p>

<p>describe("Generator", () => {</p>

<pre><code>var subject : PasswordOfTheDay.PasswordGenerator;

beforeEach(function () {
    subject = new PasswordOfTheDay.PasswordGenerator();
});

describe("#generate", () =&gt; {
    it("should generate the password", () =&gt; {
        var result : string = subject.generate(new Date(2010, 6, 24));
        if (result !== "Password") {
            throw new Error("Expected 'Password' but was " + result);
        }
    });
});

describe("#check", () =&gt; {
    it("should return false when the password is incorrect", () =&gt; {
        var result : boolean = subject.check("garbage");
        if (result !== false) {
            throw new Error("Expected 'false' but was " + result);
        }
    });
});

describe("#check", () =&gt; {
    it("should return true when the password is correct", () =&gt; {
        var result : boolean = subject.check("Password");
        if (result !== true) {
            throw new Error("Expected 'true' but was " + result);
        }
    });
});
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>Now compile everything.</p>

<pre><code>$ cd nodejscomponent
$ tsc
</code></pre>

<p>You will now find that there is a corresponding javascript file in the <em>lib</em> folder</p>

<p>{% codeblock lang:javascript nodejscomponent/src/passwordOfTheDay.js %}
function checkPotd(password) {</p>

<pre><code>return new PasswordGenerator().check(password);
</code></pre>

<p>}
exports.checkPotd = checkPotd;
var PasswordGenerator = (function () {</p>

<pre><code>function PasswordGenerator() {
}
PasswordGenerator.prototype.generate = function (date) {
    // generate today's password
    return "Password";
};
PasswordGenerator.prototype.check = function (password) {
    // check the value matches today's password of the day
    return password == this.generate(new Date());
};
return PasswordGenerator;
</code></pre>

<p>})();
exports.PasswordGenerator = PasswordGenerator;
{% endcodeblock %}</p>

<p>And likewise for the mocha test in <em>lib/test</em>. Now to run those tests:</p>

<pre><code>$ npm test

&gt; @0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; tsc

&gt; @0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; mocha ./lib/test

Generator
    #generate
    ✓ should generate the password
    #check
    ✓ should return false when the password is incorrect
    #check
    ✓ should return true when the password is correct

3 passing (10ms)
</code></pre>

<p>Nice. Next, modify the main entry point of the component <em>index.js</em>.</p>

<p>{% codeblock lang:javascript nodejscomponent/lib/index.js %}
// Dependencies
var PasswordOfTheDay = require('./passwordOfTheDay');</p>

<p>module.exports.respond = function(event, cb) {</p>

<p>  var result = PasswordOfTheDay.checkPotd(event.password);<br/>
  var response = {</p>

<pre><code>message: result
</code></pre>

<p>  };</p>

<p>  return cb(null, response);
};
{% endcodeblock %}</p>

<p>Notice how we make use of <code>event.password</code> which is the parameter we configured in <a href="/serverless-framework-part-3-the-guts/">part 3</a> in the <code>s_function.json</code> file.</p>

<p>Let's deploy!</p>

<pre><code>$ serverless dash deploy
_______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.3.1
`-------'

Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.
Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.
Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.


Serverless: Select the assets you wish to deploy:
    nodejscomponent - potd - check
    function - nodejscomponent/potd/check
    endpoint - nodejscomponent/potd/check@potd/check~GET
    - - - - -
&gt; Deploy

Serverless: Deploying functions in "dev" to the following regions: eu-west-1  
Serverless: ------------------------  
Serverless: Successfully deployed functions in "dev" to the following regions:   
Serverless: eu-west-1 ------------------------  
Serverless:   nodejscomponent/potd/check: arn:aws:lambda:eu-west-1:962613113552:function:serverlessPotd-nodejscomponent-potd-check:dev  
</code></pre>

<p>And lets visit that URI</p>

<pre><code>https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check?password=nonsense
</code></pre>

<p>```json  <br/>
{</p>

<pre><code>message: false
</code></pre>

<p>}
```</p>

<pre><code>https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check?password=Password
</code></pre>

<p>```json  <br/>
{</p>

<pre><code>message: true
</code></pre>

<p>}
```</p>

<p>Rock and roll. A working password checker running on Lambda in the Amazon cloud.</p>

<p>Next up - we'll extend the <code>PasswordGenerator</code> class to pull in a node package and generate a better password.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code so far</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 3: The guts of a serverless service]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-3-the-guts/"/>
    <updated>2016-01-29T17:44:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-3-the-guts</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>. For those following along, <a href="/serverless-framework-part-1-up-and-running/">part 1</a> and <a href="/serverless-framework-part-2-typescript-and-mocha/">part 2</a> have been updated for the current latest version of Serverless 0.3.1.</p>

<p>In this post, we'll discuss how a Serverless function actually works.</p>

<h2>The guts of a serverless function</h2>

<p>When we visited the deployed endpoint at the end of <a href="/serverless-framework-part-1-up-and-running/">part 1</a>, it correctly returned some JSON content.</p>

<p>```json
{</p>

<pre><code>message: "Your Serverless function ran successfully!"
</code></pre>

<p>}
```</p>

<p>Where does this message come from? Look at <em>index.js</em> in the component's <em>lib</em> folder.</p>

<p>{% codeblock lang:javascript nodejscomponent/lib/index.js %}
/<em>*
 * Lib
 </em>/</p>

<p>module.exports.respond = function(event, cb) {</p>

<p>  var response = {</p>

<pre><code>message: "Your Serverless function ran successfully!"
</code></pre>

<p>  };</p>

<p>  return cb(null, response);
};
{% endcodeblock %}</p>

<p>And it's the <em>handler.js</em> file in the function's subfolder which calls it.</p>

<p>{% codeblock lang:javascript nodejscomponent/potd/check/handler.js %}
'use strict';</p>

<p>/<em>*
 * Serverless Module: Lambda Handler
 * - Your lambda functions should be a thin wrapper around your own separate
 * modules, to keep your code testable, reusable and AWS independent
 * - 'serverless-helpers-js' module is required for Serverless ENV var support.  Hopefully, AWS will add ENV support to Lambda soon :)
 </em>/</p>

<p>// Require Serverless ENV vars
var ServerlessHelpers = require('serverless-helpers-js').loadEnv();</p>

<p>// Require Logic
var lib = require('../../lib');</p>

<p>// Lambda Handler
module.exports.handler = function(event, context) {</p>

<p>  lib.respond(event, function(error, response) {</p>

<pre><code>return context.done(error, response);
</code></pre>

<p>  });
};
{% endcodeblock %}</p>

<p>In our case we're coding a password checking function. The URI will look something like this:</p>

<pre><code>http://something.amazonaws.com/development/potd/check?password=P455w0rd
</code></pre>

<p>We'll modify <em>lib/index.js</em> to retrieve the value from the query parameter <code>password</code> and return <code>true</code> if the password is correct and <code>false</code> otherwise. But first we need to set up the parameter.</p>

<h2>Configuring the function parameter</h2>

<p>In each function's directory, there is a file named <em>s-function.json</em> which allows you to specify the details of the function call. Add a section to the <code>requestTemplates</code> as follows:</p>

<p>{% codeblock lang:json nodejscomponent/potd/check/s-function.js %}
{
  "name": "check",
  "handler": "potd/check/handler.handler",
  "timeout": 6,
  "memorySize": 1024,
  "custom": {</p>

<pre><code>"excludePatterns": [],
"envVars": []
</code></pre>

<p>  },
  "endpoints": [</p>

<pre><code>{
  "path": "potd/check",
  "method": "GET",
  "authorizationType": "none",
  "apiKeyRequired": false,
  "requestParameters": {},
  "requestTemplates": {
</code></pre>

<ul>
<li><pre><code>"application/json": {
</code></pre></li>
<li><pre><code>    "password": "$input.params('password')"
</code></pre></li>
<li><pre><code>}
</code></pre>

  },
  "responses": {

<pre><code>"400": {
  "statusCode": "400"
},
"default": {
  "statusCode": "200",
  "responseParameters": {},
  "responseModels": {},
  "responseTemplates": {
    "application/json": ""
  }
}
</code></pre>

<p>  }
}
]
}
{% endcodeblock %}</p></li>
</ul>


<p>Note that the <em>s-function.json</em> file is also where you can configure if the service accepts <code>POST</code> or <code>PUT</code> or <code>DELETE</code> requests. Here we are only interested in <code>GET</code>.</p>

<p>You can easily tailor the <code>requestTemplates</code> in this file to extract whatever parameters you need in your lambda function.</p>

<h2>Retrieving the parameter value</h2>

<p>Now back in <em>index.js</em> you will find that the function's <code>event</code> parameter has a property <code>password</code> which is set to the value of the querystring parameter.</p>

<p>{% codeblock lang:javascript nodejscomponent/lib/index.js %}
module.exports.respond = function(event, cb) {</p>

<p>  var parameterValue = event.password; // the querystring parameter
  var response = {</p>

<pre><code>message: parameterValue
</code></pre>

<p>  };</p>

<p>  return cb(null, response);
};
{% endcodeblock %}</p>

<p>Redeploy.</p>

<pre><code> $ serverless dash deploy
</code></pre>

<p>Visit the URI.</p>

<pre><code>http://something.amazonaws.com/development/potd/check?password=P455w0rd
</code></pre>

<p>The response is:</p>

<p>```json
{</p>

<pre><code>message: "P455w0rd"
</code></pre>

<p>}
```</p>

<h2>Ready for implementation</h2>

<p>We now have all the pieces we need. Serverless, Typescript, Mocha and AWS. In the next post I'll show how to wire up everything get it working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 2: TypeScript and Mocha]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha/"/>
    <updated>2016-01-12T08:08:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Happy New Year everyone!</p>

<p>This is the second part of a series about the <a href="https://github.com/serverless/serverless">Serverless</a> framework. Read <a href="/serverless-framework-part-1-up-and-running/">the first part</a> to get up and running.</p>

<p>First I'll describe the webservice I'm building. Then we'll configure our environment for Typescript and Mocha testing.</p>

<h2>Poor man's dual factor authentication via a password of the day</h2>

<p>{% pullquote %}
I'm the technical lead for an enterprise application which is in use by about 100 large multinational corporates. As part of the installation process, we ask for a registration code which is based on the date. The customer has to call us to get the password of the day. This gives us an opportunity to engage with the customer and also gives us little more control. It's a simple form of dual factor authorization where one of the factors requires a phone call.</p>

<p>In the old days, the routine for checking the validity of the password was part of the source code, but we've since moved the checking function to a web service.</p>

<p>It's my goal to replace this 'password of the day' check function with a Serverless module. The service will take a password as input and check that it matches the password of the day.</p>

<p>It's a tiny, simple, rarely-used web service but AWS lambda is still a great fit for it. Although lambda can scale if necessary, in this case {"it's about not having the hassle of administering a server."}
{% endpullquote %}</p>

<h2>Mocha and TypeScript</h2>

<h2>New version 0.3.1</h2>

<p>{% highlight Edit: since the original version of this post, a new version 0.3.1 of Serverless was released. I have updated the tutorial below to reflect the newer version. Also, <a href="https://github.com/DefinitelyTyped/tsd/issues/269">TSD has been deprecated</a> in favour of <a href="https://www.npmjs.com/package/typings">Typings</a> so I've updated to use Typings instead. %}</p>

<p>Let's do things properly and set up a testing framework.</p>

<p>Make sure you're in the component folder.</p>

<pre><code>$ cd nodejscomponent
</code></pre>

<p>Then we'll install Mocha.</p>

<pre><code>$ npm install mocha --save-dev
mocha@2.4.5 node_modules/mocha
├── escape-string-regexp@1.0.2
├── commander@2.3.0
├── diff@1.4.0
├── supports-color@1.2.0
├── growl@1.8.1
├── debug@2.2.0 (ms@0.7.1)
├── mkdirp@0.5.1 (minimist@0.0.8)
├── jade@0.26.3 (commander@0.6.1, mkdirp@0.3.0)
└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)
</code></pre>

<p>Next we'll install TypeScript. Of course you can use plain javascript if you prefer. My background is C#: I make fewer dumb mistakes with TypeScript. It looks like there <a href="https://github.com/serverless/serverless/issues/371">is a typescript plugin in the pipeline</a> which will make typescript integration even easier in the future, but for now:</p>

<pre><code>$ npm install typescript --save
typescript@1.7.5 node_modules/typescript

$ npm install typings -g
/usr/local/bin/typings -&gt; /usr/local/lib/node_modules/typings/dist/bin/typings.js
typings@0.6.6 /usr/local/lib/node_modules/typings
├── array-uniq@1.0.2
├── elegant-spinner@1.0.1
├── thenify@3.2.0
├── popsicle-status@1.0.1
... etc ...
</code></pre>

<p>Initialise typings.</p>

<pre><code>$ typings init
-&gt; written typings.json
</code></pre>

<p>Now we add the type definitions for Mocha.</p>

<pre><code>$ typings install mocha --ambient --save
? Found mocha typings for DefinitelyTyped. Continue? Yes
Installing mocha@~2.2.5 (DefinitelyTyped)...

mocha
└── (No dependencies)
</code></pre>

<p>We need a config file for the TypeScript compiler. This goes in the same module directory (<em>back/modules/potd</em> in my case).</p>

<p>{% codeblock lang:json tsconfig.json %}
{</p>

<pre><code>"compilerOptions": {
    "module": "commonjs",
    "target": "es5",
    "noImplicitAny": true,
    "sourceMap": false,
    "declaration": false,
    "outDir": "lib"
},
"exclude": [
    "node_modules",
    "typings/browser",
    "typings/browser.d.ts"    
]
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Now make a subdirectory for our TypeScript source files.</p>

<pre><code>$ mkdir src
$ mkdir src/test
</code></pre>

<p>Next up we need to modify the package.json file to add a scripts section. Only the <code>"scripts"</code> section needs changing.</p>

<p>{% codeblock lang:json package.json %}
{
  "name": "potd",
  "version": "0.0.1",
  "description": "Dependencies for a Password of the day Serverless Module",
  "author": "Robert Anderson",
  "license": "MIT",
  "private": true,
  "repository": {</p>

<pre><code>"type": "git",
"url": "git://github.com/"
</code></pre>

<p>  },
  "keywords": [],
  "devDependencies": {</p>

<pre><code>"mocha": "^2.3.4"
</code></pre>

<p>  },
  "dependencies": {</p>

<pre><code>"serverless-helpers-js": "~0.0.3",
"typescript": "^1.7.5"
</code></pre>

<p>  },
  "scripts": {</p>

<pre><code>"prepublish": "tsc",
"pretest": "tsc",
"test": "mocha ./lib/test"
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>We've finished setting up everything for TypeScript and Mocha. Whenever you run <code>tsc</code>, any TypeScript files in <em>/src</em> will get compiled to javascript in <em>/lib</em>. And running <code>npm test</code> will compile and then run any Mocha tests in <em>/lib/test</em>.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code so far</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>

<p>In the next post we'll create a TypeScript class for the guts of the lambda function which checks the password of the day, along with some corresponding Mocha tests, also written in TypeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 1: Up and running]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/"/>
    <updated>2015-12-22T20:26:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running</id>
    <content type="html"><![CDATA[<h2>New version 0.3.1</h2>

<p>{% highlight Edit: since the original version of this post, a new version 0.3.1 of Serverless was released. I have updated the tutorial below to reflect the newer version. %}</p>

<p>I was in the middle of a blog post about the JAWS framework and before I had finished it changed its name to <a href="https://github.com/serverless/serverless">the Serverless framework</a>. It is a very clever way to build apps without worrying about provisioning server or whether it will scale. This is because it uses Amazon Web Services and in particular the Amazon lambda compute service. It's currently in beta.</p>

<p>Follow <a href="http://docs.serverless.com/docs/configuring-aws">the instructions</a> for setting up an administrative IAM user for use with the framework.</p>

<p>Make sure you have node and npm installed. You need node 4.0 or greater.</p>

<pre><code>$ node -v
v4.2.3
$ npm -v
2.14.7
</code></pre>

<p>Install the Serverless framework.</p>

<pre><code>$ npm install serverless -g 
</code></pre>

<p>Create a new project</p>

<pre><code>$ serverless project create
</code></pre>

<p>```</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.3.1
`-------'</p>

<p>Serverless: Initializing Serverless Project...<br/>
Serverless: Enter a name for this project:  (serverless-vyedql) serverlessPotd
Serverless: Enter a universally unique project bucket name:  (serverless-vyedql-4jboce.com) potd-zerosharp.com
Serverless: Enter an email to use for AWS alarms:  (me@serverless-vyedql.com) potd@nosredna.com
Serverless: Select a region for your project:</p>

<pre><code>us-east-1
us-west-2
</code></pre>

<blockquote><p>eu-west-1</p>

<pre><code>ap-northeast-1
</code></pre>

<p>Serverless: Select an AWS profile for your project:
default
Serverless: Creating stage "dev"...<br/>
Serverless: Creating region "eu-west-1" in stage "dev"...<br/>
Serverless: Creating your project bucket on S3: serverless.eu-west-1.potd-zerosharp.com...<br/>
Serverless: Deploying resources to stage "dev" in region "eu-west-1" via Cloudformation (~3 minutes)...<br/>
Serverless: Successfully deployed "dev" resources to "eu-west-1"<br/>
Serverless: Successfully created region "eu-west-1" within stage "dev"<br/>
Serverless: Successfully created stage "dev"<br/>
Serverless: Successfully initialized project "serverlessPotd"<br/>
```</p></blockquote>

<p>It takes about 3 minutes to setup the necessary CloudFormation stack for your project. Change directory to the newly created project.</p>

<pre><code>$ cd serverlessPotd
</code></pre>

<p>Create a new component.</p>

<pre><code>$ serverless component create
</code></pre>

<p><code>
Serverless: Enter a name for your new component:  (nodejscomponent)
Serverless: Enter a name for your component's first module:  (resource) potd
Serverless: Enter a name for your module's first function:  (show) check
Serverless: Successfully created function: "check"  
Serverless: Successfully created new serverless module "potd" inside the component "nodejscomponent"  
Serverless: Installing "serverless-helpers" for this component via NPM...  
Serverless: -----------------  
serverless-helpers-js@0.0.3 node_modules/serverless-helpers-js
└── dotenv@1.2.0
Serverless: -----------------  
Serverless: Successfully created new serverless component: nodejscomponent  
</code></p>

<p>This has created the javascript code for a basic lambda function which we can immediately deploy.</p>

<pre><code>$ serverless dash deploy
</code></pre>

<p>At the prompt select both the function and the endpoint and then select <em>Deploy</em>.</p>

<p>```</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.3.1
`-------'</p>

<p>Use the <up>, <down>, <pageup>, <pagedown>, <home>, and <end> keys to navigate.
Press <enter> to select/deselect, or <space> to select/deselect and move down.
Press <ctrl> + <enter> to immediately deploy selected.</p>

<p>Serverless: Select the assets you wish to deploy:</p>

<pre><code>nodejscomponent - potd - check
  function - nodejscomponent/potd/check
  endpoint - nodejscomponent/potd/check@potd/check~GET
- - - - -
</code></pre>

<blockquote><p>Deploy</p></blockquote>

<p>Serverless: Deploying functions in "dev" to the following regions: eu-west-1<br/>
Serverless: ------------------------<br/>
Serverless: Successfully deployed functions in "dev" to the following regions: <br/>
Serverless: eu-west-1 ------------------------<br/>
Serverless:   nodejscomponent/potd/check: arn:aws:lambda:eu-west-1:962613113552:function:serverlessPotd-nodejscomponent-potd-check:dev</p>

<p>Serverless: Deploying endpoints in "dev" to the following regions: eu-west-1<br/>
Serverless: Successfully deployed endpoints in "dev" to the following regions:<br/>
Serverless: eu-west-1 ------------------------<br/>
Serverless:   GET - potd/check - https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/dev/potd/check<br/>
```</p>

<p>Now open a browser and navigate to the URL in the last line. You should see the following JSON response.</p>

<p>```json
{</p>

<pre><code>message: "Your Serverless function ran successfully!"
</code></pre>

<p>}
```</p>

<p>Now that's already fantastic. With a handful of commands we have deployed an arbitrary javascript function to a URL endpoint very cheaply and with automatic scaling. We never had to consider instance size or memory or operating system.</p>

<p>And it's extremely extensible too - thanks to the other AWS services, we can easily make it secure (with Amazon Cognito) kick off emails (SES), store files (S3), add persistence (DynamoDB), etc.</p>

<p>In the next post, I'll be applying it to a real life scenario to replace an existing web service.</p>
]]></content>
  </entry>
  
</feed>
