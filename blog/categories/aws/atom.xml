<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-01-12T09:54:09+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 2: TypeScript and Mocha]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha/"/>
    <updated>2016-01-12T08:08:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Happy New Year everyone!</p>

<p>This is the second part of a series about the <a href="https://github.com/serverless/serverless">Serverless</a> framework. Read <a href="/serverless-framework-part-1-up-and-running/">the first part</a> to get up and running.</p>

<p>First I'll describe the webservice I'm building. Then we'll configure our environment for Typescript and Mocha testing.</p>

<h2>Poor man's dual factor authentication via a password of the day</h2>

<p><span class='pullquote-right' data-pullquote='it&#8217;s about not having the hassle of administering a server.'>
I'm the technical lead for an enterprise application which is in use by about 100 large multinational corporates. As part of the installation process, we ask for a registration code which is based on the date. The customer has to call us to get the password of the day. This gives us an opportunity to engage with the customer and also gives us little more control. It's a simple form of dual factor authorization where one of the factors requires a phone call.</p>

<p>In the old days, the routine for checking the validity of the password was part of the source code, but we've since moved the checking function to a web service.</p>

<p>It's my goal to replace this 'password of the day' check function with a Serverless module. The service will take a password as input and check that it matches the password of the day.</p>

<p>It's a tiny, simple, rarely-used web service but AWS lambda is still a great fit for it. Although lambda can scale if necessary, in this case it's about not having the hassle of administering a server.
</span></p>

<h2>Mocha and TypeScript</h2>

<p>Let's do things properly and set up a testing framework.</p>

<p>Make sure you're in the module folder.</p>

<pre><code>$ cd back/modules/potd
</code></pre>

<p>Then we'll install Mocha.</p>

<pre><code>$ npm install mocha --save-dev
mocha@2.3.4 node_modules/mocha
├── escape-string-regexp@1.0.2
├── diff@1.4.0
├── commander@2.3.0
├── supports-color@1.2.0
├── growl@1.8.1
├── debug@2.2.0 (ms@0.7.1)
├── jade@0.26.3 (commander@0.6.1, mkdirp@0.3.0)
├── mkdirp@0.5.0 (minimist@0.0.8)
└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)
</code></pre>

<p>Next we'll install TypeScript. Of course you can use plain javascript if you prefer. My background is C#: I make fewer dumb mistakes with TypeScript. It looks like there <a href="https://github.com/serverless/serverless/issues/371">is a typescript plugin in the pipeline</a> which will make typescript integration even easier in the future, but for now:</p>

<pre><code>$ npm install typescript --save
typescript@1.7.5 node_modules/typescript

$ npm install tsd -g
npm WARN engine joi-assert@0.0.3: wanted: {"node":"&gt;= 0.10.0 &lt;= 0.11.0"} (current: {"node":"4.2.3","npm":"2.14.7"})
/usr/local/bin/tsd -&gt; /usr/local/lib/node_modules/tsd/build/cli.js
tsd@0.6.5 /usr/local/lib/node_modules/tsd
├── diff@1.4.0
├── assertion-error@1.0.0
├── type-detect@0.1.2
... etc ...

$ tsd init
-&gt; written tsd.json
-&gt; written typings/tsd.d.ts
</code></pre>

<p>Now we add the type definitions for Mocha.</p>

<pre><code>$ tsd install mocha --save
- mocha / mocha    
&gt;&gt; running install..
&gt;&gt; written 1 file:
    - mocha/mocha.d.ts
</code></pre>

<p>We need a config file for the TypeScript compiler. This goes in the same module directory (<em>back/modules/potd</em> in my case).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tsconfig.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;compilerOptions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;module&quot;</span><span class="p">:</span> <span class="s2">&quot;commonjs&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;target&quot;</span><span class="p">:</span> <span class="s2">&quot;es5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;noImplicitAny&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;sourceMap&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;declaration&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;outdir&quot;</span><span class="p">:</span> <span class="s2">&quot;lib&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nt">&quot;exclude&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;node_modules&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now make a subdirectory for our TypeScript source files.</p>

<pre><code>$ mkdir src
$ mkdir src/test
</code></pre>

<p>Next up we need to modify the package.json file to add a scripts section. Only the <code>"scripts"</code> section needs changing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tsconfig.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;potd&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Dependencies for a Password of the day Serverless Module&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Robert Anderson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git://github.com/&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3.4&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;serverless-helpers-js&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.0.3&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;typescript&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.7.5&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;prepublish&quot;</span><span class="p">:</span> <span class="s2">&quot;tsc&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;pretest&quot;</span><span class="p">:</span> <span class="s2">&quot;tsc&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;mocha ./lib/test&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We've finished setting up everything for TypeScript and Mocha. Whenever you run <code>tsc</code>, any TypeScript files in <em>/src</em> will get compiled to javascript in <em>/lib</em>. And running <code>npm test</code> will compile and then run any Mocha tests in <em>/lib/test</em>.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code so far</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>

<p>In the next post we'll create a TypeScript class for the guts of the lambda function which checks the password of the day, along with some corresponding Mocha tests, also written in TypeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 1: Up and running]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/"/>
    <updated>2015-12-22T20:26:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running</id>
    <content type="html"><![CDATA[<p>I was in the middle of a blog post about the JAWS framework and before I had finished it changed its name to <a href="https://github.com/serverless/serverless">the Serverless framework</a>. It is a very clever way to build apps without worrying about provisioning server or whether it will scale. This is because it uses Amazon Web Services and in particular the Amazon lambda compute service. It's currently in beta.</p>

<p>Follow <a href="http://docs.serverless.com/docs/configuring-aws">the instructions</a> for setting up an administrative IAM user for use with the framework.</p>

<p>Make sure you have node and npm installed. You need node 4.0 or greater.</p>

<pre><code>$ node -v
v4.2.3
$ npm -v
2.14.7
</code></pre>

<p>Install the Serverless framework.</p>

<pre><code>$ npm install serverless -g 
</code></pre>

<p>Create a new project</p>

<pre><code>$ serverless project create
</code></pre>

<p>```</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                         serverless.com, v.0.0.15
`-------'
Serverless: Enter a project name:  (serverlessVyxSv1W8e) potdCheck
Serverless: Enter a project domain (used for serverless regional bucket names):  (myapp.com) serverless.zerosharp.com
Serverless: Enter an email to use for AWS alarms:  (me@myapp.com) potdCheck@nosredna.com
Serverless: Select a region for your project:</p>

<pre><code>us-east-1
us-west-2
</code></pre>

<blockquote><p>eu-west-1</p>

<pre><code>ap-northeast-1
</code></pre>

<p>Serverless: Select an AWS profile for your project:
default
Serverless: Creating a project region bucket on S3: serverless.euwest1.zerosharp.com...<br/>
Serverless: Creating CloudFormation Stack for your new project (~5 mins)...<br/>
Serverless: Successfully created project: serverlessPotdCheck
```</p></blockquote>

<p>It takes about 5 minutes to setup the necessary CloudFormation stack for your project. Change directory to the newly created project.</p>

<pre><code>$ cd serverlessPotdCheck
</code></pre>

<p>Create a new module.</p>

<pre><code>$ serverless module create
</code></pre>

<p><code>
Serverless: Enter a name for your new module:  potd
Serverless: Enter a function name for your new module:  check
Serverless: Successfully created function: "check"  
Serverless: Installing "serverless-helpers" for this module via NPM...  
serverless-helpers-js@0.0.3 node_modules/serverless-helpers-js
└── dotenv@1.2.0
Serverless: Successfully created new serverless module "potd" with its first function "check"  
</code></p>

<p>This has created the javascript code for a basic lambda function which we can immediately deploy.</p>

<pre><code>$ serverless function deploy
</code></pre>

<p>```  <br/>
Serverless: Deploying functions in "development" to the following regions: eu-west-1<br/>
Serverless: | 123123123 { Code:
   { S3Bucket: 'serverless.euwest1.zerosharp.com',</p>

<pre><code> S3Key: 'Serverless/serverlessPotdCheck/development/lambdas/check@1450717964169.zip' },
</code></pre>

<p>  FunctionName: 'serverlessPotdCheck-check',
  Handler: 'modules/potd/check/handler.handler',
  Role: 'arn:aws:iam::962613113552:role/serverlessPotdCheck-development-r-IamRoleLambda-12LOSLPN3JHS8',
  Runtime: 'nodejs',
  Description: 'Serverless Lambda function for project: serverlessPotdCheck',
  MemorySize: 1024,
  Publish: true,</p>

<p>  ...</p>

<p>Serverless: Successfully deployed functions in "development" to the following regions: eu-west-1<br/>
```</p>

<p>Now deploy the endpoints.</p>

<pre><code>$ serverless endpoint deploy
</code></pre>

<p><code>
Serverless: Deploying endpoints in "development" to the following regions: eu-west-1  
Serverless: Successfully deployed endpoints in "development" to the following regions:  
Serverless: eu-west-1 ------------------------  
Serverless:   GET - https://udjkzpj2a2.execute-api.eu-west-1.amazonaws.com/development/potd/check
</code></p>

<p>Now open a browser and navigate to the URL in the last line. You should see the following JSON response.</p>

<p>```json
{</p>

<pre><code>message: "Your Serverless function ran successfully!"
</code></pre>

<p>}
```</p>

<p>Now that's already fantastic. With a handful of commands we have deployed an arbitrary javascript function to a URL endpoint very cheaply and with automatic scaling. We never had to consider instance size or memory or operating system.</p>

<p>And it's extremely extensible too - thanks to the other AWS services, we can easily make it secure (with Amazon Cognito) kick off emails (SES), store files (S3), add persistence (DynamoDB), etc.</p>

<p>In the next post, I'll be applying it to a real life scenario to replace an existing web service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 5 - Analysis]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/"/>
    <updated>2013-04-14T07:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis</id>
    <content type="html"><![CDATA[<p>This is the final post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
<li><a href="/load-testing-xaf-part-4-launching-the-load-test/">Part 4: Launching the load test</a></li>
</ul>


<p>In this part, we analyse the results of the load test we ran in <a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 4</a>.</p>

<h2>Results</h2>

<p>The results of the test we ran are <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">here</a>. The graphs are interactive and give quite interesting data about the load tests. Feel free to have a look and play around with the results.</p>

<h2>The Performance Graphs</h2>

<p><img src="/images/blog/load-testing/load-testing-006.png"></p>

<p>The above graph shows the basic information about the test. We can see there were 649 transactions (the Selenium script was run 649 times) and there were 17 errors.</p>

<p>You can see that the test managed to follow the planned scenario (the actual number of users follows the yellow line). You can also see information about the throughput in bytes during the test.</p>

<h2>The Script Performance Graphs</h2>

<p>Here we see information pertaining to the script we chose to run. Had we run multiple different scripts, we would be able to isolate each one.</p>

<p><img src="/images/blog/load-testing/load-testing-009.png"></p>

<p>It is clear that the transaction time rises quite slowly with the load until about 12:17 when there is a jump. More on that later.</p>

<p>First, I have removed the plot of the total transaction time, so that we can see more detail from the remaining steps. Two things seem to be clear: the response time for each individual step does not seem to be much affected by the load, but the login step rises gradually.</p>

<p><img src="/images/blog/load-testing/load-testing-010.png"></p>

<p>Now back to the spike at 12:17, if you look at the transaction data more closely (not shown here but available on the <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">NeuStar results page</a>, it looks like several transactions finished at the same time and that the jump coincides with several simultaneous logins.</p>

<p>So again, it seems that login is the 'weakest link', i.e., the most resource intensive step and the one that suffers the most under load.</p>

<h2>The Errors</h2>

<p>Lets look more closely at the errors.</p>

<p><img src="/images/blog/load-testing/load-testing-007.png"></p>

<p>The first type of error we can see from the screen-shot occurred at the login page. This error happened 6 times and was very similar to another error which occurred once. In fact, all 6 of these errors happened at the very end of the test. As such, they can be ignored, because it is likely that the load test was scaling down and interrupting sessions at this point.</p>

<p><img src="/images/blog/load-testing/load-testing-008.png"></p>

<p>One of the very nice features of NeuStar's load testing solution is that you not only get a screenshot, but also a video which shows you exactly what the user experienced when an error occurs. By clicking on the second error, it looks like there may be a problem  when the system is under load. There were 6 errors and it is clear in the video that the errors occur when attempting to navigate away from the <em>Scheduler Event</em> view to the <em>My Details</em> view. The screen-shot gives us some useful information. DevExpress? Any ideas?</p>

<p><img src="/images/blog/load-testing/load-testing-011.jpg"></p>

<p>There are a couple of other errors, but I think these are most likely a result of problems with the Selenium script rather than XAF. The AJAX update panels make it quite hard to detect when the page is fully ready and although we try to accommodate this with <code>selenium.waitForCondition()</code> my feeling is that the <code>click()</code> occurred before everything was properly wired up.</p>

<h2>Further tests</h2>

<p>This series has covered the process of load testing XAF applications in its entirety, but in some ways, it feels like only the beginning. There are many other configurations and tests which would be interesting.</p>

<p>For instance</p>

<ul>
<li>Reduce think time which is currently set to 3 seconds per step</li>
<li>Use a smaller/larger EC2 instance</li>
<li>Increase the number of virtual users</li>
<li>Try load balancing with sticky sessions</li>
<li>Experiment with/without compression (IIS or via the <code>web.config</code>)</li>
<li>Experiment with/without caching (both at the http level, and via the <a href="http://documentation.devexpress.com/#XPO/CustomDocument9892">cached data store</a></li>
</ul>


<p>There are also many ways of improving XAF performance that are not in the MainDemo. These include:</p>

<ul>
<li><a href="http://documentation.devexpress.com/#wpf/CustomDocument6279">Server mode</a> in all grids</li>
<li><a href="http://community.devexpress.com/blogs/xpo/archive/2006/03/27/session-management-and-caching.aspx">XPO Caching</a></li>
<li>Where possible, move any heavy operations to a separate asynchronous web service call</li>
</ul>


<p>We have implemented all of these in our production application.</p>

<h2>A note about concurrency</h2>

<p>In our experience, people tend to over estimate the number of concurrent users for their application. Our application has probably upwards of 5000 users defined, but we know from our logs that there have never been more than 80 simultaneously logged in. Also, even with 80 concurrent users, they have a much longer 'think time' than 3 seconds on average.</p>

<p>For the production environment, we run at least one 25 user test for every major release and ensure the performance is at least as good as the previous release. We have occasionally run tests with up to 200 simultaneous users. The response time goes down to unacceptable levels (~30 seconds), but the application behaves. In production, the system is load balanced (with sticky sessions) and we know from previous experience that this is sufficient for our application.</p>

<h2>Conclusion</h2>

<p>This concludes my series on load testing. We've managed to get some very useful information with some very low-cost tools. The largest part of effort is the writing of the Selenium script which is certainly tricky. In the future I'd really like to harness the DevExpress EasyTests to replace the script but I haven't yet found a way of doing this. Feel free to use my Selenium script as a starting point for testing your own XAF applications, and let us know of any interesting results!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we'll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select 'Create a new script'. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
</feed>
