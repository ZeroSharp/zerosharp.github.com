<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2018-11-04T19:50:26+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improvements to Serverless PHP support]]></title>
    <link href="http://ZeroSharp.github.com/improvements-to-serverless-php-support/"/>
    <updated>2017-03-02T11:37:00+00:00</updated>
    <id>http://ZeroSharp.github.com/improvements-to-serverless-php-support</id>
    <content type="html"><![CDATA[<p>I was inspired by two events to jump back into serverless framework.</p>

<p><img class="left" src="/images/blog/serverless-php-improvements-001.jpeg" width="200" title="Serverless London Meetup" ></p>

<p>Firstly, I attended the second <a href="https://www.meetup.com/Serverless-London/">London serverless meetup</a> yesterday evening which was excellent and showed just how much enthusiasm there is for serverless architectures. Check out their new logo on the left. It was significant that each of the three speakers announced that they are actively hiring serverless developers.</p>

<p>Secondly, <a href="https://github.com/Stolz">Stolz</a> has contributed improvements to my sample project for integrating PHP into the serverless framework. It's the purpose of this blog post to cover the changes.</p>

<p>The trick to getting AWS lambda to support PHP is to bundle in a PHP binary so that nodejs can call it with <code>child_process.spawn()</code>. In <a href="/the-serverless-framework-and-php/">my first implementation</a>, I used an Ubuntu docker base image to compile and produce the php binary. Unfortunately, this is not identical to the container that AWS Lambda uses and so sometimes the logs would contain errors such as:</p>

<p>```sh
START RequestId: 728dcddf-feaa-11e6-8346-2125e1c055d7 Version: $LATEST
2017-03-01 18:11:10.455 (+00:00)    728dcddf-feaa-11e6-8346-2125e1c055d7    stderr: ./php: /usr/lib64/libcurl.so.4: no version information available (required by ./php)</p>

<p>END RequestId: 728dcddf-feaa-11e6-8346-2125e1c055d7
REPORT RequestId: 728dcddf-feaa-11e6-8346-2125e1c055d7  Duration: 6000.08 ms    Billed Duration: 6000 ms    Memory Size: 1024 MB    Max Memory Used: 23 MB<br/>
```</p>

<p>In my experience, these errors were often not fatal, but the correct approach is to build the php binary from a base image which is closer to the one lambda uses. So instead of my docker file starting with <code>FROM ubuntu</code>, it now starts with <code>FROM amazonlinux</code>. Also, with this image, I can use <code>yum</code> to install other dependencies like <code>libpng-devel</code>. So the new docker build script for producing the php binary looks like this:</p>

<p>```sh dockerfile.buildphp</p>

<h1>Compile PHP with static linked dependencies</h1>

<h1>to create a single running binary</h1>

<p>FROM amazonlinux</p>

<p>ARG PHP_VERSION</p>

<p>RUN yum install \</p>

<pre><code>autoconf \
automake \
libtool \
bison \
re2c \
libxml2-devel \
openssl-devel \
libpng-devel \
libjpeg-devel \
curl-devel -y
</code></pre>

<p>RUN curl -sL https://github.com/php/php-src/archive/$PHP_VERSION.tar.gz | tar -zxv</p>

<p>WORKDIR /php-src-$PHP_VERSION</p>

<p>RUN ./buildconf --force</p>

<p>RUN ./configure \</p>

<pre><code>--enable-static=yes \
--enable-shared=no \
--disable-all \
--enable-json \
--enable-libxml \
--enable-mbstring \
--enable-phar \
--enable-soap \
--enable-xml \
--with-curl \
--with-gd \
--with-zlib \
--with-openssl \
--without-pear
</code></pre>

<p>RUN make -j 5
```</p>

<p>If you run this with</p>

<pre><code>$ sh dockerfile.buildphp
</code></pre>

<p>It will use docker to overwrite the php binary which will get shipped when you deploy with <code>sls deploy</code>. And this time, there are no more libcurl errors. All the code is <a href="https://github.com/ZeroSharp/serverless-php">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A concrete PHP Serverless example - export chess games in PDF]]></title>
    <link href="http://ZeroSharp.github.com/a-concrete-php-serverless-example/"/>
    <updated>2016-11-29T17:37:00+00:00</updated>
    <id>http://ZeroSharp.github.com/a-concrete-php-serverless-example</id>
    <content type="html"><![CDATA[<p>In <a href="/the-serverless-framework-and-php/">the last post</a> I built a PHP capable sample project for <a href="https://serverless.com/">the Serverless Framework</a>. In this post, I'll show a concrete use of it.</p>

<p>The service I'm building connects runs a PHP function for pretty-printing chess games from the <a href="http://lichess.org/">lichess online chess server</a>. <a href="https://github.com/clarkerubber/lichessPDFExporter">James Clarke</a> has written a PHP function to do this using <a href="http://www.fpdf.org/">fpdf17</a>.</p>

<p>The lichess exporter takes the game id of any game that has been played on the lichess server and produced a PDF output. Take for example, Game 8 of the current World Championship which is <a href="https://en.lichess.org/COQChpzH">here</a>. When I open the resulting file, I see this:</p>

<p><img src="/images/blog/serverless-lichess-pdf-exporter-001.png"></p>

<p>In this blog post I'll describe how I turned this into a serverless service. The goal is to create:</p>

<ul>
<li>Add an endpoint which takes the game id as a parameter</li>
<li>Run the PHP function via an AWS lambda function</li>
<li>Return the result as a stream</li>
</ul>


<h2>Prerequisites</h2>

<p>First check everything we need is installed.</p>

<pre><code>$ serverless --version
1.2.1
$ node --version
v7.1.0
</code></pre>

<h2>Initial setup</h2>

<pre><code>$ mkdir serverless-lichess-to-pdf
$ cd serverless-lichess-to-pdf
$ sls install --url https://github.com/ZeroSharp/serverless-php
</code></pre>

<p>Next copy in the source from https://github.com/clarkerubber/lichessPDFExporter.</p>

<p>You can check it works by running the following.</p>

<pre><code>$ php main.php COQChpzH &gt; COQChpzH.pdf
</code></pre>

<p>What's going on here? The php binary (from the serverless-php project) is running main.php (from the lichess-pdf-exporter project) with argument <code>COQChpzH</code> (which corresponds to a <a href="https://en.lichess.org/hsXtkVk8">chess game</a> on the lichess server. The main.php function downloads the game from the lichess API and passes it through the fpdf17 library to create a pdf stream which is written out to the <code>COQChpzH.pdf</code> file.</p>

<h2>Lessons learned</h2>

<p>I learned a few things while trying to get this project working. The basic plan is to modify handler.js so that it return the output of the call described above. Turns out there are quite a few gotchas along the way.</p>

<h2>Lesson 1 - Defining a path parameter</h2>

<p>I want my API to look like this:</p>

<pre><code>http://.../serverless-lichess-to-pdf/export/{gameid}
</code></pre>

<p>I could not find an example in the serverless docs for getting a parameter that is passed in the URL.</p>

<p>Turns out your <code>serverless.yml</code> file should look like this:</p>

<p>```yml serverless.yml
functions:
  exportToPdf:</p>

<pre><code>handler: handler.exportToPdf
events:
  - http:
      path: export/{gameid}
      method: get
</code></pre>

<p>```</p>

<p>Then, in your handler.js you can retrieve the parameter with:</p>

<p><code>js
module.exports.exportToPdf = (event, context, callback) =&gt; {
  var gameid = event.pathParameters.gameid;
  // etc...
}
</code></p>

<h2>Lesson 2 - API Gateway does not support binary data</h2>

<p>I was hoping I could just do something like this:</p>

<p>```js handler.js
// this does NOT work
const response = {</p>

<pre><code>statusCode: 200,
body: outputFromPhpCall,
content-type: "application/pdf"
</code></pre>

<p>};</p>

<p>return callback(null, response);
```</p>

<p>At present, you cannot return a binary file. Amazon have just (November 2016) <a href="https://aws.amazon.com/blogs/compute/binary-support-for-api-integrations-with-amazon-api-gateway/">released support for binary types in API Gateway</a> but it's currently <a href="https://github.com/serverless/serverless/issues/2797">an open issue</a> in the Serverless Framework.</p>

<h2>Lesson 3 - You can redirect the response to an S3 bucket</h2>

<p>So instead of returning the binary output, I can write the output to an S3 bucket and return a 302 redirection to the S3 resource. Like this:</p>

<p>```js handler.js
// body contains the output from the PHP call
const params = {</p>

<pre><code>Bucket: bucket,
Key: key,
ACL: 'public-read-write',
Body: body,
ContentType: 'application/pdf'
</code></pre>

<p>};</p>

<p>// Save the pdf file to S3  <br/>
s3.putObject(params, function(err, data) {
if (err)
{</p>

<pre><code>return callback(new Error(`Failed to put s3 object: ${err}`));
</code></pre>

<p>}</p>

<p>// respond with a 302 redirect to the PDF file
const response = {</p>

<pre><code>statusCode: 302,
headers: {
    location : `https://s3-eu-west-1.amazonaws.com/${bucket}/${key}`
}
</code></pre>

<p>};</p>

<p>return callback(null, response);
```</p>

<h2>Lesson 4 - You can automatically delete S3 objects after a number of days</h2>

<p>Each S3 bucket has optional <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">lifecycle rules</a> where you can specify that files are automatically removed after a time period. I wanted to set this up within the <code>serverless.yml</code> resources section, but the syntax for the lifecycle rules were not very obvious and I could not find any examples online. The following seems to work:</p>

<p>```yml serverless.yml
resources:
  Resources:</p>

<pre><code>PackageStorage:
  Type: AWS::S3::Bucket
  Properties:
    AccessControl: PublicRead
    BucketName: ${self:custom.exportToPdfBucket}
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 1
          Status: Enabled
</code></pre>

<p>```</p>

<h2>It's all working now</h2>

<p>You can check it out by visiting <a href="https://e7tyur4sib.execute-api.eu-west-1.amazonaws.com/dev/export/COQChpzH">this link</a>.</p>

<p>The <a href="https://github.com/ZeroSharp/serverless-lichess-to-pdf">source code is on Github</a>.</p>

<p>I also wrote <a href="https://chrome.google.com/webstore/detail/lichess-print-friendly-pd/goijhimgdjppmhmjkaglhggoapkgobfg">a Chrome extension</a> which injects the link into the lichess page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Serverless Framework and PHP]]></title>
    <link href="http://ZeroSharp.github.com/the-serverless-framework-and-php/"/>
    <updated>2016-11-21T09:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/the-serverless-framework-and-php</id>
    <content type="html"><![CDATA[<p>The goal of this post is to explain how to call a PHP function from within an AWS lambda using the <a href="https://serverless.com/">Serverless Framework</a>.</p>

<h2>Prerequisites</h2>

<p>First check everything we need is installed.</p>

<pre><code>$ serverless --version
1.1.0
$ node --version
v7.1.0
</code></pre>

<h2>Install the sample PHP function</h2>

<p>Install my sample <em>Hello</em> function from my github repository.</p>

<pre><code>$ sls install --url https://github.com/ZeroSharp/serverless-php
</code></pre>

<p><code>sh
Serverless: Downloading and installing "serverless-php"…
Serverless: Successfully installed "serverless-php".
</code></p>

<h2>The code</h2>

<pre><code>$ cd serverless-php
</code></pre>

<p>Let's have a look at the <code>serverless.yml</code> file.</p>

<p>```yml serverless.yml
service: serverless-php</p>

<p>provider:
  name: aws
  runtime: nodejs4.3
  # region: eu-west-1</p>

<p>functions:
  hello:</p>

<pre><code>handler: handler.hello
events:
  - http:
      path: hello
      method: get
</code></pre>

<p>```</p>

<p>Now look at the php function <code>index.php</code> that we'd like our lambda to call.</p>

<p>```php index.php
&lt;?php</p>

<h1>$argv will contain the event object. You can output its contents like this if you like</h1>

<h1>var_export($argv, true);</h1>

<p>printf('Go Serverless v1.0! Your PHP function executed successfully!');
```</p>

<p>And the <code>handler.js</code> for the hello function looks as follows. It defines a simple lambda which calls the PHP binary, logs any errors and returns the result.</p>

<p>```js handler.js
'use strict';</p>

<p>var child_process = require('child_process');</p>

<p>module.exports.hello = (event, context, callback) => {</p>

<p>  var strToReturn = '';</p>

<p>  var php = './php';</p>

<p>  // workaround to get 'sls invoke local' to work
  if (typeof process.env.PWD !== "undefined") {</p>

<pre><code>php = 'php';
</code></pre>

<p>  }</p>

<p>  var proc = child_process.spawn(php, [ "index.php", JSON.stringify(event), { stdio: 'inherit' } ]);</p>

<p>  proc.stdout.on('data', function (data) {</p>

<pre><code>var dataStr = data.toString()
// console.log('stdout: ' + dataStr);
strToReturn += dataStr
</code></pre>

<p>  });</p>

<p>  // this ensures any error messages raised by the PHP function end up in the logs
  proc.stderr.on('data', function (data) {</p>

<pre><code>console.log(`stderr: ${data}`);
</code></pre>

<p>  });</p>

<p>  proc.on('close', function(code) {</p>

<pre><code>if(code !== 0) {
  return callback(new Error(`Process exited with non-zero status code ${code}`));
}

const response = {
  statusCode: 200,
  body: JSON.stringify({
    message: strToReturn,
    //input: event,
  }),
};

callback(null, response);
</code></pre>

<p>  });
};
```</p>

<p>Included is the PHP binary to bundle with our serverless function.</p>

<p>(You may need to compile it yourself with different options. See below for help on how to do this.)</p>

<p>Check it works from your shell.</p>

<pre><code>$ php index.php
</code></pre>

<p><code>sh
Go Serverless v1.0! Your PHP function executed successfully!
</code></p>

<p>Run it locally through the Serverless Framework.</p>

<pre><code>$ sls invoke local --function hello
</code></pre>

<p>```sh
Serverless: Your function ran successfully.</p>

<p>{</p>

<pre><code>"statusCode": 200,
"body": "{\"message\":\"Go Serverless v1.0! Your PHP function executed successfully!\"}"
</code></pre>

<p>}
```</p>

<p>Looks good. Let's deploy.</p>

<pre><code>$ sls deploy
</code></pre>

<p>```sh
Serverless: Packaging service…
Serverless: Uploading CloudFormation file to S3…
Serverless: Uploading service .zip file to S3…
Serverless: Updating Stack…
Serverless: Checking Stack update progress…
..........
Serverless: Stack update finished…</p>

<p>Service Information
service: serverless-php
stage: dev
region: eu-west-1
api keys:
  None
endpoints:
  GET - https://c1w0hct166.execute-api.eu-west-1.amazonaws.com/dev/hello
functions:
  serverless-php-dev-hello: arn:aws:lambda:eu-west-1:962613113552:function:serverless-php-dev-hello
```</p>

<p>Run the remote function via Serverless.</p>

<pre><code>$ sls invoke --function hello
</code></pre>

<p>```sh
{</p>

<pre><code>"statusCode": 200,
"body": "{\"message\":\"Go Serverless v1.0! Your PHP function executed successfully!\",\"input\":{}}"
</code></pre>

<p>}
```</p>

<p>Visit the endpoint in your browser.</p>

<p>```json
{</p>

<pre><code>"message": "Go Serverless v1.0! Your PHP function executed successfully!"
</code></pre>

<p>}
```</p>

<p>Nice. It's all working.</p>

<h2>Rebuilding the PHP binary</h2>

<p>Depending on the PHP function you need to run, it may be necessary to rebuild the php binary with different flags and dependencies. You can do this best with docker.</p>

<pre><code>$ docker --version
Docker version 1.12.3, build 6b644ec
</code></pre>

<p>Modify <code>dockerfile.buildphp</code> as necessary.</p>

<p>Then run:</p>

<pre><code>$ sh buildphp.sh
</code></pre>

<p>This will build a new PHP binary and copy it to the project root. You can immediately deploy for testing with:</p>

<pre><code>$ sls deploy
</code></pre>

<h2>Thanks</h2>

<p>Shout out to <a href="https://github.com/dannylinden/aws-lambda-php">Danny Linden</a> whose code got me started on this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework Part 5: Pulling in a node package]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-5-pulling-in-a-node-package/"/>
    <updated>2016-02-09T11:31:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-5-pulling-in-a-node-package</id>
    <content type="html"><![CDATA[<p>This is the final part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>.</p>

<p>In the previous posts, the <code>PasswordGenerator</code> always returned 'Password'. Instead each date should corresponds to a new unique password. We'll make use of the <a href="https://www.npmjs.com/package/crypto-js">Crypto-js</a> node package and we'll see that the AWS lambda copes just fine.</p>

<h3>Installing a node package</h3>

<p>Pull in the crypto-js package into the serverless component.</p>

<pre><code>$ cd nodejscomponent/
$ npm install crypto-js --save
crypto-js@3.1.6 node_modules/crypto-js
</code></pre>

<p>Now we need the typescript definitions. Watch out there are two different TypeScript typings called <em>cryptojs</em> and <em>crypto-js</em>. The first one is more complete.</p>

<pre><code>$ typings install cryptojs --ambient --save
? Found cryptojs typings for DefinitelyTyped. Continue? Yes
Installing cryptojs@~3.1.2 (DefinitelyTyped)...

cryptojs
└── (No dependencies)
</code></pre>

<p>I'm not sure why, but there's no <code>export</code> in the typings file for <em>cryptojs</em>. Add the following to the bottom of the <em>cryptojs.d.ts</em> file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/typings/main/ambient/cryptojs.d.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="nx">declare</span> <span class="nx">module</span> <span class="s2">&quot;crypto-js&quot;</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">export</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Improved PasswordGenerator</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/src/passwordOfTheDay.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;../typings/main.d.ts&quot; /&gt;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">CryptoJS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;crypto-js&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="kd">function</span> <span class="nx">checkPotd</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">PasswordGenerator</span><span class="p">().</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="kr">class</span> <span class="nx">PasswordGenerator</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">generate</span><span class="p">(</span><span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">)</span> <span class="o">:</span> <span class="nx">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Get the current date as a YYYYMMDD string</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">yyyy</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mm</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// getMonth() is zero-based</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dd</span>  <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">plain</span> <span class="o">=</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">yyyy</span><span class="p">}</span><span class="nx">$</span><span class="p">{</span><span class="nx">mm</span><span class="p">}</span><span class="nx">$</span><span class="p">{</span><span class="nx">dd</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Using AES CTR with 32 byte key and iv ensures the encrypted string is not too long</span>
</span><span class='line'>    <span class="c1">// See http://stackoverflow.com/a/13298019/1077279</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Hex</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;108c786594543687891374723e809ec5e475a8361f7ad82df04e91ba2c139321&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Use a different initialization vector each time by using the date as part of the vector</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">iv</span>  <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Hex</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">plain</span> <span class="o">+</span> <span class="s1">&#39;3a8fe4440be1e113a271574f379d70a76c3477aaff036d1e83fcd4b9&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mode</span><span class="o">:</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">mode</span><span class="p">.</span><span class="nx">CTR</span><span class="p">,</span> <span class="nx">padding</span><span class="o">:</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">pad</span><span class="p">.</span><span class="nx">NoPadding</span><span class="p">,</span> <span class="nx">iv</span><span class="o">:</span> <span class="nx">iv</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">encrypted</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">AES</span><span class="p">.</span><span class="nx">encrypt</span><span class="p">(</span><span class="nx">plain</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">encrypted</span><span class="p">.</span><span class="nx">ciphertext</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">check</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// check the value matches today&#39;s password of the day</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">password</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Run the tests</h3>

<p>We expect the tests to fail now since we are no longer returning the same password.</p>

<p>```sh
$ npm test</p>

<blockquote><p>@0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
tsc</p>

<p>@0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
mocha ./lib/test</p></blockquote>

<p>  Generator</p>

<pre><code>#generate
  1) should generate the password
#check
  ✓ should return false when the password is incorrect
#check
  2) should return true when the password is correct
</code></pre>

<p>  1 passing (16ms)
  2 failing</p>

<p>  1) Generator #generate should generate the password:</p>

<pre><code> Error: Expected 'Password' but was bb4bde4d76b055
  at Context.&lt;anonymous&gt; (lib/test/passwordOfTheDayTest.js:12:23)
</code></pre>

<p>  2) Generator #check should return true when the password is correct:</p>

<pre><code> Error: Expected 'true' but was false
  at Context.&lt;anonymous&gt; (lib/test/passwordOfTheDayTest.js:28:23)
</code></pre>

<p>npm ERR! Test failed.  See above for more details.
```</p>

<h3>Update and improve the tests</h3>

<p>It's getting a little more complicated so let's pull in <a href="http://chaijs.com/">chai</a> which is a pretty assertions library.</p>

<p><code>sh
$ npm install chai --save-dev
chai@3.5.0 node_modules/chai
├── assertion-error@1.0.1
├── type-detect@1.0.0
└── deep-eql@0.1.3 (type-detect@0.1.1)
</code>
And the Typescript definitions for chai.</p>

<p>```sh
$ typings install chai --save --ambient
? Found chai typings for DefinitelyTyped. Continue? Yes
Installing chai@~3.4.0 (DefinitelyTyped)...</p>

<p>chai
└── (No dependencies)
```</p>

<p>Now let's flesh out the tests for the <code>PasswordGenerator</code> class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/src/test/passwordOfTheDayTest.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;../../typings/main.d.ts&quot; /&gt;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PasswordOfTheDay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../passwordOfTheDay&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;chai&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Tell chai that we&#39;ll be using the &quot;should&quot; style assertions.</span>
</span><span class='line'><span class="nx">Chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Generator&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">subject</span> <span class="o">:</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#generate&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should generate the password when the date is 24th July 2010&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">date</span> <span class="o">:</span> <span class="nb">Date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">password</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s2">&quot;92ab1ff89bf9af&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#generate&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should generate a different password when the date is 25th July 2010&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">date</span> <span class="o">:</span> <span class="nb">Date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">password</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s2">&quot;26a394b21800f1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return false when the password is incorrect&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&quot;garbage&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return false when the password is null&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return true when the password is correct&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">result</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Run our tests:</p>

<p>```sh
$ npm test</p>

<blockquote><p>@0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
tsc</p>

<p>@0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
mocha ./lib/test</p></blockquote>

<p>  Generator</p>

<pre><code>#generate
  ✓ should generate the password when the date is 24th July 2010
#generate
  ✓ should generate a different password when the date is 25th July 2010
#check
  ✓ should return false when the password is incorrect
#check
  ✓ should return false when the password is null
#check
  ✓ should return true when the password is correct
</code></pre>

<p>  5 passing (20ms)
```</p>

<h3>Deploy</h3>

<pre><code>$ serverless dash deploy
</code></pre>

<p>Now when we visit the endpoint with the correct password for today's date which happens to be <em>89366e6199f3</em>.</p>

<pre><code>https://...amazonaws.com/dev/potd/check?password=89366e6199f3
</code></pre>

<p>```json
{</p>

<pre><code>message: true
</code></pre>

<p>}
```</p>

<p>Mission accomplished! Notice that using a node package did not require any special steps on the AWS side. In fact we have not had to login to AWS since the very beginning when we created an IAM user for the project. And yet we've managed to build and deploy a cheap and scalable cloud-based service.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>

<p>That wraps up my series on building a small, but real-world Serverless application. In a future post, I'd like to look at providing a secured 'generate' service to allow authorized users to get today's password. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 4: Connecting the parts]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts/"/>
    <updated>2016-02-01T09:44:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>: <a href="/serverless-framework-part-1-up-and-running/">Part 1</a>, <a href="/serverless-framework-part-2-typescript-and-mocha/">part 2</a>, <a href="/serverless-framework-part-3-the-guts/">part 3</a>.</p>

<h2>New version 0.3.1</h2>

<p><span class="fluo">Edit: since the original version of this post, a new version 0.3.1 of Serverless was released. I have updated the tutorial below to reflect the newer version. Also, <a href="https://github.com/DefinitelyTyped/tsd/issues/269">TSD has been deprecated</a> in favour of <a href="https://www.npmjs.com/package/typings">Typings</a> so I've updated to use Typings instead. </span>
All parts have been updated for the latest version of the framework 0.3.1.</p>

<h2>The Password of the Day Generator class</h2>

<p>First up we need a class to generate and check the password of the day. For the moment, let's pretend the password of the day is always the string <em>"Password"</em>. Put the following typescript class in <em>nodejscomponent/src</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/src/passwordOfTheDay.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">checkPotd</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">PasswordGenerator</span><span class="p">().</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="kr">class</span> <span class="nx">PasswordGenerator</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">generate</span><span class="p">(</span><span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">)</span> <span class="o">:</span> <span class="nx">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// generate today&#39;s password</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Password&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">check</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// check the value matches today&#39;s password of the day</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">password</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now add a mocha test for it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/src/test/passwordOfTheDayTest.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;../../typings/main.d.ts&quot; /&gt;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PasswordOfTheDay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../passwordOfTheDay&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Generator&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">subject</span> <span class="o">:</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#generate&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should generate the password&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">24</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="s2">&quot;Password&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;Password&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return false when the password is incorrect&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s2">&quot;garbage&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;false&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return true when the password is correct&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s2">&quot;Password&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;true&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now compile everything.</p>

<pre><code>$ cd nodejscomponent
$ tsc
</code></pre>

<p>You will now find that there is a corresponding javascript file in the <em>lib</em> folder</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/src/passwordOfTheDay.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">checkPotd</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">PasswordGenerator</span><span class="p">().</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">checkPotd</span> <span class="o">=</span> <span class="nx">checkPotd</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PasswordGenerator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">PasswordGenerator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">PasswordGenerator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">generate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// generate today&#39;s password</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Password&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">PasswordGenerator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// check the value matches today&#39;s password of the day</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">password</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">return</span> <span class="nx">PasswordGenerator</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})();</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">PasswordGenerator</span> <span class="o">=</span> <span class="nx">PasswordGenerator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And likewise for the mocha test in <em>lib/test</em>. Now to run those tests:</p>

<pre><code>$ npm test

&gt; @0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; tsc

&gt; @0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; mocha ./lib/test

Generator
    #generate
    ✓ should generate the password
    #check
    ✓ should return false when the password is incorrect
    #check
    ✓ should return true when the password is correct

3 passing (10ms)
</code></pre>

<p>Nice. Next, modify the main entry point of the component <em>index.js</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nodejscomponent/lib/index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Dependencies</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PasswordOfTheDay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./passwordOfTheDay&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">checkPotd</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">message</span><span class="o">:</span> <span class="nx">result</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice how we make use of <code>event.password</code> which is the parameter we configured in <a href="/serverless-framework-part-3-the-guts/">part 3</a> in the <code>s_function.json</code> file.</p>

<p>Let's deploy!</p>

<pre><code>$ serverless dash deploy
_______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.3.1
`-------'

Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.
Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.
Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.


Serverless: Select the assets you wish to deploy:
    nodejscomponent - potd - check
    function - nodejscomponent/potd/check
    endpoint - nodejscomponent/potd/check@potd/check~GET
    - - - - -
&gt; Deploy

Serverless: Deploying functions in "dev" to the following regions: eu-west-1  
Serverless: ------------------------  
Serverless: Successfully deployed functions in "dev" to the following regions:   
Serverless: eu-west-1 ------------------------  
Serverless:   nodejscomponent/potd/check: arn:aws:lambda:eu-west-1:962613113552:function:serverlessPotd-nodejscomponent-potd-check:dev  
</code></pre>

<p>And lets visit that URI</p>

<pre><code>https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check?password=nonsense
</code></pre>

<p>```json  <br/>
{</p>

<pre><code>message: false
</code></pre>

<p>}
```</p>

<pre><code>https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check?password=Password
</code></pre>

<p>```json  <br/>
{</p>

<pre><code>message: true
</code></pre>

<p>}
```</p>

<p>Rock and roll. A working password checker running on Lambda in the Amazon cloud.</p>

<p>Next up - we'll extend the <code>PasswordGenerator</code> class to pull in a node package and generate a better password.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code so far</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don't forget to add your own.</p>
]]></content>
  </entry>
  
</feed>
