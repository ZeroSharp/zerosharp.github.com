<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xpo | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xpo/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2018-09-18T11:57:38+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="/fluent-queries-with-devexpress-xpo-intro">last post</a>, I'll demonstrate how to create a fluent interface so that you can do:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>First, let's look at the 'beginning' of the fluent interface: the <code>Query()</code> extension method.</p>

<p>```c#
public static class QueryExtensions
{</p>

<pre><code>public static IQueries Query(this Session session)
{
    return new Queries(session);
}

// If we're using XAF, do the same for ObjectSpace as well
public static IQueries Query(this IObjectSpace objectSpace)
{
    var xpObjectSpace = objectSpace as XPObjectSpace;
    var session = xpObjectSpace.Session;
    return new Queries(session);
}
</code></pre>

<p>}
```</p>

<p>What does the <code>Queries()</code> class look like?</p>

<p>```c#</p>

<pre><code>public interface IQueries
{
    IQueries InTransaction { get; }
    IContactQueries Contacts { get; }
    // One for each queryable object type, e.g.,
    // IDepartmentQueries Departments { get; }       
    // ITaskQueries Tasks { get; }
    // etc.
}

public class Queries : IQueries
{       
    public Queries(Session session)
    {
        _Session = session;
    }

    private readonly Session _Session;
    private bool _InTransaction;

    public IQueries InTransaction
    {
        get
        {
            _InTransaction = true;
            return this;
        }
    }

    private IContactQueries _Contacts;
    public IContactQueries Contacts
    {
        get
        {
            if (_Contacts == null)
                _Contacts = new ContactQueries(_Session, _InTransaction);
            return _Contacts;
        }
    }
}
</code></pre>

<p>```</p>

<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let's look at the base classes.</p>

<p>```c#
public interface IQueries<T> : IEnumerable<T>, IFluentInterface
{
}</p>

<p>public class Queries<T> : IQueries<T>
{</p>

<pre><code>public Queries(Session session, bool inTransaction)
{
    _Session = session;
    Query = new XPQuery&lt;T&gt;(session, inTransaction);
}

private readonly Session _Session;
protected IQueryable&lt;T&gt; Query { get; set; }

public IEnumerator&lt;T&gt; GetEnumerator()
{
    return Query.GetEnumerator();
}

IEnumerator IEnumerable.GetEnumerator()
{
    return Query.GetEnumerator();
}
</code></pre>

<p>}
```</p>

<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino's blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<p>```c#
public interface IContactQueries : IQueries<Contact>
{</p>

<pre><code>IContactQueries ByDepartmentTitle(string departmentTitle);
IContactQueries ByPosition(string position);
Contact ByEmail(string email);
</code></pre>

<p>}</p>

<p>public class ContactQueries : Queries<Contact>, IContactQueries, IContactThatHaveQueries
{</p>

<pre><code>public ContactQueries(Session session, bool inTransaction)
    : base(session, inTransaction)
{
}

public IContactQueries ByDepartmentTitle(string department)
{
    Query = Query.Where(c =&gt; c.Department.Title == department);
    return this;
}

public IContactQueries ByPosition(string position)
{
    Query = Query.Where(c =&gt; c.Position.Title == position);
    return this;
}

public Contact ByEmail(string email)
{
    return Query.SingleOrDefault(c =&gt; c.Email == email);
}
</code></pre>

<p>}  <br/>
```</p>

<p>There we go. Now we can use our fluent interface:</p>

<p><code>c#
var contacts = session.Query().Contacts.ByPosition("Manager");
</code></p>

<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It's also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Intro]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro/"/>
    <updated>2013-08-12T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro</id>
    <content type="html"><![CDATA[<p>There are <a href="http://documentation.devexpress.com/#xaf/CustomDocument3052">many ways to perform queries with XPO</a>.</p>

<p>You can do this:
```c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(new BinaryOperator("Name", "Elvis"));
</code></pre>

<p><code>
or this
</code>c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(CriteriaOperator.Parse("Name = 'Elvis'"));
</code></pre>

<p><code>
Another way to use the [simplified criteria syntax](http://documentation.devexpress.com/#XPO/CustomDocument2537), and with the [Xpo_EasyFields CodeRush plugin](https://code.google.com/p/dxcorecommunityplugins/wiki/XPO_EasyFields). Then you can do:
</code>c#
Session.FindObject<Contact>(Customer.Fields.Name == "Elvis");
<code>``
For each of the above, you can optionally query within the transaction by passing in the</code>PersistentCriteriaEvaluationBehavior.InTransaction` parameter.</p>

<p>Or we can use LINQ via <code>XPQuery&lt;T&gt;.TransformExpression()</code>.
```
Session.FindObject<Contact>(</p>

<pre><code>XPQuery&lt;Contact&gt;.TransformExpression(Session, c =&gt; c.Name == "Elvis")
);
</code></pre>

<p>```
All of these methods are powerful, but the power comes at a cost. The syntax is neither elegant nor particularly clear and as a result it is not very practical to maintain or test.</p>

<h2>A Fluent Interface for XPO</h2>

<p>How about if we could do the following?</p>

<p>```c#
var customer = Session</p>

<pre><code>            .Query()
              .Contacts
                .ByName("Elvis");
</code></pre>

<p>```
Or, for a more elaborate example:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>In the next post I'll show how to put the fluent interface code together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XpoBatch source code available]]></title>
    <link href="http://ZeroSharp.github.com/xpobatch-source-code-available/"/>
    <updated>2012-07-25T16:24:00+01:00</updated>
    <id>http://ZeroSharp.github.com/xpobatch-source-code-available</id>
    <content type="html"><![CDATA[<p>The source code for the fast batch operations with DevExpress XPO <a href="https://github.com/ZeroSharp/XpoBatch">is now available on on GitHub</a>.</p>

<p>It includes unit tests that can be run against SQL Server or in memory. It runs against DevExpress 12.1.7, but it will work against 11.2 (and possibly earlier versions) with a couple of minor modifications which are documented in the code.</p>

<h4>References</h4>

<ul>
<li><a href="/fast-batch-deletions-with-devexpress-xpo/">Fast batch deletions</a></li>
<li><a href="/fast-batch-modifications-with-devexpress-xpo/">Fast batch modifications</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast batch modifications with DevExpress XPO]]></title>
    <link href="http://ZeroSharp.github.com/fast-batch-modifications-with-devexpress-xpo/"/>
    <updated>2012-07-24T14:02:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fast-batch-modifications-with-devexpress-xpo</id>
    <content type="html"><![CDATA[<p>Last week I wrote about <a href="/fast-batch-deletions-with-devexpress-xpo/">fast batch deletions</a>. In this post I'll show how to do the same for modifications.</p>

<p>Let's assume we want to replace the 'State' property with 'CA' and CostCenter with 123 for all records where the 'City' is 'San Francisco'.  The recommended DevExpress approach would be something like the following:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>var xpCollection = new XPCollection&lt;MyObject&gt;(uow, CriteriaOperator.Parse("City == 'San Francisco'"));
foreach (MyObject myObject in xpCollection)
{
    myObject.State = "CA";
    myObject.CostCenter = 123;
}
uow.CommitChanges();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The problem with the above code is that every record must be loaded and then an individual <code>UPDATE</code> command is generated for each modification.  This is necessary for the business logic to be applied correctly (such as the code in methods such as <code>OnSaving()</code>). It is also necessary to handle record locking.</p>

<p>If you know that your objects do not require any of this processing, you can use use direct SQL <a href="http://documentation.devexpress.com/#XPO/CustomDocument8914">as described in the XPO documentation</a>. This however requires knowledge of the underlying database table and is not very versatile, (although the <code>DevExpress.Data.Filtering.CriteriaToWhereClauseHelper()</code> can help if you choose this route).</p>

<p>However, there is a method similar to the one described in the previous post which is equivalent to the direct SQL approach, but is much easier to use. The approach makes use of an extension method on the <code>Session</code> class.</p>

<h4>Example</h4>

<p>Since the extension method is somewhat more complicated than for the <code>Delete</code> case, I will start by showing an example of use before drilling into the supporting code.</p>

<p>The above example would now look like this:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>uow.Update&lt;MyObject&gt;(
    () =&gt; new MyObject(uow) 
              { 
                 State = "CA", 
                 CostCenter = 123 
              }, 
    CriteriaOperator.Parse("City == 'San Francisco'"));
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The Update<T> method takes an <code>Expression&lt;Func&lt;T&gt;&gt;</code> as the first parameter which allows us to pass in an anonymous type which serves as a template for the modification. This way we get strong typing for the property values.</p>

<h4>The extensions method</h4>

<p>Now for the guts of it:</p>

<p>{% codeblock lang:csharp %}
public class PropertyValueStore : List&lt;KeyValuePair&lt;XPMemberInfo, Object>>
{
}</p>

<p>public static class SessionExtensions
{</p>

<pre><code>public static PropertyValueStore CreatePropertyValueStore(XPClassInfo classInfo, MemberInitExpression memberInitExpression)
{
    PropertyValueStore propertyValueStore = new PropertyValueStore();

    /// Parse each expression binding within the anonymous class.  
    /// Each binding represents a property assignment within the IXPObject.
    /// Add a KeyValuePair for the corresponding MemberInfo and (invoked) value.
    foreach (var binding in memberInitExpression.Bindings)
    {
        var assignment = binding as MemberAssignment;
        if (binding == null)
        {
            throw new NotImplementedException("All bindings inside the MemberInitExpression are expected to be of type MemberAssignment.");
        }

        // Get the memberInfo corresponding to the property name.
        string memberName = binding.Member.Name;
        XPMemberInfo memberInfo = classInfo.GetMember(memberName);
        if (memberInfo == null)
            throw new ArgumentOutOfRangeException(memberName, String.Format("The member {0} of the {1} class could not be found.", memberName, classInfo.FullName));

        if (!memberInfo.IsPersistent)
            throw new ArgumentException(memberName, String.Format("The member {0} of the {1} class is not persistent.", memberName, classInfo.FullName));

        // Compile and invoke the assignment expression to obtain the contant value to add as a parameter.
        var constant = Expression.Lambda(assignment.Expression, null).Compile().DynamicInvoke();

        // Add the 
        propertyValueStore.Add(new KeyValuePair&lt;XPMemberInfo, Object&gt;(memberInfo, constant));
    }
    return propertyValueStore;
}

public static ModificationResult Update&lt;T&gt;(this Session session, Expression&lt;Func&lt;T&gt;&gt; evaluator, CriteriaOperator criteria) where T : IXPObject
{
    if (ReferenceEquals(criteria, null))
        criteria = CriteriaOperator.Parse("True");

    XPClassInfo classInfo = session.GetClassInfo(typeof(T));
    var batchWideData = new BatchWideDataHolder4Modification(session);
    int recordsAffected = (int)session.Evaluate&lt;T&gt;(CriteriaOperator.Parse("Count()"), criteria);

    /// Parse the Expression.
    /// Expect to find a single MemberInitExpression.
    PropertyValueStore propertyValueStore = null;
    int memberInitCount = 1;
    evaluator.Visit&lt;MemberInitExpression&gt;(expression =&gt;
        {
            if (memberInitCount &gt; 1)
            {
                throw new NotImplementedException("Only a single MemberInitExpression is allowed for the evaluator parameter.");
            }
            memberInitCount++;
            propertyValueStore = CreatePropertyValueStore(classInfo, expression);
            return expression;
        });

    MemberInfoCollection properties = new MemberInfoCollection(classInfo, propertyValueStore.Select(x =&gt; x.Key).ToArray());

    List&lt;ModificationStatement&gt; collection = UpdateQueryGenerator.GenerateUpdate(classInfo, properties, criteria, batchWideData);
    foreach (UpdateStatement updateStatement in collection.OfType&lt;UpdateStatement&gt;())
    {
        for (int i = 0; i &lt; updateStatement.Parameters.Count; i++)
        {
            Object value = propertyValueStore[i].Value;
            if (value is IXPObject)
                updateStatement.Parameters[i].Value = ((IXPObject)(value)).ClassInfo.GetId(value);
            else
                updateStatement.Parameters[i].Value = value;
        }
        updateStatement.RecordsAffected = recordsAffected;
    }
    return session.DataLayer.ModifyData(collection.ToArray&lt;ModificationStatement&gt;());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h4>Limitations</h4>

<p>There is currently no way to refer to another field within the assignment expressions - you can only set the value to an <code>OperandValue</code>.  So you cannot do</p>

<p>{% codeblock lang:csharp %}</p>

<pre><code>uow.Update&lt;MyObject&gt;(
    o =&gt; new MyObject(uow) 
              { 
                 // Does not Compile !!!
                 Property1 = o.Property2,
                 // Neither does this !!!
                 Property3 = o.Property3 + 1
              }, 
    null);
</code></pre>

<p>{% endcodeblock %}</p>

<p>In order to fix this, the <code>evaluator</code> has to be of type <code>Expression&lt;Func&lt;T, T&gt;&gt;</code> instead of <code>Expression&lt;Func&lt;T&gt;&gt;</code>, and then you can use expression trees to get an assignment expression. But then there is no way to pass it to a DevExpress <code>UpdateStatement.Parameter</code> as an <code>OperandValue</code>.</p>

<p><strong>Update:</strong> The <a href="https://github.com/ZeroSharp/XpoBatch">source code is now available on GitHub</a>.</p>

<h4>References</h4>

<p>The code was inspired by <a href="http://www.aneyfamily.com/terryandann/post/2008/04/Batch-Updates-and-Deletes-with-LINQ-to-SQL.aspx">an old blog post Terry Aney</a> in which he describes a similar approach for LINQ to SQL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast batch deletions with DevExpress XPO]]></title>
    <link href="http://ZeroSharp.github.com/fast-batch-deletions-with-devexpress-xpo/"/>
    <updated>2012-07-12T17:00:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fast-batch-deletions-with-devexpress-xpo</id>
    <content type="html"><![CDATA[<p>When deleting a collection of objects, DevExpress recommends using <a href="http://documentation.devexpress.com/#XPO/DevExpressXpoSession_Deletetopic116"><code>Session.Delete(ICollection objects)</code></a>. This has the same effect as calling the <code>Delete()</code> method for every object in the collection so that the business logic is applied correctly. The business logic in this context refers to code such as that in the <code>OnDeleting()</code>, <code>OnDeleted()</code> methods, but it also includes the clearing of references to the object by other objects. This approach is slow, but ensures the integrity of the data.</p>

<p>If you know that your objects do not require any of this processing, you can use use direct SQL <a href="http://documentation.devexpress.com/#XPO/CustomDocument8914">as described in the XPO documentation</a>. This however requires knowledge of the underlying database table and is not very versatile, (although the <code>DevExpress.Data.Filtering.CriteriaToWhereClauseHelper()</code> can help if you choose this route).</p>

<p>An alternative is to use the extension method below:</p>

<p>{% codeblock lang:csharp %}
public static class SessionExtensions
{</p>

<pre><code>public static ModificationResult Delete&lt;T&gt;(this Session session, CriteriaOperator criteria = null) where T : IXPObject
{
    if (ReferenceEquals(criteria, null))
        criteria = CriteriaOperator.Parse("True");

    XPClassInfo classInfo = session.GetClassInfo(typeof(T));
    var batchWideData = new BatchWideDataHolder4Modification(session);    
    int recordsAffected = (int)session.Evaluate&lt;T&gt;(CriteriaOperator.Parse("Count()"), criteria);    
    List&lt;ModificationStatement&gt; collection = DeleteQueryGenerator.GenerateDelete(classInfo, criteria, batchWideData);
    foreach (ModificationStatement item in collection)
    {
        item.RecordsAffected = recordsAffected;
    }

    ModificationStatement[] collectionToArray = collection.ToArray&lt;ModificationStatement&gt;();
    ModificationResult result = session.DataLayer.ModifyData(collectionToArray);
    return result;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Here is an example of how to call the method:</p>

<p>{% codeblock lang:csharp %}
using (UnitOfWork uow = new UnitOfWork())
{</p>

<pre><code>uow.Delete&lt;MyObject&gt;(CriteriaOperator.Parse("City != 'Chicago'"));
uow.CommitChanges();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>This achieves the same as result and similar performance to direct SQL, but with cleaner syntax and support for criteria.  Also, since it uses a <code>ModificationStatement[]</code>, it works with a remote <code>IDataStore</code>.</p>

<p>See the next post for <a href="/fast-batch-modifications-with-devexpress-xpo/">a similar approach for fast batch modifications</a>.</p>

<p><strong>Update:</strong> The <a href="https://github.com/ZeroSharp/XpoBatch">source code is now available on GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
