<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xaf | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xaf/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-09-02T08:45:53+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<p>```html</p>

<pre><code>&lt;!-- MiniProfiler --&gt;
&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;asp:PlaceHolder ID="mp" runat="server"&gt;
  &lt;%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
&lt;/asp:PlaceHolder&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a '<em>jQuery is undefined</em>' javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<p>```diff
protected void Application_Start(object sender, EventArgs e) {</p>

<pre><code>RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</code></pre>

<ul>
<li>MiniProfilerHelper.RegisterPathsToIgnore();
ASPxWebControl.CallbackError += new EventHandler(Application_Error);
// etc...
<code>
and modify `BeginRequest` and `EndRequest` as follows:
</code>diff
protected void Application_BeginRequest(object sender, EventArgs e) {</li>
<li>if (MiniProfilerHelper.IsEnabled())</li>
<li>{</li>
<li><pre><code>MiniProfiler.Start();
</code></pre></li>
<li>}
string filePath = HttpContext.Current.Request.PhysicalPath;
if(!string.IsNullOrEmpty(filePath)

<pre><code>&amp;&amp; (filePath.IndexOf("Images") &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
HttpContext.Current.Response.End();
</code></pre>

<p>}
}</p></li>
</ul>


<p>protected void Application_EndRequest(Object sender, EventArgs e)
{
+   if (MiniProfilerHelper.IsEnabled())
+       MiniProfiler.Stop();
}      <br/>
<code>
Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the `IsEnabled()` function always returns true.
</code>c#  <br/>
public static class MiniProfilerHelper
{</p>

<pre><code>public static bool IsEnabled()
{
    // While we are testing let's always return true
    return true;

    // We should not profile if we are EasyTesting
    if (TestScriptsManager.EasyTestEnabled == true)
        return false;

    // We could choose to profile only local requests
    if (HttpContext.Current.Request.IsLocal)
        return true;

    // Or based on a cookie
    HttpCookie miniProfileCookie = HttpContext.Current.Request.Cookies["MainDemoMiniProfiler"];
    return miniProfileCookie != null &amp;&amp; miniProfileCookie.Value != "0";
}

// Optionally ignore some paths to prevent the output being too busy.
public static void RegisterPathsToIgnore()
{
    if (!NetSecuritySettings.IsProfilingAllowed())
        return;

    List&lt;String&gt; ignoredByMiniProfiler = new List&lt;String&gt;(MiniProfiler.Settings.IgnoredPaths);
    // these are a substring search so wildcards are not supported
    ignoredByMiniProfiler.Add("SessionKeepAliveReconnect.aspx");
    ignoredByMiniProfiler.Add("TemplateScripts.js");
    ignoredByMiniProfiler.Add("EasyTestJavaScripts.js");
    ignoredByMiniProfiler.Add("MoveFooter.js");
    ignoredByMiniProfiler.Add("ImageResource.axd");
    MiniProfiler.Settings.IgnoredPaths = ignoredByMiniProfiler.ToArray(); 
}
</code></pre>

<p>}
```</p>

<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable 'chiclets' in the top left of the browser page.</p>

<p><img src="/images/blog/xaf-miniprofiler-1.png"></p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let's say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a 'step' to the MiniProfiler breakdown.</p>

<p>```c#
protected override void OnLoad(EventArgs e)
{</p>

<pre><code>var profiler = MiniProfiler.Current; // it's ok for this to be null
using (profiler.Step("ASP.NET: Page_Load(Default)"))
{
     base.OnLoad(e);
}
</code></pre>

<p>}
```</p>

<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application's <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p><img src="/images/blog/xaf-miniprofiler-2.png"></p>

<p>As another example, let's profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<p>```diff
private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
{
+   var profiler = MiniProfiler.Current;
+   using (profiler.Step("FindBySubject")) // doesn't matter if profiler is null
+   {</p>

<pre><code>    IObjectSpace objectSpace = Application.CreateObjectSpace();
    string paramValue = e.ParameterCurrentValue as string;
    if (!string.IsNullOrEmpty(paramValue))
    {
        paramValue = "%" + paramValue + "%";
    }
    object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
        new BinaryOperator("Subject", paramValue, BinaryOperatorType.Like));
    if (obj != null)
    {
        e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
    }
</code></pre>

<ul>
<li>}
}     <br/>
```</li>
</ul>


<p><img class="right" src="/images/blog/xaf-miniprofiler-3.png"></p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says 'Type Subject...'. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It's often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="/fluent-queries-with-devexpress-xpo-intro">last post</a>, I'll demonstrate how to create a fluent interface so that you can do:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>First, let's look at the 'beginning' of the fluent interface: the <code>Query()</code> extension method.</p>

<p>```c#
public static class QueryExtensions
{</p>

<pre><code>public static IQueries Query(this Session session)
{
    return new Queries(session);
}

// If we're using XAF, do the same for ObjectSpace as well
public static IQueries Query(this IObjectSpace objectSpace)
{
    var xpObjectSpace = objectSpace as XPObjectSpace;
    var session = xpObjectSpace.Session;
    return new Queries(session);
}
</code></pre>

<p>}
```</p>

<p>What does the <code>Queries()</code> class look like?</p>

<p>```c#</p>

<pre><code>public interface IQueries
{
    IQueries InTransaction { get; }
    IContactQueries Contacts { get; }
    // One for each queryable object type, e.g.,
    // IDepartmentQueries Departments { get; }       
    // ITaskQueries Tasks { get; }
    // etc.
}

public class Queries : IQueries
{       
    public Queries(Session session)
    {
        _Session = session;
    }

    private readonly Session _Session;
    private bool _InTransaction;

    public IQueries InTransaction
    {
        get
        {
            _InTransaction = true;
            return this;
        }
    }

    private IContactQueries _Contacts;
    public IContactQueries Contacts
    {
        get
        {
            if (_Contacts == null)
                _Contacts = new ContactQueries(_Session, _InTransaction);
            return _Contacts;
        }
    }
}
</code></pre>

<p>```</p>

<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let's look at the base classes.</p>

<p>```c#
public interface IQueries<T> : IEnumerable<T>, IFluentInterface
{
}</p>

<p>public class Queries<T> : IQueries<T>
{</p>

<pre><code>public Queries(Session session, bool inTransaction)
{
    _Session = session;
    Query = new XPQuery&lt;T&gt;(session, inTransaction);
}

private readonly Session _Session;
protected IQueryable&lt;T&gt; Query { get; set; }

public IEnumerator&lt;T&gt; GetEnumerator()
{
    return Query.GetEnumerator();
}

IEnumerator IEnumerable.GetEnumerator()
{
    return Query.GetEnumerator();
}
</code></pre>

<p>}
```</p>

<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino's blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<p>```c#
public interface IContactQueries : IQueries<Contact>
{</p>

<pre><code>IContactQueries ByDepartmentTitle(string departmentTitle);
IContactQueries ByPosition(string position);
Contact ByEmail(string email);
</code></pre>

<p>}</p>

<p>public class ContactQueries : Queries<Contact>, IContactQueries, IContactThatHaveQueries
{</p>

<pre><code>public ContactQueries(Session session, bool inTransaction)
    : base(session, inTransaction)
{
}

public IContactQueries ByDepartmentTitle(string department)
{
    Query = Query.Where(c =&gt; c.Department.Title == department);
    return this;
}

public IContactQueries ByPosition(string position)
{
    Query = Query.Where(c =&gt; c.Position.Title == position);
    return this;
}

public Contact ByEmail(string email)
{
    return Query.SingleOrDefault(c =&gt; c.Email == email);
}
</code></pre>

<p>}  <br/>
```</p>

<p>There we go. Now we can use our fluent interface:</p>

<p><code>c#
var contacts = session.Query().Contacts.ByPosition("Manager");
</code></p>

<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It's also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Intro]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro/"/>
    <updated>2013-08-12T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro</id>
    <content type="html"><![CDATA[<p>There are <a href="http://documentation.devexpress.com/#xaf/CustomDocument3052">many ways to perform queries with XPO</a>.</p>

<p>You can do this:
```c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(new BinaryOperator("Name", "Elvis"));
</code></pre>

<p><code>
or this
</code>c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(CriteriaOperator.Parse("Name = 'Elvis'"));
</code></pre>

<p><code>
Another way to use the [simplified criteria syntax](http://documentation.devexpress.com/#XPO/CustomDocument2537), and with the [Xpo_EasyFields CodeRush plugin](https://code.google.com/p/dxcorecommunityplugins/wiki/XPO_EasyFields). Then you can do:
</code>c#
Session.FindObject<Contact>(Customer.Fields.Name == "Elvis");
<code>``
For each of the above, you can optionally query within the transaction by passing in the</code>PersistentCriteriaEvaluationBehavior.InTransaction` parameter.</p>

<p>Or we can use LINQ via <code>XPQuery&lt;T&gt;.TransformExpression()</code>.
```
Session.FindObject<Contact>(</p>

<pre><code>XPQuery&lt;Contact&gt;.TransformExpression(Session, c =&gt; c.Name == "Elvis")
);
</code></pre>

<p>```
All of these methods are powerful, but the power comes at a cost. The syntax is neither elegant nor particularly clear and as a result it is not very practical to maintain or test.</p>

<h2>A Fluent Interface for XPO</h2>

<p>How about if we could do the following?</p>

<p>```c#
var customer = Session</p>

<pre><code>            .Query()
              .Contacts
                .ByName("Elvis");
</code></pre>

<p>```
Or, for a more elaborate example:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>In the next post I'll show how to put the fluent interface code together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2/"/>
    <updated>2013-05-28T11:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily.'>
Good news. The conversion is now two-way. Get the source code <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">from GitHub</a>. Make sure you have built MainDemo.Reports project.</p>

<p>You will find there are now two T4 transforms in the project. <em>RepxToCSharp.tt</em> is covered in the <a href="/making-xaf-reports-even-better-part-1">Part 1</a>. It searches for any <em>.repx</em> files in the solution and converts the scripts into compilable C#.</p>

<p>The second transform is new. <em>CSharpToRepx.tt</em> copies any changes to the script part back into the original <em>.repx</em> files. Again, there are performance optimisations via checksums to prevent overwriting unchanged files.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Summary of C# transformation&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Total C# files found                                        :  2
</span><span class='line'>  Total reports injected                                    :  1
</span><span class='line'>  Total reports missing                                     :  0
</span><span class='line'>  Total reports skipped because unchanged                   :  1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time elapsed: 00:00:02.3483264
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily. You could even write unit tests against the code in the scripts.</p>

<p></span></p>

<p>Currently the easiest way of running these scripts is to open them and save them with <code>Ctrl+S</code>. This is because T4 templates were originally designed as a Visual Studio tool.</p>

<p>In the future I'm hoping to improve the integration further. There are ways of including the transformations into the build instead, most of which are covered in <a href="http://www.olegsych.com/2010/04/understanding-t4-msbuild-integration">a blog post by Mr T4, Oleg Sych</a>. I like the idea of it being a NuGet package that can be easily added to any XAF project, but there's a but I'll need some more time to work out how best to achieve this.</p>

<h2>Basic usage summary</h2>

<p>Until then, here are some basic usage instructions.</p>

<ul>
<li>Add the T4 Toolbox extension to Visual Studio</li>
<li>Add a copy of the MainDemo.Reports project to your own solution</li>
<li>Make sure you build it before running the transforms</li>
<li>Open <em>RepxToCSharp.tt</em> in Visual Studio.</li>
<li>Save it with <code>Ctrl+S</code> to run the transform. It will search all the folders in your Solution for <em>.repx</em> files and add corresponding C# classes.</li>
<li>Make any changes you like to the script section (anything outside of <code>// -- Start of embedded scripts --</code> and <code>// -- End of embedded scripts --</code>) will be ignored.</li>
<li>Open <em>CSharpToRepx.tt</em> and run it with <code>Ctrl+S</code>. The changes will be saved back to the corresponding <em>.repx</em>.</li>
</ul>


<h2>Even more power?</h2>

<p>You may notice that if you reload the MainDemo.Reports project, you can now see <code>View in Designer</code> in the context menu when you right-click on the <em>.repx.cs</em> file.</p>

<p><img src="/images/blog/xaf-report-sync-003.png"></p>

<p>Let's click it and see what happens. It opens directly in Visual Studio (like an <code>XtraReport</code>).</p>

<p><img src="/images/blog/xaf-report-sync-004.png"></p>

<p>Now, this is all highly experimental. You can see there are some warnings... Also, there is no connection with XPO, so the <em>Preview</em> is always empty.</p>

<p>That said, it doesn't seem like too much of a stretch to eventually allow far more Visual Studio integration for XAF reports...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1/"/>
    <updated>2013-05-21T14:38:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The aim of these posts is to provide a two-way conversion process between .repx and C# files.'>
The ability to create reports using a report writer is a very powerful feature of <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, but there are some limitations which are particularly cumbersome to deal with in complex project.</p>

<p>One of the projects I work on has over 100 reports in it. Even though we make use of unit tests to ensure they are not broken, the maintenance of the code in the embedded scripts is particularly difficult to manage.</p>

<ul>
<li>XafReports are <em>.repx</em> files which are usually loaded into the report table during the database update routine. They are a subclass of XtraReports which with some added restrictions.</li>
<li>Any scripts are stored as a string or serialized to a <em>resources</em> property.</li>
<li>The report writer is available only in the Windows Forms application. This must be used whenever a change is made to a report. The modified report must be exported as a repx file and then added to the module as an embedded report. The procedure is <a href="http://documentation.devexpress.com/#Xaf/CustomDocument2786">described here</a>.</li>
</ul>


<p>These aspects of XAF reports give rise to several development headaches.</p>

<ul>
<li>While script syntax can be checked within the report writer at design time (via the Validate button in the scripts tab), the script code is still brittle.</li>
<li>Errors that result from Script syntax are sometimes only discovered at run time (you can write a unit test to check during build, but we really want to the compiler to tell us).</li>
<li>Refactoring any classes requires a considerable amount of work with the report writer in order to apply any changes to the code within the scripts.</li>
<li>There is no Intellisense in the report writer.</li>
<li>Version control diff comparisons and merging are impossible.</li>
</ul>


<p>The aim of these posts is to provide a two-way conversion process between .repx and C# files. In order to accomplish this we'll be relying on Visual Studio's excellent T4 templating engine.
</span></p>

<h2>Installing T4Toolbox</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 Text Transformation Toolkit</a> is a template based code generation framework which is included with Visual Studio. On top of this <a href="http://www.olegsych.com/">Oleg Sych</a> provides a Visual Studio extension called <a href="http://visualstudiogallery.msdn.microsoft.com/7f9bd62f-2505-4aa4-9378-ee7830371684">T4 Toolbox</a> which adds some additional features.</p>

<p>Install T4 Toolbox by selecting <strong>Tools/Extensions and Updates</strong> from Visual Studio and searching for it.</p>

<p><img src="/images/blog/xaf-report-sync-001.png"></p>

<h2>The ReportSync MainDemo</h2>

<p>Next, download the modified MainDemo application from my <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">GitHub repository</a> and open it in Visual Studio.</p>

<p>First lets look at the embedded reports which I have modified slightly so that they include scripts. I added these scripts via the MainDemo.Win application.</p>

<p>Let's look at the <em>ContactsGroupByPosition.repx</em> file. You will find that there is a section:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="s">&quot;\r\nprivate void xrLabel4_BeforePrint(object sender, System.Drawing.Printing.PrintE&quot;</span> <span class="p">+&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="s">&quot;ventArgs e) {\r\n\txrLabel4.Text = xrLabel4.Text + \&quot; Test!\&quot;;\r\n}\r\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this case, the script has been saved as a string. The other report, which has only slightly more complex script code looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">System</span><span class="p">.</span><span class="n">Resources</span><span class="p">.</span><span class="n">ResourceManager</span> <span class="n">resources</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">get</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_resources</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">resourceString</span> <span class="p">=</span> <span class="s">@&quot;zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPT.....5kIFtEdWVEYXRlXSA8PSAnQEN1cnJlbnREYXRlJwABEFRhc2tzU3RhdGVSZXBvcnQ=&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">_resources</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">XtraReports</span><span class="p">.</span><span class="n">Serialization</span><span class="p">.</span><span class="n">XRResourceManager</span><span class="p">(</span><span class="n">resourceString</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">_resources</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="s">&quot;$this.ScriptsSource&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, the scripts are not even in plain text. They have been serialised to the <em>resources</em> property.</p>

<h2>The MainDemo.Reports assembly</h2>

<p>You will find a new assembly <strong>MainDemo.Reports</strong> which contains a T4 template <em>RepxToCSharp.tt</em>. This is a T4 template which will search for repx files and transform them into much more helpful plain C#.</p>

<p>The template will run every time it is saved. Currently, it depends on code within the MainDemo.Reports assembly, so make sure you have compiled it in Debug mode. Then open the <em>RepxToCSharp.tt</em> and press <code>Ctrl+S</code> to save (and run the T4 transformation).</p>

<h2>The output</h2>

<p>The template will generate two types of output. First, it generates the following report which you should find in <em>RepxToCSharp.txt</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Summary of repx transformation&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Total repx files found                                      :  2
</span><span class='line'>  Total reports generated                                   :  2
</span><span class='line'>  Total reports skipped because unchanged                   :  0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time elapsed: 00:00:02.1762029
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In addition, each repx will have been transformed into two correpsonding files. All the generated files are highlighted in yellow:</p>

<p><img src="/images/blog/xaf-report-sync-002.png"></p>

<p>Now the scripts have been deserialized from the repx and put in a partial class and the remainder of the repx has been transformed into a corresponding <code>XafReport</code> descendant. See for instance, <em>ContactsGroupedByPosition.cs</em> (which stored its scripts as a string) is as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ContactsGroupedByPosition.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_ContactsGroupedByPosition</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel4_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">+</span> <span class="s">&quot; Test!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And <em>TasksStateReport.cs</em> is now like this</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TasksStateReport.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_TasksStateReport</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel1_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is a test</span>
</span><span class='line'>    <span class="n">xrLabel1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel2_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">xrLabel2</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">GetLabel2Text</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetLabel2Text</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Label 2!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>A note about performance</h2>

<p>The process of transforming the repx into C# is quite quick (a couple of seconds per <em>repx</em>), but when you have dozens of reports, it can quickly be tiresome. Therefore, there is a performance optimisation which checksums the repx and skips the transformation if it has not changed.</p>

<p>(In a future version, we will also use a similar checksum in the other direction to determine whether the scripts have been modified).</p>

<h2>Already much better</h2>

<p>Now we have much more useful source files. Versions can be compared easily. The compiler will immediately inform us of any problems with the scripts within our reports.</p>

<p>This is work in progress. Next up, I will be adding the 'reverse'. That is, a new transformation template which looks for scripts which have changed and 'injects' them back into the original <em>repx</em> file.</p>
]]></content>
  </entry>
  
</feed>
