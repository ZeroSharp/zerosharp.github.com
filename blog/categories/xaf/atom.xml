<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xaf | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xaf/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2018-09-18T12:02:44+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smart hiding of the selection boxes in XAF web applications]]></title>
    <link href="http://ZeroSharp.github.com/smart-hiding-of-the-selection-boxes-in-xaf-web-applications/"/>
    <updated>2016-11-06T18:39:00+00:00</updated>
    <id>http://ZeroSharp.github.com/smart-hiding-of-the-selection-boxes-in-xaf-web-applications</id>
    <content type="html"><![CDATA[<p>When an <a href="https://www.devexpress.com/products/net/application_framework/">XAF</a> list view has no selection-based actions available, the selection box still appears in the grid. Users get confused. In this post, we'll look at a workaround.</p>

<h2>The problem</h2>

<p>In the XAF MainDemo, lets make Departments read-only for the User role.</p>

<p><code>c# Updater.cs
userRole.AddTypePermissionsRecursively&lt;Department&gt;(SecurityOperations.Create, SecurityPermissionState.Deny);
userRole.AddTypePermissionsRecursively&lt;Department&gt;(SecurityOperations.Write, SecurityPermissionState.Deny);
userRole.AddTypePermissionsRecursively&lt;Department&gt;(SecurityOperations.Delete, SecurityPermissionState.Deny);
</code></p>

<p>Then start the web application, login as John and navigate to the Departments list view. There is a column selection box, but it serves no purpose. There are no actions that depend on a grid selection.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/selection-visibility-controller-001.png' width='' height='' title='Without the SelectionColumnVisibilityController'><span class='caption-text'>Without the SelectionColumnVisibilityController</span></span></p>

<h2>The fix</h2>

<p>Here is a controller which calculates whether there are any available actions which require one or more rows to be selected. If there are none, the selection box will not appear.</p>

<p>Add the following controller to the MainDemo.Module.Web project. It hides the selection box if there are no actions which depend on a grid selection.</p>

<p>```c# SelectionColumnVisibilityController.cs
using System;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.Web;
using System.Linq;</p>

<p>namespace MainDemo.Module.Web.Controllers
{</p>

<pre><code>public class SelectionColumnVisibilityController : ViewController
{
    public SelectionColumnVisibilityController()
    {
        TargetViewType = ViewType.ListView;
    }

    private bool IsSelectionColumnVisible()
    {
        bool isSelectionColumnRequired = false;
        // remove checkbox if there are no available actions
        foreach (Controller controller in Frame.Controllers)
        {
            if (!controller.Active)
                continue;

            if (controller.Actions.Count == 0)
                continue;

            bool allowEdit = true;
            if ((Frame is NestedFrame) &amp;&amp; (((NestedFrame)Frame).ViewItem is PropertyEditor))
                allowEdit = (bool)((PropertyEditor)((NestedFrame)Frame).ViewItem).AllowEdit;

            foreach (ActionBase action in controller.Actions)
            {
                if (action.SelectionDependencyType == SelectionDependencyType.RequireMultipleObjects)
                {
                    if (action.Active || IsActionInactiveBySelectionContext(action))
                    {
                        if (action.Enabled || IsActionDisabledBySelectionContext(action))
                        {
                            isSelectionColumnRequired = true;
                            break;
                        }
                    }
                }
            }
            if (isSelectionColumnRequired)
                break;
        }
        return isSelectionColumnRequired;
    }

    private bool IsActionInactiveBySelectionContext(ActionBase action)
    {
        if (action.Active)
            return true;
        else
        {
            foreach (string item in action.Active.GetKeys())
            {
                if (item == ActionBase.RequireMultipleObjectsContext || item == ActionBase.RequireSingleObjectContext)
                    continue;
                if (!action.Active[item])
                    return false;
            }
            return true;
        }
    }

    private bool IsActionDisabledBySelectionContext(ActionBase action)
    {
        if (action.Enabled)
            return true;
        else
        {
            foreach (string item in action.Enabled.GetKeys())
            {
                if (item == ActionBase.RequireMultipleObjectsContext ||
                    item == ActionBase.RequireSingleObjectContext ||
                    item == ActionsCriteriaViewController.EnabledByCriteriaKey)
                    continue;
                if (!action.Enabled[item])
                    return false;
            }
            return true;
        }
    }

    protected override void OnViewControlsCreated()
    {
        base.OnViewControlsCreated();
        ASPxGridView grid = ((ListView)this.View).Editor.Control as ASPxGridView;
        if (grid != null)
        {
            grid.Load += grid_Load;
            grid.DataBound += grid_DataBound;
        }
    }

    protected override void OnDeactivated()
    {
        base.OnDeactivated();
        ASPxGridView grid = ((ListView)this.View).Editor.Control as ASPxGridView;
        if (grid != null)
        {
            grid.DataBound -= grid_DataBound;
            grid.Load -= grid_Load;
        }
    }

    void grid_Load(object sender, EventArgs e)
    {
        SetSelectionColumnVisibility(sender, e);
    }

    void grid_DataBound(object sender, EventArgs e)
    {
        SetSelectionColumnVisibility(sender, e);
    }

    private void SetSelectionColumnVisibility(object sender, EventArgs e)
    {
        bool isSelectionColumnVisible = IsSelectionColumnVisible();
        if (!isSelectionColumnVisible)
        {
            var grid = (ASPxGridView)sender;
            var selectionBoxColumn =
                grid.Columns
                    .OfType&lt;GridViewCommandColumn&gt;()
                    .Where(x =&gt; x.ShowSelectCheckbox)
                    .FirstOrDefault();

            if (selectionBoxColumn != null)
            {
                selectionBoxColumn.Visible = false;
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<p>Run the application again and see the difference. Now the grid looks like this. Notice, there is no longer a selection box on the row.</p>

<p><img src="/images/blog/selection-visibility-controller-002.png" title="With the SelectionColumnVisibilityController" ></p>

<p>By the way, this is how it looks with old-style XAF web apps.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/selection-visibility-controller-003.png' width='' height='' title='Without the SelectionColumnVisibilityController'><span class='caption-text'>Without the SelectionColumnVisibilityController</span></span></p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/selection-visibility-controller-004.png' width='' height='' title='With the SelectionColumnVisibilityController'><span class='caption-text'>With the SelectionColumnVisibilityController</span></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An XAF workaround for 'Prevent this page from creating additional dialogs.']]></title>
    <link href="http://ZeroSharp.github.com/an-xaf-workaround-for-prevent-this-page-from-creating-additional-dialogs-dot/"/>
    <updated>2016-05-16T13:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/an-xaf-workaround-for-prevent-this-page-from-creating-additional-dialogs-dot</id>
    <content type="html"><![CDATA[<p>Both Chrome and Firefox have a 'feature' which allows a user to ignore future calls to <code>confirm()</code>. Once this has been checked, any subsequent calls to <code>confirm()</code> return false immediately without showing the window.</p>

<p>In XAF, this behaviour prevents the application from working correctly. For instance, it becomes impossible to confirm a deletion.</p>

<p><img src="/images/blog/prevent-this-page-001.png"></p>

<p>The following controller provides a work around. It injects some javascript into the page wrapping the call to <code>confirm()</code>. The new code detects when the <strong>Prevent this page from creating additional dialogs</strong> checkbox has been checked and returns true instead. The confirmation window still does not appear, but the XAF application works as if the user had pressed confirm instead of cancel.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span># HandleDisabledConfirmationsController.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">ExpressApp</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">ExpressApp</span><span class="p">.</span><span class="n">Web</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Internal</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">namespace</span> <span class="n">NetModule</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Controllers</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">public</span> <span class="n">class</span> <span class="n">HandleDisabledConfirmationsController</span> <span class="o">:</span> <span class="n">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">bool</span> <span class="n">IsChrome</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">RenderUtils</span><span class="p">.</span><span class="n">Browser</span><span class="p">.</span><span class="n">IsChrome</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="n">bool</span> <span class="n">IsFirefox</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">RenderUtils</span><span class="p">.</span><span class="n">Browser</span><span class="p">.</span><span class="n">IsFirefox</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">protected</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">OnFrameAssigned</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">base</span><span class="p">.</span><span class="n">OnFrameAssigned</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">IsChrome</span> <span class="o">||</span> <span class="n">IsFirefox</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">WebWindow</span> <span class="n">window</span> <span class="o">=</span> <span class="n">Frame</span> <span class="n">as</span> <span class="n">WebWindow</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">window</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">window</span><span class="p">.</span><span class="n">CustomRegisterTemplateDependentScripts</span> <span class="o">+=</span> <span class="n">window_CustomRegisterTemplateDependentScripts</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="kt">void</span> <span class="n">window_CustomRegisterTemplateDependentScripts</span><span class="p">(</span><span class="n">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">CustomRegisterTemplateDependentScriptsEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// wrapper for &#39;confirm&#39;</span>
</span><span class='line'>        <span class="n">WebWindow</span> <span class="n">window</span> <span class="o">=</span> <span class="p">(</span><span class="n">WebWindow</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Detect the user has checked the &#39;prevent this page from creating additional dialogs&#39;.</span>
</span><span class='line'>        <span class="c1">// In which case assume all confirmations are accepted, rather than the default rejected</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">confirmWrapper</span> <span class="o">=</span> <span class="err">@</span><span class="s">&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">window</span><span class="p">.</span><span class="n">nativeConfirm</span> <span class="o">=</span> <span class="n">window</span><span class="p">.</span><span class="n">confirm</span><span class="p">;</span>
</span><span class='line'><span class="n">window</span><span class="p">.</span><span class="n">confirm</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">timeBefore</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">confirmBool</span> <span class="o">=</span> <span class="n">nativeConfirm</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">timeAfter</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">timeAfter</span> <span class="o">-</span> <span class="n">timeBefore</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">350</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">confirmBool</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">confirmBool</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="s">&quot;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">e</span><span class="p">.</span><span class="n">Page</span><span class="p">.</span><span class="n">ClientScript</span><span class="p">.</span><span class="n">RegisterClientScriptBlock</span><span class="p">(</span><span class="n">GetType</span><span class="p">(),</span> <span class="s">&quot;WrapConfirmations&quot;</span><span class="p">,</span> <span class="n">confirmWrapper</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">protected</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">OnDeactivated</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">IsChrome</span> <span class="o">||</span> <span class="n">IsFirefox</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">WebWindow</span> <span class="n">window</span> <span class="o">=</span> <span class="n">Frame</span> <span class="n">as</span> <span class="n">WebWindow</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">window</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">window</span><span class="p">.</span><span class="n">CustomRegisterTemplateDependentScripts</span> <span class="o">-=</span> <span class="n">window_CustomRegisterTemplateDependentScripts</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">OnDeactivated</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The controller works by timing the milliseconds to close the confirmation window. If it is less than 350 milliseconds we can assume the confirmation window never opened owing to the checkbox. In this scenario, it returns true (confirm) rather than false (cancel) in order for XAF to function correctly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 2015.2 review part 2]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-2/"/>
    <updated>2015-12-10T09:43:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-2</id>
    <content type="html"><![CDATA[<p>This is the second and final dive into some of the new DevExpress XAF 2015.2 features. The <a href="/devexpress-15-dot-2-review-part-1/">first part</a> covers the Report Designer and the new XML serialisation.</p>

<h2>Batch editing</h2>

<p>Another feature I'm excited about is the support for batch editing within the web application grids.</p>

<p>Let's see what happens when combined with the validation rules. What happens if I edit two rows but only one has a validation problem - does the whole batch get rejected? Or just the row with the problem?</p>

<p>First I modified the edit mode of the Tasks grid to <code>Batch</code> via the model.</p>

<p><img src="/images/blog/devexpress-15-2-review-001.png"></p>

<p>Then I added a new <code>RuleRequiredField</code> validation rule via the model.</p>

<p><img src="/images/blog/devexpress-15-2-review-002.png"></p>

<p>I started up the MainDemo application and navigated to the Tasks view and tried to delete the subject of multiple rows at the same time.</p>

<p><img src="/images/blog/devexpress-15-2-review-003.png"></p>

<p>I never even got to press Save because of another new 15.2 feature: <a href="https://community.devexpress.com/blogs/eaf/archive/2015/11/24/xaf-validation-module-enhancements-for-windows-and-the-web-coming-soon-in-v15-2.aspx">inplace validation</a>! The rules are being validated <em>without</em> a round trip to the server!</p>

<p>So let's try another way. <em>Inplace Validation</em> does not work with all rule types, so I deleted my <code>RuleRequiredField</code> from the model and instead added a new <code>RuleFromBoolProperty</code> to the <code>DemoTask</code> object as follows:</p>

<p>```c#
[MemberDesignTimeVisibility(false)]
[RuleFromBoolProperty("SubjectIsRequired",</p>

<pre><code>DefaultContexts.Save, 
"Subject is required.", 
UsedProperties = "Subject", 
SkipNullOrEmptyValues = false)]
</code></pre>

<p>public bool IsSubjectRequired
{</p>

<pre><code>get
{
    return !String.IsNullOrWhiteSpace(Subject);
}
</code></pre>

<p>}
```</p>

<p>Now we go back to the list view for Task and try to set multiple subjects to empty.</p>

<p><img src="/images/blog/devexpress-15-2-review-004.png"></p>

<p>Fantastic! This time the broken rules appear for each row and it is quite clear which message belongs to which object.</p>

<p>So the batch editing makes use of inplace validation when it can, but handles more complex validation rules well too. This is an excellent combination because the inpalce validation will help to make the client seem very quick and responsive.</p>

<h2>Conclusion</h2>

<p>This concludes my review of DevExpress 2015.2. We've looked in some detail at two of the most impressive new features - the way reports are serialised and the improvements to client-side validation. These changes help with performance and ease of maintenance and I'm very happy to see that the DevExpress team has focused on these areas. Looking forward to the 2016 releases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 2015.2 review part 1]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1/"/>
    <updated>2015-12-09T14:43:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1</id>
    <content type="html"><![CDATA[<p>Last week, DevExpress released 2015.2.3, their second major version of the year.</p>

<p>There are already some good blog posts about the changes:</p>

<ul>
<li><a href="http://www.codeproject.com/Tips/1060260/Whats-New-for-XAF">Michael Bogaerts</a></li>
<li><a href="http://vimarx.com/blog/92/">Gustavo Marzioni</a></li>
<li><a href="https://www.devexpress.com/Subscriptions/New-2015.xml?product=xaf">DevExpress What's New</a></li>
</ul>


<p>Rather than repeat general overviews provided in these, this two-part blog post is more of a 'deep dive'. In particular I'll be looking at two of the new features in the expressApp Framework (XAF).
Today I'll cover the new XML serialisation in the report designer. Tomorrow's post will examine the new batch editing features.</p>

<h2>Reports</h2>

<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report that v1 reports are still very much present.'>
Reporting is definitely one of the areas where XAF has progressed the most in recent versions. There is now an in-browser report designer (since 14.2) and an alternative implementation of the reports (reports v2, since 13.2).</p>

<p>In this release, I was a little worried that the support for Reports v1 would be deprecated, since our production system has over 100 custom reports and we have not yet looked for an easy way to migrate these to v2. I'm happy to report that v1 reports are still very much present.
</span></p>

<p>However there are also a number of new features in v2 Reports, not least of which is the ability to store the report's layout in XML. There's currently not a lot of documentation about the XML serialization, so let's dig in and see what we can discover.</p>

<h3>XML serialization deep dive</h3>

<p>First I ran the demo and ran the <em>Copy Predefined Report</em> on the Contacts Report.</p>

<p>Then I ran the report designer and added a dummy <code>OnBeforePrint()</code> script to one of the table's cells.</p>

<p><code>c#
private void xrTableCell8_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
  var x = 23;
}
</code></p>

<p>Then, in the MainDemo's Updater.cs file, I placed the following code.
```c#
var reportData = ObjectSpace.FindObject<ReportDataV2>(new BinaryOperator("DisplayName", "Contacts Report") &amp; new BinaryOperator("IsPredefined", new OperandValue(false)));
if (reportData != null)
{</p>

<pre><code>var report = ReportDataProvider.ReportsStorage.LoadReport(reportData);
report.SaveLayoutToXml(@"C:\Temp\ContactsReport.xml");
report.SaveLayout(@"C:\Temp\ContactsReport.repx");
</code></pre>

<p>}
```</p>

<p>This creates two output files. One of them contains the familiar <em>.repx</em> format. The other contains the newer <em>.xml</em> serialization.</p>

<p>The contents of the XML file is displayed below and is 77 lines long.</p>

<p><div><script src='https://gist.github.com/f085bf10dd65ace5d229.js?file=ContactReport.xml'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>By comparison, the <a href="https://gist.github.com/shamp00/f085bf10dd65ace5d229#file-contactsreport-repx">ContactReport.repx</a> is 408 lines long and much harder to read.</p>

<p>As you can see the XML file is <em>much</em> smaller and simpler than the <em>.repx</em> file. At first I didn't believe it contained all the necessary information, so I started up the MainDemo WinForms application, created a blank new report and imported the layout and the layout looks correct and the preview loads with data as expected.</p>

<h3>Scripts</h3>

<p>What about scripts? Are they serialized in the xml version? You bet. In the XML export you can see this has been serialised near the top of the file.</p>

<p><code>xml
ScriptsSource=
   "&amp;#xD;&amp;#xA;private void xrTableCell8_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e)
   {&amp;#xD;&amp;#xA;  var x = 23;&amp;#xD;&amp;#xA;}&amp;#xD;&amp;#xA;"
</code></p>

<h3>Setup</h3>

<p>In order to use this new XML serialization of report layouts, you must set the ReportsV2 module to use it.</p>

<p><code>c#
reportsModuleV2.ReportStoreMode = ReportStoreModes.XML
</code></p>

<p>This will most likely invalidate any reports which have already been serialized to the database. There are some notes on how to fix this <a href="https://www.devexpress.com/Support/Center/Question/Details/T275363">here</a>.</p>

<h3>Default for new projects</h3>

<p>What about new projects? I created a new solution and chose <em>DevExpress 15.2 XAF Solution Wizard</em> as the type of solution and added the reports module. Now when I navigate to the <code>WinApplication.Designer.cs</code> file, I find:</p>

<p><code>c#
//
// reportsModuleV2
//
this.reportsModuleV2.ReportDataType = typeof(DevExpress.Persistent.BaseImpl.ReportDataV2);
this.reportsModuleV2.ReportStoreMode = DevExpress.ExpressApp.ReportsV2.ReportStoreModes.XML;
</code></p>

<p>So the default storage method for new projects is now XML.</p>

<h3>Conclusion</h3>

<p>The XML serialisation looks like a considerable upgrade to the mechanism for storing, loading and saving reports. Now I just need to find a good way of converting my existing v1 reports... Perhaps a future blog post.</p>

<h2>Coming up</h2>

<p>Tomorrow I'll be looking at the new <a href="https://community.devexpress.com/blogs/eaf/archive/2015/11/24/xaf-validation-module-enhancements-for-windows-and-the-web-coming-soon-in-v15-2.aspx">batch editing in grids</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 3]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3/"/>
    <updated>2015-09-16T09:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report there is a considerable improvement under load in version 15.1.'>
This is the third part of a <a href="/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2">series</a> about migrating a large application from XAF 12.1 to XAF 15.1. In this part I will compare the results of a simple stress test between the versions.</p>

<p>I have described in previous posts how to <a href="/load-testing-xaf-overview/">stress test XAF applications</a>. One of our most basic tests is to simulate 25 users cycling through all the navigation tabs for an hour. I'm happy to report there is a considerable improvement under load in version 15.1.</p>

<p>(Note that we purposefully stress test against a single web application so that we can compare apples with apples. In production we have multiple instances load-balanced.)</p>

<p>Here is an interactive summary of the 15.1 results:
</span></p>

<p>Here is version 15.1. There were zero errors and 382 completed scripts.</p>

<p>By comparison, the same test against DevExpress 12.1 yielded only 258 completions. So 15.1 shows a 48% performance improvement over 12.1.</p>

<p><iframe class="cmd" src="https://load.wpm.neustar.biz/load/test/share/e4c5e109f8f04ceebd72cdb5c93eb1c2" width="1024" height="512"></p>
]]></content>
  </entry>
  
</feed>
