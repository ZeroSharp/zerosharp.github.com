<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xaf | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xaf/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2015-06-03T21:59:22+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing slow debugging of ASP.NET applications]]></title>
    <link href="http://ZeroSharp.github.com/fixing-slow-debugging-of-asp-dot-net-applications/"/>
    <updated>2015-06-03T21:31:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fixing-slow-debugging-of-asp-dot-net-applications</id>
    <content type="html"><![CDATA[<p>For a while I've noticed an annoying slowness when debugging ASP.NET applications from Visual Studio. Just after every page load it takes about a second before the buttons become clickable. I noticed mostly when debugging XAF applications, perhaps because the pages are quite complex.</p>

<p>Turns out the culprit is something called <a href="http://www.asp.net/visual-studio/overview/2013/using-browser-link">Browser Link</a> which was introduced in Visual Studio 2013. It's enabled by default.</p>

<p>To turn it off you can turn it off from the menu:</p>

<p><img src="images/blog/browserlink-001.png"></p>

<p>Or you can add the following to your web.config file.
<code>xml
&lt;appSettings&gt;
  &lt;add key="vs:EnableBrowserLink" value="false"/&gt;
&lt;/appSettings&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 14.2 review]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-14-dot-2-review/"/>
    <updated>2015-01-20T08:35:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-14-dot-2-review</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The truly outstanding new feature is the ASP.NET report writer'>
This post is an overview of the brand new version XAF 14.2. The truly outstanding new feature is the ASP.NET report writer which is now available in all XAF applications.</p>

<p>A few months ago, we lost a potential sale because the customer wanted the ability to create custom reports from within the browser. We told them it was impossible to provide a fully-fledged report designer within our web application - but the DevExpress guys have done it! And how! </span></p>

<h2>The web-based report designer</h2>

<p>Let's fire up the MainDemo application and navigate to the reports view. The first thing to notice is that there is a new action <em>Show Report Designer</em>.</p>

<p><img src="/images/blog/devexpress-14-2-review-001.png"></p>

<p>The designer action is disabled because the selected report is <em>predefined</em>. Predefined reports are a feature of Reports v2 which were introduced in version 13.2 (<a href="/devexpress-13-dot-2-review-part-1">see my previous review</a>). So first, we clone the existing predefined report. I renamed the copy (via the edit button) so that we can tell them apart.</p>

<p><img src="/images/blog/devexpress-14-2-review-002.png"></p>

<p>Now the <em>Show Report Designer</em> action is enabled. Let's click it. <em>Whoa! That's one impressive user interface for a web application!</em></p>

<p><img src="/images/blog/devexpress-14-2-review-003.png"></p>

<p>Let's add a chart and a few controls. I thought (incorrectly) that the link to the domain model might be somewhat lacking because the report designer is not designed specifically for XAF (you can also use it with non-XAF ASP.NET or ASP.NET MVC applications) but navigating the available domain objects to select a property seemed very natural and simple.</p>

<p><img src="/images/blog/devexpress-14-2-review-005.png"></p>

<p>I had a few little mouse issues while trying to resize or move controls, and there were a couple of places where the interface seemed slightly sluggish, but these were very minor issues. In general the designer is slick and easy to use. I also had a little difficulty finding the <em>Save</em> button, but here it is:</p>

<p><img src="/images/blog/devexpress-14-2-review-007.png"></p>

<p>And here's the live output after my modifications.</p>

<p><img src="/images/blog/devexpress-14-2-review-006.png"></p>

<p>You can also start from scratch with a new blank report.</p>

<p><img src="/images/blog/devexpress-14-2-review-004.png"></p>

<p>This report designer is an <strong>extremely impressive achievement</strong>. I played around with it for over an hour and it did not crash once. I managed to implement everything I tried including a chart, a bar code and a new data field.</p>

<p>There are some features missing from the web-based report designer compared to the Windows Forms version. Most significant is the ability to attach events and scripts to controls. Here is a <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument14651">full feature comparison table</a>.</p>

<p>I had a quick look for the tools they used to implement it. It looks like it uses <a href="https://jquery.com">jQuery</a>, <a href="https://jqueryui.com">jQuery.UI</a> and <a href="https://knockoutjs.com">knockout.js</a> and you can automatically bundle the required libraries via a new setting in the web.config. There is <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument17558">some more information here</a>.</p>

<p>On the whole I am utterly impressed. Hats off to the DevExpress team!</p>

<h2>Other new features in XAF 14.2</h2>

<p>The new 14.2 includes several other new features. These include the ability to store user settings in the data store as well as improvements to the speed of the grids. For a full list of the new features and improvements see <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/18/xaf-brand-new-module-amp-features-for-both-windows-and-the-web-coming-soon-in-v14-2.aspx">here</a> and <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/20/xaf-enhancements-to-existing-features-amp-performance-tuning-coming-soon-in-v14-2.aspx">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/elmah-with-devexpress-xaf/"/>
    <updated>2014-10-08T15:45:00+01:00</updated>
    <id>http://ZeroSharp.github.com/elmah-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/p/elmah/">ELMAH (Error Logging Modules and Handlers)</a> is an open source library for logging unhandled exceptions. This post explains how to get it running with the <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> main demo.</p>

<p>A couple of amazing facts about ELMAH.</p>

<ul>
<li>It has been around since 2004!</li>
<li>It was written by <a href="http://www.raboof.com/">Atif Aziz</a> who happens to be an old school-friend from the International School of Geneva.</li>
</ul>


<p>XAF provides <a href="https://documentation.devexpress.com/#xaf/CustomDocument2704">quite extensive error handling options</a> out of the box, but I have found Elmah better suited to production environments because of the ability to remotely view the full error log.</p>

<h2>Setting up</h2>

<p>First, get the ELMAH package via NuGet into the MainDemo.Web project. ELMAH provides dozens of different methods of persisting the error log. For this example we'll choose one of the simplest. Make sure you select the <em>ELMAH on XML Log</em> package.</p>

<p><img src="/images/blog/xaf-with-elmah-001.png"></p>

<p>NuGet makes several automatic modifications to the <em>web.config</em>. Unfortunately, these are not quite accurate enough for XAF. The changes you need to make are detailed below:</p>

<p>Add a <code>&lt;configSection&gt;</code> for ELMAH as alongside the existing devExpress one.</p>

<p>```xml web.config
  <configSections></p>

<pre><code>&lt;sectionGroup name="devExpress"&gt;...&lt;/sectionGroup&gt; &lt;!-- this should already exist--&gt;
&lt;sectionGroup name="elmah"&gt; &lt;!-- this is new--&gt;
  &lt;section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" /&gt;
  &lt;section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" /&gt;
  &lt;section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" /&gt;
  &lt;section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" /&gt;
 &lt;/sectionGroup&gt;
</code></pre>

<p>  </configSections>
```</p>

<p>Your <code>&lt;system.webServer&gt;</code> section should look like this:</p>

<p>```xml web.config
  &lt;system.webServer></p>

<pre><code>&lt;handlers&gt;...&lt;/handlers&gt; &lt;!-- This is unchanged --&gt;
&lt;validation validateIntegratedModeConfiguration="false" /&gt;
&lt;modules&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" preCondition="managedHandler" /&gt;
  &lt;add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" preCondition="managedHandler" /&gt;
  &lt;add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" preCondition="managedHandler" /&gt;
&lt;/modules&gt;
</code></pre>

<p>  &lt;/system.webServer>
```</p>

<p>Add a <code>&lt;location&gt;</code> for the path <em>elmah.axd</em> (alongside the existing <code>&lt;location&gt;</code> tags).</p>

<p>```xml web.config
  <location path="elmah.axd" inheritInChildApplications="false"></p>

<pre><code>&lt;system.web&gt;
  &lt;httpHandlers&gt;
    &lt;add verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" /&gt;
  &lt;/httpHandlers&gt;
  &lt;!-- 
    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for 
    more information on using ASP.NET authorization securing ELMAH.

  &lt;authorization&gt;
    &lt;allow roles="admin" /&gt;
    &lt;deny users="*" /&gt;  
  &lt;/authorization&gt;
  --&gt;  
&lt;/system.web&gt;
&lt;system.webServer&gt;
  &lt;handlers&gt;
    &lt;add name="ELMAH" verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" preCondition="integratedMode" /&gt;
  &lt;/handlers&gt;
&lt;/system.webServer&gt;
</code></pre>

<p>  </location>
```</p>

<p>Add a new <code>&lt;elmah&gt;</code> section. I put mine just before the final <code>&lt;/configuration&gt;</code> tag.</p>

<p>```xml web.config
  <elmah></p>

<pre><code>&lt;errorLog type="Elmah.XmlFileErrorLog, Elmah" logPath="~/App_Data/Elmah.Errors" /&gt;
&lt;!--
    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for 
    more information on remote access and securing ELMAH.
--&gt;
&lt;security allowRemoteAccess="false" /&gt;
</code></pre>

<p>  </elmah>
```</p>

<p>Now modify <em>HttpModules.Web.Config</em> to look like this:</p>

<p><code>xml HttpModules.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpModules&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" /&gt;
  &lt;add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" /&gt;
  &lt;add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" /&gt;
&lt;/httpModules&gt;
</code></p>

<p>Now we need to extend XAF's standard error handling. Create a new class in the web application.</p>

<p>```c#
public class ElmahErrorHandling : ErrorHandling
{</p>

<pre><code>protected override void LogException(ErrorInfo errorInfo)
{
    base.LogException(errorInfo);

    if (errorInfo.Exception != null)
        Elmah.ErrorSignal.FromCurrentContext().Raise(errorInfo.Exception);
}
</code></pre>

<p>}
```</p>

<p>And then modify <em>Global.asax.cs</em> to instantiate the new class</p>

<p>```c#</p>

<pre><code>    protected void Application_Start(object sender, EventArgs e) {
        ErrorHandling.Instance = new ElmahErrorHandling(); // &lt;---this line is new
        ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</code></pre>

<h1>if DEBUG</h1>

<pre><code>        TestScriptsManager.EasyTestEnabled = true;
</code></pre>

<h1>endif</h1>

<pre><code>    }
</code></pre>

<p>```</p>

<p>The complete files are available with the <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">source code</a>.</p>

<p>Now run the application and trigger an unhandled exception. Change the URL to something that does not exist. Or open any detail view and modify the URL so that the Guid in the <em>ShortcutObjectKey</em> is invalid (replace a digit with an 'X'). Then the application error page appears.</p>

<p><img src="/images/blog/xaf-with-elmah-002.png"></p>

<p>Then return to the application and change the URL to <code>Elmah.axd</code>. You are looking at the log of all unhandled exceptions.</p>

<p><img src="/images/blog/xaf-with-elmah-003.png"></p>

<p>And for each exception, you can view the full details of any logged exception including coloured stack trace and full server variables.</p>

<p><img src="/images/blog/xaf-with-elmah-004.png"></p>

<h2>ELMAH options</h2>

<p>By default, ELMAH is configured to disallow remote access to the error logs -  only a local user can get to <em>elmah.axd</em>. If you take care of the security implications it can be very useful to enable remote access and  monitor the logs on your production servers.</p>

<p>We chose to use an XML file for each error but ELMAH is entirely pluggable. There are dozens of alternatives for persisting the error log including Sql Server, an RSS feeds, to Twitter, even to <a href="http://code.google.com/p/elmah/wiki/ProwlingErrors">an iPhone app</a>. There are even third party sites such as <a href="http://elmah.io">elmah.io</a> who will host your error logs for you.</p>

<p>One of the advantages of using XML files is that the files can be copied to another machine. If you look in <em>MainDemo.Web\App_Data\Elmah.Errors</em>, you will find the resulting xml files.</p>

<p><img src="/images/blog/xaf-with-elmah-005.png"></p>

<p>You can just copy these files to another installation's <em>Elmah.Errors</em> folder and the log will show up when you visit <em>Elmah.axd</em>.</p>

<p>One final note. ELMAH was developed for ASP.NET applications and web services, but it is possible to get it to work with other types of applications such as Windows Forms, Windows Service or console applications. Check out <a href="https://stackoverflow.com/questions/841451/using-elmah-in-a-console-application">this StackOverflow question</a>.</p>

<p>The source code for this example is <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A web UI performance tip for XAF web applications]]></title>
    <link href="http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications/"/>
    <updated>2014-03-31T10:16:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to raise your awareness of a toggle which exists in the <a href="http://www.devexpress.com/xaf/">DevExpress XAF framework</a> which can significantly improve UI performance in the web application.</p>

<p><span class='pullquote-right' data-pullquote='In fact the general responsiveness of the entire web-application seems much better.'>
The biggest XAF project I work with has one very complex business object. The layout for this screen includes about 100 properties, several nested tabs, some custom editors, several collection properties and a whole lot of <a href="https://documentation.devexpress.com/#Xaf/CustomDocument3286">Conditional Appearance</a> rules. It was very sluggish to navigate - it was taking several seconds to load the detail view and then it was very slow switching between tabs. Switching to edit mode was also slow.</p>

<p>Last week, I almost accidentally changed the value of <code>DelayedViewItemsInitialization</code> to <code>false</code> and noticed that the UI speed was much much better. In fact the general responsiveness of the entire web-application seems much better.</p>

<p>In order to give it a whirl, navigate to the WebApplication.cs file (normally in the ApplicationCode subfolder of your web project) and modify the constructor as follows:</p>

<p></span></p>

<p>```c#
public MainDemoWebApplication() {</p>

<pre><code>InitializeComponent();
this.DelayedViewItemsInitialization = false;
</code></pre>

<p>}
```</p>

<p>Certainly this is not without consequences, and I would urge a careful reading of the <a href="https://documentation.devexpress.com/#xaf/DevExpressExpressAppXafApplication_DelayedViewItemsInitializationtopic">relevant documentation</a>. To be honest, I still don't really understand why my detail view is so much slower without this change. I have tried to isolate the cause without much success and I will update this post if I find anything new. But if some of your detail views seem overly slow, certainly try it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning a new development machine with BoxStarter]]></title>
    <link href="http://ZeroSharp.github.com/provisioning-a-new-development-machine-with-boxstarter/"/>
    <updated>2014-02-25T15:29:00+00:00</updated>
    <id>http://ZeroSharp.github.com/provisioning-a-new-development-machine-with-boxstarter</id>
    <content type="html"><![CDATA[<p>I've been playing around with <a href="http://boxstarter.org/">Boxstarter</a> to configure my entire development environment with hardly any user intervention.</p>

<p><img class="right" src="/images/blog/boxstarter-001.png" width="300"></p>

<p>Here are the steps:</p>

<ol>
<li>Install Windows 8.1 on a new machine.</li>
<li>Login.</li>
<li>Open a command prompt and enter the following.
<code>
START http://boxstarter.org/package/nr/url?http://bit.ly/1kapDXI
</code></li>
</ol>


<p>That's it!</p>

<p>Boxstarter will self-install via ClickOnce, asking for various confirmations and ultimately it will prompt you for your login password. (This gets saved and encrypted to allow for unattended reboots and re-logins during the installation). Then the real magic begins. Boxstarter downloads and installs all your tools and configures your environment, rebooting as necessary. An hour later your full development setup is installed, including Visual Studio 2013, any VS extensions, any other programs and tools, all the browsers you need, all critical Windows updates, etc. You just saved yourself a couple of days of work and a lot of hassle.</p>

<p>How does Boxstarter know what to install? There's a Powershell script located at that bitly address. Let's take a look at the script.</p>

<p>```powershell</p>

<h1>Boxstarter options</h1>

<p>$Boxstarter.RebootOk=$true # Allow reboots?
$Boxstarter.NoPassword=$false # Is this a machine with no login password?
$Boxstarter.AutoLogin=$true # Save my password securely and auto-login after a reboot</p>

<h1>Basic setup</h1>

<p>Update-ExecutionPolicy Unrestricted
Set-ExplorerOptions -showHidenFilesFoldersDrives -showProtectedOSFiles -showFileExtensions
Enable-RemoteDesktop
Disable-InternetExplorerESC
Disable-UAC
Set-TaskbarSmall</p>

<p>if (Test-PendingReboot) { Invoke-Reboot }</p>

<h1>Update Windows and reboot if necessary</h1>

<p>Install-WindowsUpdate -AcceptEula
if (Test-PendingReboot) { Invoke-Reboot }</p>

<h1>Install Visual Studio 2013 Professional</h1>

<p>cinstm VisualStudio2013Professional -InstallArguments WebTools
if (Test-PendingReboot) { Invoke-Reboot }</p>

<h1>Visual Studio SDK required for PoshTools extension</h1>

<p>cinstm VS2013SDK
if (Test-PendingReboot) { Invoke-Reboot }</p>

<p>cinstm DotNet3.5 # Not automatically installed with VS 2013. Includes .NET 2.0. Uses Windows Features to install.
if (Test-PendingReboot) { Invoke-Reboot }</p>

<h1>VS extensions</h1>

<p>Install-ChocolateyVsixPackage PowerShellTools http://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597/file/112013/6/PowerShellTools.vsix
Install-ChocolateyVsixPackage WebEssentials2013 http://visualstudiogallery.msdn.microsoft.com/56633663-6799-41d7-9df7-0f2a504ca361/file/105627/31/WebEssentials2013.vsix
Install-ChocolateyVsixPackage T4Toolbox http://visualstudiogallery.msdn.microsoft.com/791817a4-eb9a-4000-9c85-972cc60fd5aa/file/116854/1/T4Toolbox.12.vsix
Install-ChocolateyVsixPackage StopOnFirstBuildError http://visualstudiogallery.msdn.microsoft.com/91aaa139-5d3c-43a7-b39f-369196a84fa5/file/44205/3/StopOnFirstBuildError.vsix</p>

<h1>AWS Toolkit is now an MSI available here http://sdk-for-net.amazonwebservices.com/latest/AWSToolsAndSDKForNet.msi (no chocolatey package as of FEB 2014)</h1>

<h1>Install-ChocolateyVsixPackage AwsToolkit http://visualstudiogallery.msdn.microsoft.com/175787af-a563-4306-957b-686b4ee9b497</h1>

<h1>Other dev tools</h1>

<p>cinstm fiddler4
cinstm beyondcompare
cinstm ProcExp #cinstm sysinternals
cinstm NugetPackageExplorer
cinstm windbg
cinstm Devbox-Clink
cinstm TortoiseHg</p>

<h1>cinstm VisualHG # Chocolatey package is corrupt as of Feb 2014</h1>

<p>cinstm linqpad4
cinstm TestDriven.Net
cinstm ncrunch2.vs2013</p>

<h1>Browsers</h1>

<p>cinstm googlechrome
cinstm firefox</p>

<h1>Other essential tools</h1>

<p>cinstm 7zip
cinstm adobereader
cinstm javaruntime</p>

<h1>cinst Microsoft-Hyper-V-All -source windowsFeatures</h1>

<p>cinst IIS-WebServerRole -source windowsfeatures
cinst IIS-HttpCompressionDynamic -source windowsfeatures
cinst IIS-ManagementScriptingTools -source windowsfeatures
cinst IIS-WindowsAuthentication -source windowsfeatures</p>

<p>Install-ChocolateyPinnedTaskBarItem "$($Boxstarter.programFiles86)\Google\Chrome\Application\chrome.exe"
Install-ChocolateyPinnedTaskBarItem "$($Boxstarter.programFiles86)\Microsoft Visual Studio 12.0\Common7\IDE\devenv.exe"
```</p>

<p>Boxstarter works with <a href="http://chocolatey.org/">Chocolatey</a> and you can install anything with a Chocolatey package very easily. As you can see, most of the lines begin with <code>cinstm</code> which is a shortcut for <em>install with Chocolatey if missing</em>. You will notice there are also commands for configuring Windows and IIS options. There is plenty of additional information on the <a href="http://boxstarter.org/WhyBoxstarter">Boxstarter</a> documentation.</p>

<h2>What about DevExpress?</h2>

<p>Want to install your registered CodeRush and DexExpress components? Easy. Since the installation packages are not available on chocolatey, you will have to put them on a network share accessible from the newly provisioned machine.</p>

<p>Then add the following to your boxstarter script:</p>

<p>```powershell</p>

<h1>Set the following to the network location of the DevExpress installers</h1>

<p>$pathToDevExpressComponentsSetup = "\somewhere\DevExpressComponents-13.2.7.exe"
$pathToDevExpressComponentsSetup = "\somewhere\DevExpressCodeRush-13.2.7.exe"</p>

<h1>Command line options for unattended installation</h1>

<h1>(/EULA is not required for versions earlier than 10.2.10)</h1>

<p>$silentArgs = "/Q /EMAIL:myaddress@company.com /CUSTOMERID:A1111 /PASSWORD:MYPASSWORD /DEBUG /EULA:accept"</p>

<h1>Install .NET Components</h1>

<p>Install-ChocolateyInstallPackage "DevExpressComponents_13.2" "EXE" $silentArgs $pathToDevExpressComponentsSetup</p>

<h1>Install CodeRush</h1>

<p>Install-ChocolateyInstallPackage "DevExpressCodeRush_13.2" "EXE" $silentArgs $pathToDevExpressCodeRushSetup
```</p>

<p><strong>Warning! don't put your DevExpress passwords on a public website.</strong></p>

<p>There are plenty of other ways of <em>launching</em> Boxstarter. You can <a href="https://chocolatey.org/packages/boxstarter">install Boxstarter via Chocolatey</a>. You can <a href="http://boxstarter.org/InstallingPackages">run Boxstarter remotely</a>. If you are putting passwords in the installation script, you should choose one of the other options.</p>

<h2>Advantages</h2>

<ul>
<li>I save time!</li>
<li>I can now version control the exact development environment along with the source code!</li>
<li>Onboarding new and junior developers is much quicker.</li>
<li>In a pinch, I can use this method to quickly provision a development machine with Azure or Amazon Web Services</li>
</ul>


<h2>One Last Hiccup</h2>

<p>While I was testing my BoxStarter script I used the Windows 8.1 image from <a href="http://www.modern.ie/">http://www.modern.ie/</a>. Much later in the process I realised that Modern.IE only supplies 32-bit images and the chocolatey installer for Visual Studio extensions currently works only with 64-bit Windows.</p>
]]></content>
  </entry>
  
</feed>
