<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xaf | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xaf/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-10-07T09:27:30+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A review of NDepend 5]]></title>
    <link href="http://ZeroSharp.github.com/a-review-of-ndepend-5/"/>
    <updated>2013-10-02T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-review-of-ndepend-5</id>
    <content type="html"><![CDATA[<p>NDepend is a commercial static analysis tool for .NET managed code. It's been around a long time (since 2004!). Version 5 was just released and in this post I'm going to try it out on the DevExpress MainDemo.</p>

<p><span class='pullquote-right' data-pullquote='In version 5, a lot of work has been done to improve the learning curve.'>
In the past I have always thought of NDepend as a complex tool. I was never sure where to start. In version 5, a lot of work has been done to improve the learning curve. The installation process is easy and a wizard very quickly points you in the right direction.</p>

<p>After <a href="http://ndepend.com/NDependDownload.aspx">downloading the v5 trial</a> and running the installation you get to the following screen.
</span></p>

<p><img src="/images/blog/ndepend/ndepend-001.png"></p>

<p>You cannot miss that big red arrow. In fact, it's even animated in the actual product. Click on it and choose a Visual Studio solution to analyse. I'm going to navigate to the DevExpress MainDemo 13.1.</p>

<p>So long as the project has been built at some point, NDepend works out what to analyse (otherwise you'll get helpful warnings).</p>

<p><img src="/images/blog/ndepend/ndepend-003.png"></p>

<p>It is very fast and we get to this help screen.</p>

<p><img src="/images/blog/ndepend/ndepend-004.png"></p>

<p>Choose the dashboard.</p>

<p><img src="/images/blog/ndepend/ndepend-005.png"></p>

<p>Now that's a lot of information, but it's all well presented and easy to navigate. Let's focus on the worst: I can see <em>2 Critical Rules Violated</em>. Drill down to find out more:</p>

<p><img src="/images/blog/ndepend/ndepend-009.png"></p>

<p>It's complaining that we have classes with duplicate names in our projects. In the pane on the left we can see what they are: 3 types named <code>MainDemoWinApplication</code>, 3 named <code>Program</code>, <em>etc.</em> And sure enough there are: <em>MainDemo.Win</em>, <em>MainDemo.Win.Mdi</em> and <em>MainDemo.Win.Ribbon</em> all duplicate those class names.</p>

<p>We can also see 2 <code>TaskAnalysis1LayoutUpdater</code> types and a quick search reveals that there's one in the web module and another in the win module.</p>

<p>So NDepend has correctly discovered some potential issues. As we XAF fans know, this one is not really a problem, because those modules are never loaded into the same AppDomain, but nevertheless the information is accurate and relevant.</p>

<p>Lets have a brief look at the other screens. The dependency graph:</p>

<p><img src="/images/blog/ndepend/ndepend-006.png"></p>

<p>With a million options.</p>

<p><img src="/images/blog/ndepend/ndepend-010.png"></p>

<p>A dependency matrix.</p>

<p><img src="/images/blog/ndepend/ndepend-007.png"></p>

<p>A metrics view showing class and assembly sizes.</p>

<p><img src="/images/blog/ndepend/ndepend-008.png"></p>

<p>All with reams of helpful documentation.</p>

<p><img src="/images/blog/ndepend/ndepend-011.png"></p>

<p>Overall, the tool felt fast, responsive and stable. I've focused on the user interface aspects, but there is so much more. Some things you can do:</p>

<ul>
<li>Create your own analysis rules</li>
<li><a href="http://www.ndepend.com/Doc_CQLinq_Syntax.aspx#Edition">Query your own code with LINQ</a></li>
<li>Run analysis from <a href="http://www.ndepend.com/NDependConsole.aspx">the command line</a></li>
<li>Run from within Visual Studio</li>
<li>Add output to continuous integration (<a href="http://www.ndepend.com/Doc_CI_TeamCity.aspx">TeamCity</a>, <a href="http://www.ndepend.com/Doc_CI_CCNet.aspx">CruiseControl.NET</a>, etc.)</li>
<li>Track <a href="http://www.ndepend.com/Doc_Trend.aspx">trends and progress over time</a></li>
</ul>


<p>NDepend shines at providing a high-level overview of code quality and as such it is a very useful addition to any developer's toolkit. There are some scenarios where NDepend would be particularly useful:</p>

<ul>
<li>For a developer joining a mature project.</li>
<li>For a senior developer looking to track progress on a refactoring drive.</li>
<li>For helping evaluate the quality of an open source third party library.</li>
</ul>


<p>In this quick review, I'm not going deep enough to say anything about whether the DevExpress MainDemo is good code or not - it's just a sample project I happen to be quite familiar with. It might be interesting to unleash NDepend on the full DevExpress source code and maybe one day I'll get around to writing a future post about that.</p>

<p>With regard to my own projects, I feel I'm so familiar with them that I ought to be aware of most of the recommendations NDepend is likely to make, but I'll give it a spin and see what comes out...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<p>```html</p>

<pre><code>&lt;!-- MiniProfiler --&gt;
&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;asp:PlaceHolder ID="mp" runat="server"&gt;
  &lt;%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
&lt;/asp:PlaceHolder&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a '<em>jQuery is undefined</em>' javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<p>```diff
protected void Application_Start(object sender, EventArgs e) {</p>

<pre><code>RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</code></pre>

<ul>
<li>MiniProfilerHelper.RegisterPathsToIgnore();
ASPxWebControl.CallbackError += new EventHandler(Application_Error);
// etc...
<code>
and modify `BeginRequest` and `EndRequest` as follows:
</code>diff
protected void Application_BeginRequest(object sender, EventArgs e) {</li>
<li>if (MiniProfilerHelper.IsEnabled())</li>
<li>{</li>
<li><pre><code>MiniProfiler.Start();
</code></pre></li>
<li>}
string filePath = HttpContext.Current.Request.PhysicalPath;
if(!string.IsNullOrEmpty(filePath)

<pre><code>&amp;&amp; (filePath.IndexOf("Images") &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
HttpContext.Current.Response.End();
</code></pre>

<p>}
}</p></li>
</ul>


<p>protected void Application_EndRequest(Object sender, EventArgs e)
{
+   if (MiniProfilerHelper.IsEnabled())
+       MiniProfiler.Stop();
}      <br/>
<code>
Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the `IsEnabled()` function always returns true.
</code>c#  <br/>
public static class MiniProfilerHelper
{</p>

<pre><code>public static bool IsEnabled()
{
    // While we are testing let's always return true
    return true;

    // We should not profile if we are EasyTesting
    if (TestScriptsManager.EasyTestEnabled == true)
        return false;

    // We could choose to profile only local requests
    if (HttpContext.Current.Request.IsLocal)
        return true;

    // Or based on a cookie
    HttpCookie miniProfileCookie = HttpContext.Current.Request.Cookies["MainDemoMiniProfiler"];
    return miniProfileCookie != null &amp;&amp; miniProfileCookie.Value != "0";
}

// Optionally ignore some paths to prevent the output being too busy.
public static void RegisterPathsToIgnore()
{
    if (!NetSecuritySettings.IsProfilingAllowed())
        return;

    List&lt;String&gt; ignoredByMiniProfiler = new List&lt;String&gt;(MiniProfiler.Settings.IgnoredPaths);
    // these are a substring search so wildcards are not supported
    ignoredByMiniProfiler.Add("SessionKeepAliveReconnect.aspx");
    ignoredByMiniProfiler.Add("TemplateScripts.js");
    ignoredByMiniProfiler.Add("EasyTestJavaScripts.js");
    ignoredByMiniProfiler.Add("MoveFooter.js");
    ignoredByMiniProfiler.Add("ImageResource.axd");
    MiniProfiler.Settings.IgnoredPaths = ignoredByMiniProfiler.ToArray(); 
}
</code></pre>

<p>}
```</p>

<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable 'chiclets' in the top left of the browser page.</p>

<p><img src="/images/blog/xaf-miniprofiler-1.png"></p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let's say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a 'step' to the MiniProfiler breakdown.</p>

<p>```c#
protected override void OnLoad(EventArgs e)
{</p>

<pre><code>var profiler = MiniProfiler.Current; // it's ok for this to be null
using (profiler.Step("ASP.NET: Page_Load(Default)"))
{
     base.OnLoad(e);
}
</code></pre>

<p>}
```</p>

<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application's <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p><img src="/images/blog/xaf-miniprofiler-2.png"></p>

<p>As another example, let's profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<p>```diff
private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
{
+   var profiler = MiniProfiler.Current;
+   using (profiler.Step("FindBySubject")) // doesn't matter if profiler is null
+   {</p>

<pre><code>    IObjectSpace objectSpace = Application.CreateObjectSpace();
    string paramValue = e.ParameterCurrentValue as string;
    if (!string.IsNullOrEmpty(paramValue))
    {
        paramValue = "%" + paramValue + "%";
    }
    object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
        new BinaryOperator("Subject", paramValue, BinaryOperatorType.Like));
    if (obj != null)
    {
        e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
    }
</code></pre>

<ul>
<li>}
}     <br/>
```</li>
</ul>


<p><img class="right" src="/images/blog/xaf-miniprofiler-3.png"></p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says 'Type Subject...'. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It's often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="/fluent-queries-with-devexpress-xpo-intro">last post</a>, I'll demonstrate how to create a fluent interface so that you can do:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>First, let's look at the 'beginning' of the fluent interface: the <code>Query()</code> extension method.</p>

<p>```c#
public static class QueryExtensions
{</p>

<pre><code>public static IQueries Query(this Session session)
{
    return new Queries(session);
}

// If we're using XAF, do the same for ObjectSpace as well
public static IQueries Query(this IObjectSpace objectSpace)
{
    var xpObjectSpace = objectSpace as XPObjectSpace;
    var session = xpObjectSpace.Session;
    return new Queries(session);
}
</code></pre>

<p>}
```</p>

<p>What does the <code>Queries()</code> class look like?</p>

<p>```c#</p>

<pre><code>public interface IQueries
{
    IQueries InTransaction { get; }
    IContactQueries Contacts { get; }
    // One for each queryable object type, e.g.,
    // IDepartmentQueries Departments { get; }       
    // ITaskQueries Tasks { get; }
    // etc.
}

public class Queries : IQueries
{       
    public Queries(Session session)
    {
        _Session = session;
    }

    private readonly Session _Session;
    private bool _InTransaction;

    public IQueries InTransaction
    {
        get
        {
            _InTransaction = true;
            return this;
        }
    }

    private IContactQueries _Contacts;
    public IContactQueries Contacts
    {
        get
        {
            if (_Contacts == null)
                _Contacts = new ContactQueries(_Session, _InTransaction);
            return _Contacts;
        }
    }
}
</code></pre>

<p>```</p>

<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let's look at the base classes.</p>

<p>```c#
public interface IQueries<T> : IEnumerable<T>, IFluentInterface
{
}</p>

<p>public class Queries<T> : IQueries<T>
{</p>

<pre><code>public Queries(Session session, bool inTransaction)
{
    _Session = session;
    Query = new XPQuery&lt;T&gt;(session, inTransaction);
}

private readonly Session _Session;
protected IQueryable&lt;T&gt; Query { get; set; }

public IEnumerator&lt;T&gt; GetEnumerator()
{
    return Query.GetEnumerator();
}

IEnumerator IEnumerable.GetEnumerator()
{
    return Query.GetEnumerator();
}
</code></pre>

<p>}
```</p>

<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino's blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<p>```c#
public interface IContactQueries : IQueries<Contact>
{</p>

<pre><code>IContactQueries ByDepartmentTitle(string departmentTitle);
IContactQueries ByPosition(string position);
Contact ByEmail(string email);
</code></pre>

<p>}</p>

<p>public class ContactQueries : Queries<Contact>, IContactQueries, IContactThatHaveQueries
{</p>

<pre><code>public ContactQueries(Session session, bool inTransaction)
    : base(session, inTransaction)
{
}

public IContactQueries ByDepartmentTitle(string department)
{
    Query = Query.Where(c =&gt; c.Department.Title == department);
    return this;
}

public IContactQueries ByPosition(string position)
{
    Query = Query.Where(c =&gt; c.Position.Title == position);
    return this;
}

public Contact ByEmail(string email)
{
    return Query.SingleOrDefault(c =&gt; c.Email == email);
}
</code></pre>

<p>}  <br/>
```</p>

<p>There we go. Now we can use our fluent interface:</p>

<p><code>c#
var contacts = session.Query().Contacts.ByPosition("Manager");
</code></p>

<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It's also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Intro]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro/"/>
    <updated>2013-08-12T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro</id>
    <content type="html"><![CDATA[<p>There are <a href="http://documentation.devexpress.com/#xaf/CustomDocument3052">many ways to perform queries with XPO</a>.</p>

<p>You can do this:
```c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(new BinaryOperator("Name", "Elvis"));
</code></pre>

<p><code>
or this
</code>c#</p>

<pre><code>Session.FindObject&lt;Contact&gt;(CriteriaOperator.Parse("Name = 'Elvis'"));
</code></pre>

<p><code>
Another way to use the [simplified criteria syntax](http://documentation.devexpress.com/#XPO/CustomDocument2537), and with the [Xpo_EasyFields CodeRush plugin](https://code.google.com/p/dxcorecommunityplugins/wiki/XPO_EasyFields). Then you can do:
</code>c#
Session.FindObject<Contact>(Customer.Fields.Name == "Elvis");
<code>``
For each of the above, you can optionally query within the transaction by passing in the</code>PersistentCriteriaEvaluationBehavior.InTransaction` parameter.</p>

<p>Or we can use LINQ via <code>XPQuery&lt;T&gt;.TransformExpression()</code>.
```
Session.FindObject<Contact>(</p>

<pre><code>XPQuery&lt;Contact&gt;.TransformExpression(Session, c =&gt; c.Name == "Elvis")
);
</code></pre>

<p>```
All of these methods are powerful, but the power comes at a cost. The syntax is neither elegant nor particularly clear and as a result it is not very practical to maintain or test.</p>

<h2>A Fluent Interface for XPO</h2>

<p>How about if we could do the following?</p>

<p>```c#
var customer = Session</p>

<pre><code>            .Query()
              .Contacts
                .ByName("Elvis");
</code></pre>

<p>```
Or, for a more elaborate example:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>In the next post I'll show how to put the fluent interface code together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2/"/>
    <updated>2013-05-28T11:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily.'>
Good news. The conversion is now two-way. Get the source code <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">from GitHub</a>. Make sure you have built MainDemo.Reports project.</p>

<p>You will find there are now two T4 transforms in the project. <em>RepxToCSharp.tt</em> is covered in the <a href="/making-xaf-reports-even-better-part-1">Part 1</a>. It searches for any <em>.repx</em> files in the solution and converts the scripts into compilable C#.</p>

<p>The second transform is new. <em>CSharpToRepx.tt</em> copies any changes to the script part back into the original <em>.repx</em> files. Again, there are performance optimisations via checksums to prevent overwriting unchanged files.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Summary of C# transformation&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Total C# files found                                        :  2
</span><span class='line'>  Total reports injected                                    :  1
</span><span class='line'>  Total reports missing                                     :  0
</span><span class='line'>  Total reports skipped because unchanged                   :  1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time elapsed: 00:00:02.3483264
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily. You could even write unit tests against the code in the scripts.</p>

<p></span></p>

<p>Currently the easiest way of running these scripts is to open them and save them with <code>Ctrl+S</code>. This is because T4 templates were originally designed as a Visual Studio tool.</p>

<p>In the future I'm hoping to improve the integration further. There are ways of including the transformations into the build instead, most of which are covered in <a href="http://www.olegsych.com/2010/04/understanding-t4-msbuild-integration">a blog post by Mr T4, Oleg Sych</a>. I like the idea of it being a NuGet package that can be easily added to any XAF project, but there's a but I'll need some more time to work out how best to achieve this.</p>

<h2>Basic usage summary</h2>

<p>Until then, here are some basic usage instructions.</p>

<ul>
<li>Add the T4 Toolbox extension to Visual Studio</li>
<li>Add a copy of the MainDemo.Reports project to your own solution</li>
<li>Make sure you build it before running the transforms</li>
<li>Open <em>RepxToCSharp.tt</em> in Visual Studio.</li>
<li>Save it with <code>Ctrl+S</code> to run the transform. It will search all the folders in your Solution for <em>.repx</em> files and add corresponding C# classes.</li>
<li>Make any changes you like to the script section (anything outside of <code>// -- Start of embedded scripts --</code> and <code>// -- End of embedded scripts --</code>) will be ignored.</li>
<li>Open <em>CSharpToRepx.tt</em> and run it with <code>Ctrl+S</code>. The changes will be saved back to the corresponding <em>.repx</em>.</li>
</ul>


<h2>Even more power?</h2>

<p>You may notice that if you reload the MainDemo.Reports project, you can now see <code>View in Designer</code> in the context menu when you right-click on the <em>.repx.cs</em> file.</p>

<p><img src="/images/blog/xaf-report-sync-003.png"></p>

<p>Let's click it and see what happens. It opens directly in Visual Studio (like an <code>XtraReport</code>).</p>

<p><img src="/images/blog/xaf-report-sync-004.png"></p>

<p>Now, this is all highly experimental. You can see there are some warnings... Also, there is no connection with XPO, so the <em>Preview</em> is always empty.</p>

<p>That said, it doesn't seem like too much of a stretch to eventually allow far more Visual Studio integration for XAF reports...</p>
]]></content>
  </entry>
  
</feed>
