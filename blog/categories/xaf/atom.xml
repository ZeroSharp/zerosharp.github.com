<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xaf | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/xaf/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-10-22T18:44:14+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Three ways to store a list of currency codes in XAF]]></title>
    <link href="http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf/"/>
    <updated>2013-10-22T18:15:00+01:00</updated>
    <id>http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf</id>
    <content type="html"><![CDATA[<p>In the last post we looked at three solutions to a relatively simple XAF requirement. In this post I'll discuss another XAF challenge explain the options and provide a versatile and maintainable solution.</p>

<p>In my DevExpress XAF application, I have an object which has several properties like this:</p>

<p><img src="/images/blog/currency-list-editor-002.png"></p>

<p>In each case, the field is a comma-separated list of currency codes. These fields are not very important to the model - they are used mainly for reporting.</p>

<p>Let's look at 3 different ways of handling these fields.</p>

<h2>Option 1 - Use a plain old string field</h2>

<p>The <em>lightest</em> option would be just to declare them as a normal XPO string field:</p>

<p>```c#
private string _List1Currencies;
public string List1Currencies
{</p>

<pre><code>get
{
    return _List1Currencies;
}
set
{
    SetPropertyValue("List1Currencies", ref _List1Currencies, value);
}
</code></pre>

<p>}
```
It's certainly simple and maintainable, but it's not very user-friendly. There is no fancy interface to help with the input.  We can perhaps improve things slightly by providing edit masks and/or validation rules to check the input, but careful typing is the only way to change the values.</p>

<h2>Option 2 - Declare an association property</h2>

<p>The <em>heaviest</em> option is to declare each such property as a many-to-many relationship.</p>

<p>```c#
public class Container: XPObject {</p>

<pre><code>public Container(Session session) : base(session) { }

public string Name;

[Association("List1Currencies")]
public XPCollection&lt;Currency&gt; List1 { 
    get { return GetCollection&lt;Currency&gt;("List1"); }
}
</code></pre>

<p>}</p>

<p>public class Currency: XPObject {</p>

<pre><code>public Currency(Session session) : base(session) { }

[Size(3)]
public string Code;

public string Name;

[Association("List1Currencies")]
public XPCollection&lt;Container&gt; List1Container { 
    get { return GetCollection&lt;Container&gt;("List1Container"); }
}
</code></pre>

<p>}
```</p>

<p>This works great - we get a nice interface for selecting the currencies and the end result looks like this:</p>

<p><img src="/images/blog/currency-list-editor-003.png"></p>

<p>However, it's quite a heavy solution for something quite simple. For each such relationship XPO will generate a new intermediate table. If we look at the database schema, we see the following:</p>

<p><img src="/images/blog/currency-list-editor-004.png"></p>

<p>And in the model there are two new views.</p>

<p><img src="/images/blog/currency-list-editor-005.png"></p>

<p>If we have 5 such properties, we end up with 5 intermediary tables and 10 new views.</p>

<p>Now, depending on your requirements that may be acceptable. If those relationships are important to your model, then the overhead may be justified. In my situation, these are minor fields and I do not want to burden the model or the database with extra complexity if I can avoid it.</p>

<h2>Option 3 - Create a custom property editor</h2>

<p>With the help of <a href="http://documentation.devexpress.com/xaf/CustomDocument3097.aspx">the documentation</a> and old Support Center issues, I was able to quite quickly put together a custom editor which gives the end user a nice interface while keeping it simple. The bulk of the logic is in the <code>SerializedListPropertyEditor</code> base class (see the end of the article for the link to the code), but the principle is as follows:</p>

<p>Create a new subclass:</p>

<p>```c#</p>

<pre><code>[PropertyEditor(typeof(String), false)]
public class CurrencyListPropertyEditor : SerializedListPropertyEditor&lt;Currency&gt;
{
    public CurrencyListPropertyEditor(Type objectType, IModelMemberViewItem info)
        : base(objectType, info) { }

    protected override string GetDisplayText(Currency currency)
    {
        return String.Format("{0}\t{1}", currency.Code, currency.Name);
    }

    protected override string GetValue(Currency currency)
    {
        return currency.Code;
    }
}
</code></pre>

<p>```</p>

<p>Then decorate each property with</p>

<p>```c#
private string _List1Currencies;
[ModelDefault("PropertyEditorType", "Solution1.Module.Web.CurrencyListPropertyEditor")]
public string List1Currencies
{</p>

<pre><code>get
{
    return _List1Currencies;
}
set
{
    SetPropertyValue("List1Currencies", ref _List1Currencies, value);
}
</code></pre>

<p>}
```</p>

<p>Now the user gets a pretty editor to select the currencies, but the field is just a string field.</p>

<p><img src="/images/blog/currency-list-editor-001.png"></p>

<p>The editor supports use of the <code>[DataSourceProperty]</code> and <code>[DataSourceCriteria]</code> properties too, so you can easily filter the collection.</p>

<p>It is easy to provide a similar editor for any object type - just create a subclass of <code>SerializedListPropertyEditor&lt;T&gt;</code> where <code>T</code> is your persistent type.</p>

<p>You can download <a href="https://github.com/ZeroSharp/Xaf_CurrencyListPropertyEditor">a working sample project on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ugly, the Heavy and the Good: 3 solutions to an XAF layout problem]]></title>
    <link href="http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good/"/>
    <updated>2013-10-14T09:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good</id>
    <content type="html"><![CDATA[<p>This post aims to look at various solutions to a seemingly simple layout change.</p>

<p>With <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, a lot of the difficult things are easy: authentication, authorisation, ORM, reporting, complex form layouts, themes, etc., are all made easy by XAF. On the other hand, some of the easy things are hard. It can be frustratingly difficult to make a small modification to the basic layout. We will look at an example of such a change and evaluate the recommended DevExpress approaches.</p>

<h2>The problem</h2>

<p>Whenever my XAF web application asks me to change my password, I get a screen like this:</p>

<p><img src="/images/blog/narrow-dialog-001.png"></p>

<p>Well that's a bit annoying - those edit boxes are far too wide. Wouldn't it look much better if it were narrower and centered? If we weren't using XAF, we'd probably have a separate <em>aspx</em> file for this view and we could just modify the html. With XAF there are several different recommended ways of modifying the output.</p>

<h2>Option 1: Use the model</h2>

<p>Well, one approach would be to use the layout designer to add some <em>EmptySpaceItems</em> to the default layout for the <code>ChangePasswordOnLogon</code>. Add something like this to <em>MainDemo.Web/Model.xafml</em>:</p>

<p>```xml
  <Views></p>

<pre><code>&lt;DetailView Id="ChangePasswordOnLogonParameters_DetailView"&gt;
  &lt;Layout&gt;
    &lt;LayoutGroup Id="Main" Removed="True" /&gt;
    &lt;LayoutGroup Id="Narrow" RelativeSize="50" HorizontalAlign="Center" Direction="Horizontal" IsNewNode="True"&gt;
      &lt;LayoutItem Id="EmptySpaceItem1" Index="0" ViewItem="" RelativeSize="25" IsNewNode="True" /&gt;
      &lt;LayoutGroup Id="Main" ShowCaption="False" Index="1" IsNewNode="True"&gt;
        &lt;LayoutGroup Id="Static" Index="0" Direction="Horizontal" ShowCaption="False" IsNewNode="True"&gt;
          &lt;LayoutItem Id="ChangePasswordImage" Index="0" ShowCaption="False" RelativeSize="1" ViewItem="ChangePasswordImage" IsNewNode="True" /&gt;
          &lt;LayoutItem Id="ChangePasswordText" Index="1" ShowCaption="False" RelativeSize="99" ViewItem="ChangePasswordText" IsNewNode="True" /&gt;
        &lt;/LayoutGroup&gt;
        &lt;LayoutGroup Id="SimpleEditors" Index="1" ShowCaption="False" IsNewNode="True"&gt;
          &lt;LayoutGroup Id="ChangePasswordOnLogonParameters" ShowCaption="False" Index="0" IsNewNode="True"&gt;
            &lt;LayoutItem Id="NewPassword" ViewItem="NewPassword" Index="0" IsNewNode="True" /&gt;
            &lt;LayoutItem Id="ConfirmPassword" ViewItem="ConfirmPassword" Index="1" IsNewNode="True" /&gt;
          &lt;/LayoutGroup&gt;
        &lt;/LayoutGroup&gt;
      &lt;/LayoutGroup&gt;
      &lt;LayoutItem Id="EmptySpaceItem2" Index="2" ViewItem="" RelativeSize="25" IsNewNode="True" /&gt;
    &lt;/LayoutGroup&gt;
  &lt;/Layout&gt;
&lt;/DetailView&gt;
</code></pre>

<p>  </Views>  <br/>
```</p>

<p>Ugh. What a lot of work for such a small change. Another approach would be to make an equivalent model modification in code by subclassing <code>ModelNodesGeneratorUpdater&lt;ModelViewsNodesGenerator&gt;</code> but it would be even more effort.</p>

<p>Is it easy to maintain? Not especially. If we make any changes to the parameters object, we would have to update the layout again. It is quite likely we'd have to make revisions when upgrading the framework.</p>

<p>And does it work?</p>

<p><img src="/images/blog/narrow-dialog-003.png"></p>

<p>No!. It's a little better but it still looks ugly because the OK and Cancel buttons are still out wide.</p>

<p><blockquote><p>Verdict: too ugly</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the layout changes are within the main view area.</li>
</ul>


<p>Let's look at another option.</p>

<h2>Option 2: Customise the ASP.NET template</h2>

<p>If we were to <a href="http://documentation.devexpress.com/#Xaf/CustomDocument3460">follow the instructions here</a> we can modify the HTML exactly as we want. Unfortunately, this is even more work. We would need to:</p>

<p><img src="/images/blog/narrow-dialog-004.jpg"></p>

<ul>
<li>Create a new MyNarrowTemplateDialogContent.ascx</li>
<li>Modify the HTML within it to add a width to <code>Form1</code></li>
<li>Find some way of applying this template to only the detail view for <em>Change Password</em>. This is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q207853">currently not easy</a> but there is an example project at the end of <a href="http://www.devexpress.com/Support/Center/Question/Details/Q204692">this issue</a>.</li>
</ul>


<p>We'd end up with quite a few new files to maintain for just one little layout fix...</p>

<p>Also, another problem with this approach is that it needs reviewing whenever a new version of the framework is released, because the default templates may have changed. Too much maintenance work for such a little change.</p>

<p><blockquote><p>Verdict: too heavy</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the same layout changes are to be applied to the views of all or many different object types.</li>
<li>When the changes you are making are significant enough that they are hard to achieve by the solution below.</li>
</ul>


<h2>Option 3: Use a ViewController</h2>

<p>The <code>ViewController</code> and <code>WindowController</code> are well-suited to this sort of task.</p>

<p>```c#
public class NarrowDialogViewController : ViewController<DetailView>
{</p>

<pre><code>protected override void OnActivated()
{
    base.OnActivated();
    Active["ShouldUseNarrowForm"] = View.ObjectTypeInfo.Type == typeof(ChangePasswordOnLogonParameters); // see side-note below
}

protected override void OnViewControlsCreated()
{
    base.OnViewControlsCreated();
    if (WebWindow.CurrentRequestPage != null)
    {
        var htmlForm = WebWindow.CurrentRequestPage.FindControl("Form2") as HtmlForm; // see note below
        if (htmlForm != null)
        {
            // make the form narrow
            htmlForm.Attributes.CssStyle.Add("width", Unit.Percentage(40).ToString());
            // center the form
            htmlForm.Attributes.CssStyle.Add("margin-left", "auto");
            htmlForm.Attributes.CssStyle.Add("margin-right", "auto");
        }
    }
}
</code></pre>

<p>}
```</p>

<p>A side note: do not use <code>TargetObjectType == typeof(ChangePasswordOnLogonParameters)</code> instead of the <code>OnActivated()</code> override. This is because <code>ChangePasswordParameters</code> which is used when the user clicks on <code>Change My Password</code> is a subclass of <code>ChangePasswordOnLogonParameters</code> and we do <em>not</em> want that view to be narrowed because it appears in a popup window instead of the main window.</p>

<p>This solution is quite maintainable. We can delimit the views for which the modification applies making the controller is active. And the modification itself is relatively simple. It is also reasonably robust with regard to DevExpress upgrades. (They did just change the name of the main dialog Form <code>Form1</code> in 12.1 to <code>Form2</code> in 12.2, but it was the first time in years and it was simple to fix. Alternatively, you could use <code>FindControl</code> instead of using the hard-wired name).</p>

<p>Here's the resulting output, horizontally centered in the browser window:</p>

<p><img src="/images/blog/narrow-dialog-002.png"></p>

<p><blockquote><p>Verdict: good</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When a layout change is easy to apply by modifying styles. When a change pertains only to one or few specific object types.</li>
</ul>


<h2>Conclusions</h2>

<p>In this case, using a <code>ViewController</code> leads to relatively simple code and ease of maintenance. Other situations may well be better served by the other approaches.</p>

<p>DevExpress XAF is a powerful mature product. As such, it can be daunting to new users because of all the different approaches for applying changes. It is always possible to find an elegant maintainable solution, but sometimes it is not obvious, even when the required change is small.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A review of NDepend 5]]></title>
    <link href="http://ZeroSharp.github.com/a-review-of-ndepend-5/"/>
    <updated>2013-10-02T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-review-of-ndepend-5</id>
    <content type="html"><![CDATA[<p>NDepend is a commercial static analysis tool for .NET managed code. It's been around a long time (since 2004!). Version 5 was just released and in this post I'm going to try it out on the DevExpress MainDemo.</p>

<p><span class='pullquote-right' data-pullquote='In version 5, a lot of work has been done to improve the learning curve.'>
In the past I have always thought of NDepend as a complex tool. I was never sure where to start. In version 5, a lot of work has been done to improve the learning curve. The installation process is easy and a wizard very quickly points you in the right direction.</p>

<p>After <a href="http://ndepend.com/NDependDownload.aspx">downloading the v5 trial</a> and running the installation you get to the following screen.
</span></p>

<p><img src="/images/blog/ndepend/ndepend-001.png"></p>

<p>You cannot miss that big red arrow. In fact, it's even animated in the actual product. Click on it and choose a Visual Studio solution to analyse. I'm going to navigate to the DevExpress MainDemo 13.1.</p>

<p>So long as the project has been built at some point, NDepend works out what to analyse (otherwise you'll get helpful warnings).</p>

<p><img src="/images/blog/ndepend/ndepend-003.png"></p>

<p>It is very fast and we get to this help screen.</p>

<p><img src="/images/blog/ndepend/ndepend-004.png"></p>

<p>Choose the dashboard.</p>

<p><img src="/images/blog/ndepend/ndepend-005.png"></p>

<p>Now that's a lot of information, but it's all well presented and easy to navigate. Let's focus on the worst: I can see <em>2 Critical Rules Violated</em>. Drill down to find out more:</p>

<p><img src="/images/blog/ndepend/ndepend-009.png"></p>

<p>It's complaining that we have classes with duplicate names in our projects. In the pane on the left we can see what they are: 3 types named <code>MainDemoWinApplication</code>, 3 named <code>Program</code>, <em>etc.</em> And sure enough there are: <em>MainDemo.Win</em>, <em>MainDemo.Win.Mdi</em> and <em>MainDemo.Win.Ribbon</em> all duplicate those class names.</p>

<p>We can also see 2 <code>TaskAnalysis1LayoutUpdater</code> types and a quick search reveals that there's one in the web module and another in the win module.</p>

<p>So NDepend has correctly discovered some potential issues. As we XAF fans know, this one is not really a problem, because those modules are never loaded into the same AppDomain, but nevertheless the information is accurate and relevant.</p>

<p>Lets have a brief look at the other screens. The dependency graph:</p>

<p><img src="/images/blog/ndepend/ndepend-006.png"></p>

<p>With a million options.</p>

<p><img src="/images/blog/ndepend/ndepend-010.png"></p>

<p>A dependency matrix.</p>

<p><img src="/images/blog/ndepend/ndepend-007.png"></p>

<p>A metrics view showing class and assembly sizes.</p>

<p><img src="/images/blog/ndepend/ndepend-008.png"></p>

<p>All with reams of helpful documentation.</p>

<p><img src="/images/blog/ndepend/ndepend-011.png"></p>

<p>Overall, the tool felt fast, responsive and stable. I've focused on the user interface aspects, but there is so much more. Some things you can do:</p>

<ul>
<li>Create your own analysis rules</li>
<li><a href="http://www.ndepend.com/Doc_CQLinq_Syntax.aspx#Edition">Query your own code with LINQ</a></li>
<li>Run analysis from <a href="http://www.ndepend.com/NDependConsole.aspx">the command line</a></li>
<li>Run from within Visual Studio</li>
<li>Add output to continuous integration (<a href="http://www.ndepend.com/Doc_CI_TeamCity.aspx">TeamCity</a>, <a href="http://www.ndepend.com/Doc_CI_CCNet.aspx">CruiseControl.NET</a>, etc.)</li>
<li>Track <a href="http://www.ndepend.com/Doc_Trend.aspx">trends and progress over time</a></li>
</ul>


<p>NDepend shines at providing a high-level overview of code quality and as such it is a very useful addition to any developer's toolkit. There are some scenarios where NDepend would be particularly useful:</p>

<ul>
<li>For a developer joining a mature project.</li>
<li>For a senior developer looking to track progress on a refactoring drive.</li>
<li>For helping evaluate the quality of an open source third party library.</li>
</ul>


<p>In this quick review, I'm not going deep enough to say anything about whether the DevExpress MainDemo is good code or not - it's just a sample project I happen to be quite familiar with. It might be interesting to unleash NDepend on the full DevExpress source code and maybe one day I'll get around to writing a future post about that.</p>

<p>With regard to my own projects, I feel I'm so familiar with them that I ought to be aware of most of the recommendations NDepend is likely to make, but I'll give it a spin and see what comes out...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<p>```html</p>

<pre><code>&lt;!-- MiniProfiler --&gt;
&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;asp:PlaceHolder ID="mp" runat="server"&gt;
  &lt;%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
&lt;/asp:PlaceHolder&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a '<em>jQuery is undefined</em>' javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<p>```diff
protected void Application_Start(object sender, EventArgs e) {</p>

<pre><code>RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</code></pre>

<ul>
<li>MiniProfilerHelper.RegisterPathsToIgnore();
ASPxWebControl.CallbackError += new EventHandler(Application_Error);
// etc...
<code>
and modify `BeginRequest` and `EndRequest` as follows:
</code>diff
protected void Application_BeginRequest(object sender, EventArgs e) {</li>
<li>if (MiniProfilerHelper.IsEnabled())</li>
<li>{</li>
<li><pre><code>MiniProfiler.Start();
</code></pre></li>
<li>}
string filePath = HttpContext.Current.Request.PhysicalPath;
if(!string.IsNullOrEmpty(filePath)

<pre><code>&amp;&amp; (filePath.IndexOf("Images") &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
HttpContext.Current.Response.End();
</code></pre>

<p>}
}</p></li>
</ul>


<p>protected void Application_EndRequest(Object sender, EventArgs e)
{
+   if (MiniProfilerHelper.IsEnabled())
+       MiniProfiler.Stop();
}      <br/>
<code>
Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the `IsEnabled()` function always returns true.
</code>c#  <br/>
public static class MiniProfilerHelper
{</p>

<pre><code>public static bool IsEnabled()
{
    // While we are testing let's always return true
    return true;

    // We should not profile if we are EasyTesting
    if (TestScriptsManager.EasyTestEnabled == true)
        return false;

    // We could choose to profile only local requests
    if (HttpContext.Current.Request.IsLocal)
        return true;

    // Or based on a cookie
    HttpCookie miniProfileCookie = HttpContext.Current.Request.Cookies["MainDemoMiniProfiler"];
    return miniProfileCookie != null &amp;&amp; miniProfileCookie.Value != "0";
}

// Optionally ignore some paths to prevent the output being too busy.
public static void RegisterPathsToIgnore()
{
    if (!NetSecuritySettings.IsProfilingAllowed())
        return;

    List&lt;String&gt; ignoredByMiniProfiler = new List&lt;String&gt;(MiniProfiler.Settings.IgnoredPaths);
    // these are a substring search so wildcards are not supported
    ignoredByMiniProfiler.Add("SessionKeepAliveReconnect.aspx");
    ignoredByMiniProfiler.Add("TemplateScripts.js");
    ignoredByMiniProfiler.Add("EasyTestJavaScripts.js");
    ignoredByMiniProfiler.Add("MoveFooter.js");
    ignoredByMiniProfiler.Add("ImageResource.axd");
    MiniProfiler.Settings.IgnoredPaths = ignoredByMiniProfiler.ToArray(); 
}
</code></pre>

<p>}
```</p>

<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable 'chiclets' in the top left of the browser page.</p>

<p><img src="/images/blog/xaf-miniprofiler-1.png"></p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let's say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a 'step' to the MiniProfiler breakdown.</p>

<p>```c#
protected override void OnLoad(EventArgs e)
{</p>

<pre><code>var profiler = MiniProfiler.Current; // it's ok for this to be null
using (profiler.Step("ASP.NET: Page_Load(Default)"))
{
     base.OnLoad(e);
}
</code></pre>

<p>}
```</p>

<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application's <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p><img src="/images/blog/xaf-miniprofiler-2.png"></p>

<p>As another example, let's profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<p>```diff
private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
{
+   var profiler = MiniProfiler.Current;
+   using (profiler.Step("FindBySubject")) // doesn't matter if profiler is null
+   {</p>

<pre><code>    IObjectSpace objectSpace = Application.CreateObjectSpace();
    string paramValue = e.ParameterCurrentValue as string;
    if (!string.IsNullOrEmpty(paramValue))
    {
        paramValue = "%" + paramValue + "%";
    }
    object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
        new BinaryOperator("Subject", paramValue, BinaryOperatorType.Like));
    if (obj != null)
    {
        e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
    }
</code></pre>

<ul>
<li>}
}     <br/>
```</li>
</ul>


<p><img class="right" src="/images/blog/xaf-miniprofiler-3.png"></p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says 'Type Subject...'. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It's often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="/fluent-queries-with-devexpress-xpo-intro">last post</a>, I'll demonstrate how to create a fluent interface so that you can do:</p>

<p>```c#
var customer = Session</p>

<pre><code>             .Query()
             .InTransaction
                .Contacts
                  .ByPosition("Developer")
                    .ThatHave
                      .NoPhoto()
                    .And
                      .TasksInProgress()
                    .And
                      .TasksWith(Priority.High)            
             .FirstOrDefault();
</code></pre>

<p>```</p>

<p>First, let's look at the 'beginning' of the fluent interface: the <code>Query()</code> extension method.</p>

<p>```c#
public static class QueryExtensions
{</p>

<pre><code>public static IQueries Query(this Session session)
{
    return new Queries(session);
}

// If we're using XAF, do the same for ObjectSpace as well
public static IQueries Query(this IObjectSpace objectSpace)
{
    var xpObjectSpace = objectSpace as XPObjectSpace;
    var session = xpObjectSpace.Session;
    return new Queries(session);
}
</code></pre>

<p>}
```</p>

<p>What does the <code>Queries()</code> class look like?</p>

<p>```c#</p>

<pre><code>public interface IQueries
{
    IQueries InTransaction { get; }
    IContactQueries Contacts { get; }
    // One for each queryable object type, e.g.,
    // IDepartmentQueries Departments { get; }       
    // ITaskQueries Tasks { get; }
    // etc.
}

public class Queries : IQueries
{       
    public Queries(Session session)
    {
        _Session = session;
    }

    private readonly Session _Session;
    private bool _InTransaction;

    public IQueries InTransaction
    {
        get
        {
            _InTransaction = true;
            return this;
        }
    }

    private IContactQueries _Contacts;
    public IContactQueries Contacts
    {
        get
        {
            if (_Contacts == null)
                _Contacts = new ContactQueries(_Session, _InTransaction);
            return _Contacts;
        }
    }
}
</code></pre>

<p>```</p>

<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let's look at the base classes.</p>

<p>```c#
public interface IQueries<T> : IEnumerable<T>, IFluentInterface
{
}</p>

<p>public class Queries<T> : IQueries<T>
{</p>

<pre><code>public Queries(Session session, bool inTransaction)
{
    _Session = session;
    Query = new XPQuery&lt;T&gt;(session, inTransaction);
}

private readonly Session _Session;
protected IQueryable&lt;T&gt; Query { get; set; }

public IEnumerator&lt;T&gt; GetEnumerator()
{
    return Query.GetEnumerator();
}

IEnumerator IEnumerable.GetEnumerator()
{
    return Query.GetEnumerator();
}
</code></pre>

<p>}
```</p>

<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino's blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<p>```c#
public interface IContactQueries : IQueries<Contact>
{</p>

<pre><code>IContactQueries ByDepartmentTitle(string departmentTitle);
IContactQueries ByPosition(string position);
Contact ByEmail(string email);
</code></pre>

<p>}</p>

<p>public class ContactQueries : Queries<Contact>, IContactQueries, IContactThatHaveQueries
{</p>

<pre><code>public ContactQueries(Session session, bool inTransaction)
    : base(session, inTransaction)
{
}

public IContactQueries ByDepartmentTitle(string department)
{
    Query = Query.Where(c =&gt; c.Department.Title == department);
    return this;
}

public IContactQueries ByPosition(string position)
{
    Query = Query.Where(c =&gt; c.Position.Title == position);
    return this;
}

public Contact ByEmail(string email)
{
    return Query.SingleOrDefault(c =&gt; c.Email == email);
}
</code></pre>

<p>}  <br/>
```</p>

<p>There we go. Now we can use our fluent interface:</p>

<p><code>c#
var contacts = session.Query().Contacts.ByPosition("Manager");
</code></p>

<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It's also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
</feed>
