<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devexpress | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/devexpress/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2015-08-03T16:08:58+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevExpress 14.2 review]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-14-dot-2-review/"/>
    <updated>2015-01-20T08:35:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-14-dot-2-review</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The truly outstanding new feature is the ASP.NET report writer'>
This post is an overview of the brand new version XAF 14.2. The truly outstanding new feature is the ASP.NET report writer which is now available in all XAF applications.</p>

<p>A few months ago, we lost a potential sale because the customer wanted the ability to create custom reports from within the browser. We told them it was impossible to provide a fully-fledged report designer within our web application - but the DevExpress guys have done it! And how! </span></p>

<h2>The web-based report designer</h2>

<p>Let's fire up the MainDemo application and navigate to the reports view. The first thing to notice is that there is a new action <em>Show Report Designer</em>.</p>

<p><img src="/images/blog/devexpress-14-2-review-001.png"></p>

<p>The designer action is disabled because the selected report is <em>predefined</em>. Predefined reports are a feature of Reports v2 which were introduced in version 13.2 (<a href="/devexpress-13-dot-2-review-part-1">see my previous review</a>). So first, we clone the existing predefined report. I renamed the copy (via the edit button) so that we can tell them apart.</p>

<p><img src="/images/blog/devexpress-14-2-review-002.png"></p>

<p>Now the <em>Show Report Designer</em> action is enabled. Let's click it. <em>Whoa! That's one impressive user interface for a web application!</em></p>

<p><img src="/images/blog/devexpress-14-2-review-003.png"></p>

<p>Let's add a chart and a few controls. I thought (incorrectly) that the link to the domain model might be somewhat lacking because the report designer is not designed specifically for XAF (you can also use it with non-XAF ASP.NET or ASP.NET MVC applications) but navigating the available domain objects to select a property seemed very natural and simple.</p>

<p><img src="/images/blog/devexpress-14-2-review-005.png"></p>

<p>I had a few little mouse issues while trying to resize or move controls, and there were a couple of places where the interface seemed slightly sluggish, but these were very minor issues. In general the designer is slick and easy to use. I also had a little difficulty finding the <em>Save</em> button, but here it is:</p>

<p><img src="/images/blog/devexpress-14-2-review-007.png"></p>

<p>And here's the live output after my modifications.</p>

<p><img src="/images/blog/devexpress-14-2-review-006.png"></p>

<p>You can also start from scratch with a new blank report.</p>

<p><img src="/images/blog/devexpress-14-2-review-004.png"></p>

<p>This report designer is an <strong>extremely impressive achievement</strong>. I played around with it for over an hour and it did not crash once. I managed to implement everything I tried including a chart, a bar code and a new data field.</p>

<p>There are some features missing from the web-based report designer compared to the Windows Forms version. Most significant is the ability to attach events and scripts to controls. Here is a <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument14651">full feature comparison table</a>.</p>

<p>I had a quick look for the tools they used to implement it. It looks like it uses <a href="https://jquery.com">jQuery</a>, <a href="https://jqueryui.com">jQuery.UI</a> and <a href="https://knockoutjs.com">knockout.js</a> and you can automatically bundle the required libraries via a new setting in the web.config. There is <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument17558">some more information here</a>.</p>

<p>On the whole I am utterly impressed. Hats off to the DevExpress team!</p>

<h2>Other new features in XAF 14.2</h2>

<p>The new 14.2 includes several other new features. These include the ability to store user settings in the data store as well as improvements to the speed of the grids. For a full list of the new features and improvements see <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/18/xaf-brand-new-module-amp-features-for-both-windows-and-the-web-coming-soon-in-v14-2.aspx">here</a> and <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/20/xaf-enhancements-to-existing-features-amp-performance-tuning-coming-soon-in-v14-2.aspx">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/elmah-with-devexpress-xaf/"/>
    <updated>2014-10-08T15:45:00+01:00</updated>
    <id>http://ZeroSharp.github.com/elmah-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/p/elmah/">ELMAH (Error Logging Modules and Handlers)</a> is an open source library for logging unhandled exceptions. This post explains how to get it running with the <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> main demo.</p>

<p>A couple of amazing facts about ELMAH.</p>

<ul>
<li>It has been around since 2004!</li>
<li>It was written by <a href="http://www.raboof.com/">Atif Aziz</a> who happens to be an old school-friend from the International School of Geneva.</li>
</ul>


<p>XAF provides <a href="https://documentation.devexpress.com/#xaf/CustomDocument2704">quite extensive error handling options</a> out of the box, but I have found Elmah better suited to production environments because of the ability to remotely view the full error log.</p>

<h2>Setting up</h2>

<p>First, get the ELMAH package via NuGet into the MainDemo.Web project. ELMAH provides dozens of different methods of persisting the error log. For this example we'll choose one of the simplest. Make sure you select the <em>ELMAH on XML Log</em> package.</p>

<p><img src="/images/blog/xaf-with-elmah-001.png"></p>

<p>NuGet makes several automatic modifications to the <em>web.config</em>. Unfortunately, these are not quite accurate enough for XAF. The changes you need to make are detailed below:</p>

<p>Add a <code>&lt;configSection&gt;</code> for ELMAH as alongside the existing devExpress one.</p>

<p>```xml web.config
  <configSections></p>

<pre><code>&lt;sectionGroup name="devExpress"&gt;...&lt;/sectionGroup&gt; &lt;!-- this should already exist--&gt;
&lt;sectionGroup name="elmah"&gt; &lt;!-- this is new--&gt;
  &lt;section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" /&gt;
  &lt;section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" /&gt;
  &lt;section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" /&gt;
  &lt;section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" /&gt;
 &lt;/sectionGroup&gt;
</code></pre>

<p>  </configSections>
```</p>

<p>Your <code>&lt;system.webServer&gt;</code> section should look like this:</p>

<p>```xml web.config
  &lt;system.webServer></p>

<pre><code>&lt;handlers&gt;...&lt;/handlers&gt; &lt;!-- This is unchanged --&gt;
&lt;validation validateIntegratedModeConfiguration="false" /&gt;
&lt;modules&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" preCondition="managedHandler" /&gt;
  &lt;add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" preCondition="managedHandler" /&gt;
  &lt;add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" preCondition="managedHandler" /&gt;
&lt;/modules&gt;
</code></pre>

<p>  &lt;/system.webServer>
```</p>

<p>Add a <code>&lt;location&gt;</code> for the path <em>elmah.axd</em> (alongside the existing <code>&lt;location&gt;</code> tags).</p>

<p>```xml web.config
  <location path="elmah.axd" inheritInChildApplications="false"></p>

<pre><code>&lt;system.web&gt;
  &lt;httpHandlers&gt;
    &lt;add verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" /&gt;
  &lt;/httpHandlers&gt;
  &lt;!-- 
    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for 
    more information on using ASP.NET authorization securing ELMAH.

  &lt;authorization&gt;
    &lt;allow roles="admin" /&gt;
    &lt;deny users="*" /&gt;  
  &lt;/authorization&gt;
  --&gt;  
&lt;/system.web&gt;
&lt;system.webServer&gt;
  &lt;handlers&gt;
    &lt;add name="ELMAH" verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" preCondition="integratedMode" /&gt;
  &lt;/handlers&gt;
&lt;/system.webServer&gt;
</code></pre>

<p>  </location>
```</p>

<p>Add a new <code>&lt;elmah&gt;</code> section. I put mine just before the final <code>&lt;/configuration&gt;</code> tag.</p>

<p>```xml web.config
  <elmah></p>

<pre><code>&lt;errorLog type="Elmah.XmlFileErrorLog, Elmah" logPath="~/App_Data/Elmah.Errors" /&gt;
&lt;!--
    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for 
    more information on remote access and securing ELMAH.
--&gt;
&lt;security allowRemoteAccess="false" /&gt;
</code></pre>

<p>  </elmah>
```</p>

<p>Now modify <em>HttpModules.Web.Config</em> to look like this:</p>

<p><code>xml HttpModules.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpModules&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" /&gt;
  &lt;add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" /&gt;
  &lt;add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" /&gt;
&lt;/httpModules&gt;
</code></p>

<p>Now we need to extend XAF's standard error handling. Create a new class in the web application.</p>

<p>```c#
public class ElmahErrorHandling : ErrorHandling
{</p>

<pre><code>protected override void LogException(ErrorInfo errorInfo)
{
    base.LogException(errorInfo);

    if (errorInfo.Exception != null)
        Elmah.ErrorSignal.FromCurrentContext().Raise(errorInfo.Exception);
}
</code></pre>

<p>}
```</p>

<p>And then modify <em>Global.asax.cs</em> to instantiate the new class</p>

<p>```c#</p>

<pre><code>    protected void Application_Start(object sender, EventArgs e) {
        ErrorHandling.Instance = new ElmahErrorHandling(); // &lt;---this line is new
        ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</code></pre>

<h1>if DEBUG</h1>

<pre><code>        TestScriptsManager.EasyTestEnabled = true;
</code></pre>

<h1>endif</h1>

<pre><code>    }
</code></pre>

<p>```</p>

<p>The complete files are available with the <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">source code</a>.</p>

<p>Now run the application and trigger an unhandled exception. Change the URL to something that does not exist. Or open any detail view and modify the URL so that the Guid in the <em>ShortcutObjectKey</em> is invalid (replace a digit with an 'X'). Then the application error page appears.</p>

<p><img src="/images/blog/xaf-with-elmah-002.png"></p>

<p>Then return to the application and change the URL to <code>Elmah.axd</code>. You are looking at the log of all unhandled exceptions.</p>

<p><img src="/images/blog/xaf-with-elmah-003.png"></p>

<p>And for each exception, you can view the full details of any logged exception including coloured stack trace and full server variables.</p>

<p><img src="/images/blog/xaf-with-elmah-004.png"></p>

<h2>ELMAH options</h2>

<p>By default, ELMAH is configured to disallow remote access to the error logs -  only a local user can get to <em>elmah.axd</em>. If you take care of the security implications it can be very useful to enable remote access and  monitor the logs on your production servers.</p>

<p>We chose to use an XML file for each error but ELMAH is entirely pluggable. There are dozens of alternatives for persisting the error log including Sql Server, an RSS feeds, to Twitter, even to <a href="http://code.google.com/p/elmah/wiki/ProwlingErrors">an iPhone app</a>. There are even third party sites such as <a href="http://elmah.io">elmah.io</a> who will host your error logs for you.</p>

<p>One of the advantages of using XML files is that the files can be copied to another machine. If you look in <em>MainDemo.Web\App_Data\Elmah.Errors</em>, you will find the resulting xml files.</p>

<p><img src="/images/blog/xaf-with-elmah-005.png"></p>

<p>You can just copy these files to another installation's <em>Elmah.Errors</em> folder and the log will show up when you visit <em>Elmah.axd</em>.</p>

<p>One final note. ELMAH was developed for ASP.NET applications and web services, but it is possible to get it to work with other types of applications such as Windows Forms, Windows Service or console applications. Check out <a href="https://stackoverflow.com/questions/841451/using-elmah-in-a-console-application">this StackOverflow question</a>.</p>

<p>The source code for this example is <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A web UI performance tip for XAF web applications]]></title>
    <link href="http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications/"/>
    <updated>2014-03-31T10:16:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-web-ui-performance-tip-for-xaf-web-applications</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to raise your awareness of a toggle which exists in the <a href="http://www.devexpress.com/xaf/">DevExpress XAF framework</a> which can significantly improve UI performance in the web application.</p>

<p><span class='pullquote-right' data-pullquote='In fact the general responsiveness of the entire web-application seems much better.'>
The biggest XAF project I work with has one very complex business object. The layout for this screen includes about 100 properties, several nested tabs, some custom editors, several collection properties and a whole lot of <a href="https://documentation.devexpress.com/#Xaf/CustomDocument3286">Conditional Appearance</a> rules. It was very sluggish to navigate - it was taking several seconds to load the detail view and then it was very slow switching between tabs. Switching to edit mode was also slow.</p>

<p>Last week, I almost accidentally changed the value of <code>DelayedViewItemsInitialization</code> to <code>false</code> and noticed that the UI speed was much much better. In fact the general responsiveness of the entire web-application seems much better.</p>

<p>In order to give it a whirl, navigate to the WebApplication.cs file (normally in the ApplicationCode subfolder of your web project) and modify the constructor as follows:</p>

<p></span></p>

<p>```c#
public MainDemoWebApplication() {</p>

<pre><code>InitializeComponent();
this.DelayedViewItemsInitialization = false;
</code></pre>

<p>}
```</p>

<p>Certainly this is not without consequences, and I would urge a careful reading of the <a href="https://documentation.devexpress.com/#xaf/DevExpressExpressAppXafApplication_DelayedViewItemsInitializationtopic">relevant documentation</a>. To be honest, I still don't really understand why my detail view is so much slower without this change. I have tried to isolate the cause without much success and I will update this post if I find anything new. But if some of your detail views seem overly slow, certainly try it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glimpse with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/glimpse-with-devexpress-xaf/"/>
    <updated>2013-12-17T12:41:00+00:00</updated>
    <id>http://ZeroSharp.github.com/glimpse-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>I have finally got around to getting Glimpse working with XAF. Glimpse is an amazing extensible ASP.NET plug-in which gives you valuable information about what is going on within your server in production. It's also very pretty.</p>

<p>Let's jump right in and have a look at what XAF looks like with Glimpse running.</p>

<p><img src="/images/blog/xaf-with-glimpse-016.png"></p>

<p>That banner along the bottom of the screen is the Glimpse heads up display (HUD). Hovering over various sections of it pops up more information:</p>

<p><img src="/images/blog/xaf-with-glimpse-019.png"></p>

<p><img src="/images/blog/xaf-with-glimpse-018.png"></p>

<p><img src="/images/blog/xaf-with-glimpse-017.png"></p>

<p>If you click on the Glimpse icon in the bottom right, you get even more goodies. Here's the <em>Timeline</em> view.</p>

<p><img src="/images/blog/xaf-with-glimpse-011.png"></p>

<p>And there are many other tabs available. The <em>Configuration</em> tab shows the contents of the <em>web.config</em> file.
<img src="/images/blog/xaf-with-glimpse-009.png">
Here's the <em>Control Tree</em> tab:
<img src="/images/blog/xaf-with-glimpse-010.png">
The <em>Page Life Cycle</em> tab:
<img src="/images/blog/xaf-with-glimpse-005.png">
The <em>Request</em> tab:
<img src="/images/blog/xaf-with-glimpse-004.png">
The <em>Session</em> tab:
<img src="/images/blog/xaf-with-glimpse-003.png">
And the <em>Trace</em> tab including the DevExpress log items that were added to the trace during this page load:
<img src="/images/blog/xaf-with-glimpse-002.png">
As you can see, this is a very valuable glimpse into the server which can be turned on as needed in production.</p>

<h2>Adding Glimpse to an XAF application</h2>

<p>First install the Glimpse Nuget package into the project.</p>

<p><img src="/images/blog/xaf-with-glimpse-001.png"></p>

<p>The Nuget installation will make various incorrect changes to the web.config. The corrected sections are below:</p>

<p>First, add Glimpse to the <code>&lt;configSections&gt;</code>.
```diff web.config
  <configSections></p>

<pre><code>&lt;sectionGroup name="devExpress"&gt;
  &lt;section name="compression" requirePermission="false" type="DevExpress.Web.ASPxClasses.CompressionConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;section name="themes" type="DevExpress.Web.ASPxClasses.ThemesConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;section name="settings" type="DevExpress.Web.ASPxClasses.SettingsConfigurationSection, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/sectionGroup&gt;
</code></pre>

<ul>
<li><section name="glimpse" type="Glimpse.Core.Configuration.Section, Glimpse.Core" />
</configSections>
```</li>
</ul>


<p>Next, <code>&lt;system.webserver&gt;</code> should look like this:
```diff
  &lt;system.webServer></p>

<pre><code>&lt;handlers&gt;
  &lt;add name="TestControls.axd_*" path="TestControls.axd" verb="*" type="DevExpress.ExpressApp.Web.TestScripts.TestScriptsManager, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ImageResource.axd_*" path="ImageResource.axd" verb="*" type="DevExpress.ExpressApp.Web.ImageResourceHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="SessionKeepAliveReconnectHttpHandler" verb="*" path="SessionKeepAliveReconnect.aspx*" type="DevExpress.ExpressApp.Web.SessionKeepAliveReconnectHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="WebWindowTemplateHttpHandler" verb="*" path="*.aspx" type="DevExpress.ExpressApp.Web.WebWindowTemplateHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ASPxUploadProgressHandler" verb="GET,POST" path="ASPxUploadProgressHandlerPage.ashx" type="DevExpress.Web.ASPxUploadControl.ASPxUploadProgressHttpHandler, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" preCondition="integratedMode" /&gt;
  &lt;add name="ReportExportResource.axd_*" preCondition="integratedMode" verb="*" path="ReportExportResource.axd" type="DevExpress.ExpressApp.Reports.Web.ReportExportHttpHandler, DevExpress.ExpressApp.Reports.Web.v13.2, Version=13.2.5.0, culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
</code></pre>

<ul>
<li>  <add name="Glimpse" path="glimpse.axd" verb="GET" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" preCondition="integratedMode" />
</handlers>
<validation validateIntegratedModeConfiguration="false" />
<modules>
  <add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /></li>
<li>  <add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" preCondition="integratedMode" />
</modules>
&lt;/system.webServer>
```</li>
</ul>


<p>NuGet added some incorrect definitions to <code>system.web</code>. Make sure to restore this section to the DevExpress default:</p>

<p>```xml
  &lt;system.web></p>

<pre><code>&lt;httpRuntime requestValidationMode="2.0" /&gt;
&lt;sessionState mode="InProc" timeout="2" /&gt;
&lt;httpHandlers configSource="HttpHandlers.Web.Config" /&gt;
&lt;httpModules configSource="HttpModules.Web.Config" /&gt;
</code></pre>

<p>```</p>

<p>And now we'll add the corrected changes to <code>HttpHandlers.Web.Config</code> and <code>HttpModule.Web.Config</code></p>

<p><code>diff HttpHandlers.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpHandlers&gt;
+ &lt;add verb="GET" path="glimpse.axd" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" /&gt;
  &lt;add verb="*" path="TestControls.axd" type="DevExpress.ExpressApp.Web.TestScripts.TestScriptsManager, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="ImageResource.axd" type="DevExpress.ExpressApp.Web.ImageResourceHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="SessionKeepAliveReconnect.aspx*" type="DevExpress.ExpressApp.Web.SessionKeepAliveReconnectHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="*.aspx" type="DevExpress.ExpressApp.Web.WebWindowTemplateHttpHandler, DevExpress.ExpressApp.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="GET,POST" path="ASPxUploadProgressHandlerPage.ashx" validate="false" type="DevExpress.Web.ASPxUploadControl.ASPxUploadProgressHttpHandler, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
  &lt;add verb="*" path="ReportExportResource.axd" type="DevExpress.ExpressApp.Reports.Web.ReportExportHttpHandler, DevExpress.ExpressApp.Reports.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/httpHandlers&gt;
</code></p>

<p><code>xml HttpModules.Web.Config
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;httpModules&gt;
+ &lt;add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" /&gt;
  &lt;add name="ASPxHttpHandlerModule" type="DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v13.2, Version=13.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" /&gt;
&lt;/httpModules&gt;
</code></p>

<p>Next, there is <a href="https://github.com/Glimpse/Glimpse/issues/632">an outstanding problem</a> with the current release version of the Glimpse ASP.NET NuGet package (1.6.0) which prevents it from working with the development webserver. (Apparently it's fixed in 1.7.0 which should be released soon). If you try to run MainDemo.Web you will get the following error:</p>

<pre><code>Type 'System.Web.HttpContextWrapper' in assembly 'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' is not marked as serializable.
</code></pre>

<p>However it works fine against IIS Express (or full IIS). Go to the MainDemo.Web and change the debug properties as follows:</p>

<p><img src="/images/blog/xaf-with-glimpse-015.png"></p>

<p>Then run the web application. Glimpse is off by default. In order to turn it on, you need to set a cookie, which you can do by navigating to <code>Glimpse.axd</code>. This is the Glimpse configuration screen.</p>

<p><img src="/images/blog/xaf-with-glimpse-014.png"></p>

<h2>Additional Glimpse extensions</h2>

<p>Glimpse is extensible and there are <a href="http://getglimpse.com/Packages">many additional plugins</a> available. Many of these take the form of additional tabs with details about a particular aspect of your application: SQL Queries, Elmah errors, ASP.NET caching, logging, dependency injection, <em>etc.</em></p>

<h2>MainDemo Sample Project</h2>

<p>I have uploaded a modified XAF MainDemo to this <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Glimpse">GitHub repository</a> with all the above changes. (Don't forget to debug against IIS Express).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 13.2 Review - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-2/"/>
    <updated>2013-12-10T16:10:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of a review of the new DevExpress 13.2. In <a href="/devexpress-13-dot-2-review-part-1">the last part</a> we looked in-depth at the new <a href="https://community.devexpress.com/blogs/eaf/archive/2013/11/08/easy-large-reports-in-13-2-ctp-of-reportsv2-module.aspx">Reports V2</a>. In this part I'll go over some of the other new features including the support for warnings and confirmations in the validation module.</p>

<h2>Soft Validation Rules</h2>

<p>With 13.2, DevExpress adds support for warning/confirmation messages to the validation engine. Warnings can be used to handle an unusual but valid data entry. An example would be:</p>

<p><blockquote><p>The date of birth results in an age of over 100. Are you sure?</p></blockquote></p>

<p>Here the age of the contact is unusual but not impossible, so instead of prohibiting it entirely, we ask the user for confirmation before saving.</p>

<p>Let's add this rule to the MainDemo. Open the model and navigate to the Validation node. Add a <code>RuleValueComparison</code> and configure it as follows</p>

<p><img src="/images/blog/devexpress-13-2-review-010.png"></p>

<p>Of course you could instead also define the same rule with an attribute on the <code>Birthday</code> property. Something like:</p>

<p>```c#
[RuleValueComparison("IsOlderThan100_Warning",</p>

<pre><code>DefaultContexts.Save,
ValueComparisonType.GreaterThan, "AddYears(Now(), -100)",
"Birthday makes this Contact older than 100. Are you sure?",
ParametersMode.Expression,
ResultType = ValidationResultType.Warning)]
</code></pre>

<p>```</p>

<p>Notice the new <code>ResultType</code> parameter is set to <code>ValidationResultType.Warning</code>.</p>

<p>Another typical use is to provide better handling of duplicates. Consider the following:</p>

<p>```c#
[RuleCombinationOfPropertiesIsUnique("DuplicateName_Warning",</p>

<pre><code>DefaultContexts.Save, 
"LastName;FirstName", 
"There is already a Contact with the name {FullName}. Are you sure?", 
ResultType = ValidationResultType.Warning)]
</code></pre>

<p>public class Contact : Person {
  //etc ...
```</p>

<p>And then this is what happens if I try to add another John Nilsen.</p>

<p><img src="/images/blog/devexpress-13-2-review-011.png"></p>

<p>Another scenario would be to warn the user of something which needs attention. Such as "Warning! You are running out of funds in your current account." Or "Warning! Deleting this record will format your hard drive."</p>

<h3>List Views</h3>

<p>Soft validation also works in the list views, even with multiple selection, but there are a couple of things that don't work very smoothly yet and I would expect the web implementation to evolve over the coming releases.</p>

<p>In order to demonstrate this I need to use a context which allows multiple selection such as deletion. So let's decorate our class with the following simple rule.</p>

<p>```c#</p>

<pre><code>[RuleCriteria("Deletion_Warning", DefaultContexts.Delete, "1=0", "Warning! Are you sure?", ResultType = ValidationResultType.Warning)]
</code></pre>

<p>```</p>

<p>Then I select all the contacts and press <code>Delete</code>, after the confirmation window, I get this:</p>

<p><img src="/images/blog/devexpress-13-2-review-014.png"></p>

<h3>Web Application</h3>

<p>Soft validation is also available in the web application. This is what a warning looks like.</p>

<p><img src="/images/blog/devexpress-13-2-review-015.png"></p>

<p>I would prefer to see a <em>Confirm</em> button rather than the current <em>Ignore</em> checkbox since a button requires a single click to validate.</p>

<p>When there are several warnings and errors at the same time, the current implementation displays them all. I think it would be preferable if warnings were not displayed unless there are no errors. Unless DevExpress provide this as an option soon, I will attempt to extend the controller in this regard in a future post.</p>

<h2>Other new features</h2>

<p>In the 13.2 release, there is now support for runtime extension of the model. DevExpress is calling this feature <em>custom fields</em> and (again) it is marked as beta. This is not a feature I've looked at, but there are a few other non-XAF DevExpress novelties which I'd like to see working within XAF. These include <a href="https://www.devexpress.com/Subscriptions/New-2013-v2-Beta.xml?product=aspnet#ctl00_ctl00_Content_Content_ctl659">new themes</a> and <a href="https://www.devexpress.com/Subscriptions/New-2013-v2-Beta.xml?product=aspnet#ctl00_ctl00_Content_Content_ctl660">support for grid batch editing</a>.</p>

<h2>One warning</h2>

<p><img class="left" src="/images/blog/devexpress-13-2-review-001.png">
<img class="right" src="/images/blog/devexpress-13-2-review-002.png">
The default directories for the installation have changed again. I'm sure DevExpress has some good reason for this, but if, like me, you have several different versions installed you end up with a confusing directory tree. Whenever this happens I always end up having to modify build scripts and config files so that all my tools work as expected. For those of you who use Red Gate's <em>.NET Reflector</em>, you can find my config file <a href="https://gist.github.com/shamp00/7748150">in this gist</a>.</p>

<h2>Conclusions</h2>

<p>For the 13.2 release, DevExpress have focused on making the existing functionality work better rather than developing new modules.</p>

<p>Better reports. Better validation. A better framework all round.</p>
]]></content>
  </entry>
  
</feed>
