<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devexpress | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/devexpress/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-12-10T17:04:48+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevExpress 13.2 Review - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-2/"/>
    <updated>2013-12-10T16:10:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of a review of the new DevExpress 13.2. In <a href="/devexpress-13-dot-2-review-part-1">the last part</a> we looked in-depth at the new <a href="">Reports V2</a>. In this part I'll go over some of the other new features including the support for warnings and confirmations in the validation module.</p>

<h2>Soft Validation Rules</h2>

<p>With 13.2, DevExpress adds support for warning/confirmation messages to the validation engine. Warnings can be used to handle an unusual but valid data entry. An example would be:</p>

<p><blockquote><p>The date of birth results in an age of over 100. Are you sure?</p></blockquote></p>

<p>Here the age of the contact is unusual but not impossible, so instead of prohibiting it entirely, we ask the user for confirmation before saving.</p>

<p>Let's add this rule to the MainDemo. Open the model and navigate to the Validation node. Add a <code>RuleValueComparison</code> and configure it as follows</p>

<p><img src="/images/blog/devexpress-13-2-review-010.png"></p>

<p>Of course you could instead also define the same rule with an attribute on the <code>Birthday</code> property. Something like:</p>

<p>```c#
[RuleValueComparison("IsOlderThan100_Warning",</p>

<pre><code>DefaultContexts.Save,
ValueComparisonType.GreaterThan, "AddYears(Now(), -100)",
"Birthday makes this Contact older than 100. Are you sure?",
ParametersMode.Expression,
ResultType = ValidationResultType.Warning)]
</code></pre>

<p>```</p>

<p>Notice the new <code>ResultType</code> parameter is set to <code>ValidationResultType.Warning</code>.</p>

<p>Another typical use is to provide better handling of duplicates. Consider the following:</p>

<p>```c#
[RuleCombinationOfPropertiesIsUnique("DuplicateName_Warning",</p>

<pre><code>DefaultContexts.Save, 
"LastName;FirstName", 
"There is already a Contact with the name {FullName}. Are you sure?", 
ResultType = ValidationResultType.Warning)]
</code></pre>

<p>public class Contact : Person {
  //etc ...
```</p>

<p>And then this is what happens if I try to add another John Nilsen.</p>

<p><img src="/images/blog/devexpress-13-2-review-011.png"></p>

<p>Another scenario would be to warn the user of something which needs attention. Such as "Warning! You are running out of funds in your current account." Or "Warning! Deleting this record will format your hard drive."</p>

<h3>List Views</h3>

<p>Soft validation also works in the list views, even with multiple selection, but there are a couple of things that don't work very smoothly yet and I would expect the web implementation to evolve over the coming releases.</p>

<p>In order to demonstrate this I need to use a context which allows multiple selection such as deletion. So let's decorate our class with the following simple rule.</p>

<p>```c#</p>

<pre><code>[RuleCriteria("Deletion_Warning", DefaultContexts.Delete, "1=0", "Warning! Are you sure?", ResultType = ValidationResultType.Warning)]
</code></pre>

<p>```</p>

<p>Then I select all the contacts and press <code>Delete</code>, after the confirmation window, I get this:</p>

<p><img src="/images/blog/devexpress-13-2-review-014.png"></p>

<h3>Web Application</h3>

<p>Soft validation is also available in the web application. This is what a warning looks like.</p>

<p><img src="/images/blog/devexpress-13-2-review-015.png"></p>

<p>I would prefer to see a <em>Confirm</em> button rather than the current <em>Ignore</em> checkbox since a button requires a single click to validate.</p>

<p>When there are several warnings and errors at the same time, the current implementation displays them all. I think it would be preferable if warnings were not displayed unless there are no errors. Unless DevExpress provide this as an option soon, I will attempt to extend the controller in this regard in a future post.</p>

<h2>Other new features</h2>

<p>In the 13.2 release, there is now support for runtime extension of the model. DevExpress is calling this feature <em>custom fields</em> and (again) it is marked as beta. This is not a feature I've looked at, but there are a few other non-XAF DevExpress novelties which I'd like to see working within XAF. These include <a href="https://www.devexpress.com/Subscriptions/New-2013-v2-Beta.xml?product=aspnet#ctl00_ctl00_Content_Content_ctl659">new themes</a> and <a href="https://www.devexpress.com/Subscriptions/New-2013-v2-Beta.xml?product=aspnet#ctl00_ctl00_Content_Content_ctl660">support for grid batch editing</a>.</p>

<h2>One warning</h2>

<p><img class="left" src="/images/blog/devexpress-13-2-review-001.png">
<img class="right" src="/images/blog/devexpress-13-2-review-002.png">
The default directories for the installation have changed again. I'm sure DevExpress has some good reason for this, but if, like me, you have several different versions installed you end up with a confusing directory tree. Whenever this happens I always end up having to modify build scripts and config files so that all my tools work as expected. For those of you who use Red Gate's <em>.NET Reflector</em>, you can find my config file <a href="https://gist.github.com/shamp00/7748150">in this gist</a>.</p>

<h2>Conclusions</h2>

<p>For the 13.2 release, DevExpress have focused on making the existing functionality work better rather than developing new modules.</p>

<p>Better reports. Better validation. A better framework all round.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 13.2 Review - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-1/"/>
    <updated>2013-12-02T16:23:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-1</id>
    <content type="html"><![CDATA[<p>The first version of XAF I ever installed was called <em>eXpressApp-1.0.CTP2.exe</em> in July 2006! It has certainly come a long way since then.</p>

<p>This post is the first part of an overview of the brand new version XAF 13.2 which will be released any day now. This part is an in-depth review of the new report writer features (still in beta).</p>

<h2>Reports V2</h2>

<p>Prior to this version, XAF reports were not source code. They were objects serialized to a file and then loaded into the database during initialisation. This has a lot of shortcomings some of which I have addressed in previous <a href="/making-xaf-reports-even-better-part-1/">blog posts</a>.</p>

<p>But now finally it is now possible to build XAF reports directly from Visual Studio. DevExpress is calling this <a href="https://community.devexpress.com/blogs/eaf/archive/2013/11/08/easy-large-reports-in-13-2-ctp-of-reportsv2-module.aspx">Reports V2</a> and it largely supersedes my previous workarounds. The immediate advantages of Reports V2 are:</p>

<ul>
<li>Build time syntax checking</li>
<li>Easily merge/compare report versions</li>
<li>Painless version control of reports</li>
<li>Better unit testing possibilities</li>
</ul>


<p>Let's have a look at the details. DevExpress have provided us with a new sample project called <em>ReportsV2Demo</em>. The interesting part of the project solution is here:</p>

<p><img src="/images/blog/devexpress-13-2-review-003.png"></p>

<p>Notice that there are two folders containing reports. <em>PredefinedEditableReports</em> contains V1 reports. That is, the report is serialised as a string and loaded into the database during initialisation. If we look at the source for one of these, here is what it looks like:</p>

<p>```c#
namespace ReportV2Demo.Module.PredefinedEditableReports {</p>

<pre><code>public class OrdinalReportResource {
    public static string ReportLayout = @"
</code></pre>

<p>/// <XRTypeInfo>
///   <AssemblyFullName>DevExpress.XtraReportsVSuffix, Version=dllVersion, Culture=neutral, PublicKeyToken=dllPublicKeyToken</AssemblyFullName>
///   <AssemblyLocation>C:\Windows\Microsoft.Net\assembly\GAC_MSIL\DevExpress.XtraReportsVSuffix\v4.0_dllVersion__dllPublicKeyToken\DevExpress.XtraReportsVSuffix.dll</AssemblyLocation>
///   <TypeName>DevExpress.XtraReports.UI.XtraReport</TypeName>
///   <Localization>en-US</Localization>
///   <Version>VersionShort</Version>
///   <References>
///     <Reference Path=""C:\Windows\Microsoft.Net\assembly\GAC_MSIL\DevExpress.Persistent.BaseVSuffix\v4.0_dllVersion__dllPublicKeyToken\DevExpress.Persistent.BaseVSuffix.dll"" />
///     <Reference Path=""C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll"" /></p>

<p>/// etc.
```
The second folder, <em>PredefinedReadonlyReports</em> contains the V2 reports. With these reports, we can right-click and <strong>View Designer</strong> and up pops the XtraReport designer.</p>

<p><img src="/images/blog/devexpress-13-2-review-004.png"></p>

<p>Now I can make changes to my report within Visual Studio. In theory I can preview the report and view the HTML output. However, in the beta (13.2.4) the Preview view prints the report correctly but fails to fetch any data so all the fields are empty (maybe this is by design).</p>

<p>(Actually, I think the names of these folders could be improved. Maybe XafReports vs. XtraReports. Or RuntimeReports vs. DesigntimeReports.)</p>

<p>With respect to event scripts which in the past were particularly arduous to maintain, we now have two options.</p>

<h3>Scripts option 1 - Use serialized scripts</h3>

<p> Firstly, you can continue to use the scripts as before. You can use Visual Studio's <em>Properties</em> window to navigate to the script you need and then add the necessary code in the custom editor.</p>

<p><img src="/images/blog/devexpress-13-2-review-005.png"></p>

<p>Unfortunately, this is not the best from a maintenance perspective. The Scripts code editor view is not at all comparable to Visual Studio. No Intellisense. No CodeRush. In addition, the script itself gets serialized to a string.</p>

<p>```c#
this.ScriptsSource = "\r\nprivate void xrLabel2_BeforePrint(object sender,System.Drawing.Printing.PrintE" +</p>

<pre><code>"ventArgs e) {\r\n    string something = \"something\";\r\n}\r\n";
</code></pre>

<p>```
So unfortunately this approach does not improve things much with regard to compile-time syntax checking or code merging/version control.</p>

<h3>Scripts option 2 - Move the scripts to the C# file</h3>

<p>Now that the report is more like an <code>XtraReport</code>, we can attach an event in code. To test it I'll replace the output of the <em>First name</em> with the current time.</p>

<p>```c#
public partial class XtraReportOrdinary : DevExpress.XtraReports.UI.XtraReport
{</p>

<pre><code>public XtraReportOrdinary()
{
    InitializeComponent();
    xrLabel2.BeforePrint += xrLabel2_BeforePrint;
}

private void xrLabel2_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e)
{
    // Today's date and time
    xrLabel2.Text = DateTime.Now.ToString("G");
}
</code></pre>

<p>}
```</p>

<p>Now let's see if it works. We start up the web application and run the report.</p>

<p><img src="/images/blog/devexpress-13-2-review-006.png"></p>

<p>Excellent! You can see the report has successfully run the event and is displaying the current time instead of the first name. Here are the advantages of handling events this way.</p>

<ul>
<li>If there's a mistake in an event, the project will not compile until it's fixed.</li>
<li>The code is more readable.</li>
<li>The source code of the events can easily be compared with older versions.</li>
<li>The source code can be merged much more easily when handling version control conflicts.</li>
<li>Unit testing of the events becomes feasible.</li>
</ul>


<h3>Runtime tailoring</h3>

<p>Can an end-user still make a copy and tailor the report as they could with the older versions? Yes they can! Let's start up the WinForms client and have a look.</p>

<p><img src="/images/blog/devexpress-13-2-review-007.png"></p>

<p>Each of the <em>PredefinedReadonlyReports</em> has a new option <em>Copy predefined report</em>. Also, notice that the <em>Show Report Designer</em> is greyed out. Now compare with the copy.</p>

<p><img src="/images/blog/devexpress-13-2-review-008.png"></p>

<p>This time it is the <em>Copy predefined report</em> is greyed out and the familiar <em>Show Report Designer</em> has become available. (A little suggestion to the DevExpress crew. It would be better if the new copy got renamed to <em>Copy of Inplace Report</em> like Windows does when copying a file). Now we can open the Report Designer and customise the report further. Fantastic!</p>

<p>Let's check what happened to our events?</p>

<p><img src="/images/blog/devexpress-13-2-review-009.png"></p>

<p>Well, the serialized event was copied correctly, but the script that we put in the C# file has not been copied. A bit unfortunate - that event would have to be re-written or copied manually from the C# source file, but in most cases, additional tailoring of reports is a one-off occasional activity. For me at least, the benefits of having more maintainable code outweigh the inconvenience of losing the events when cloning a report.</p>

<h2>Conclusions</h2>

<p>Reports V2 is certainly the most significant improvement to the XAF reporting engine yet. I'm sure there are a few beta issues to iron out and a few further improvements down the line. In this post, I haven't looked at features such as views, sub-reports and custom reporting components, all of which deserve further investigation.</p>

<p>In my <a href="http://www.coprocess.com/">main development project</a>, there are currently 110 different reports and maintaining them takes some effort. Reports V2 will help considerably. Hats off to the DevExpress team.</p>

<h2>Next up</h2>

<p>In my next post I'll be taking a look at the new soft validation along with some other 13.2 improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to improve XAF grid layout for Chrome]]></title>
    <link href="http://ZeroSharp.github.com/how-to-improve-xaf-grid-layout-for-chrome/"/>
    <updated>2013-11-08T09:55:00+00:00</updated>
    <id>http://ZeroSharp.github.com/how-to-improve-xaf-grid-layout-for-chrome</id>
    <content type="html"><![CDATA[<p>This post proposes a workaround for a specific XAF rendering problem related to recent versions of Google Chrome.</p>

<p>Here is an XAF list view as it looks with IE 10 and DevExpress 13.1.8.</p>

<p><img src="/images/blog/chrome-grid-layout-001.png"></p>

<p>This is how the same view looks with Chrome 30. Notice how the column widths are rendered poorly. The minimum space is given to the string field and the date and bool fields are too wide.</p>

<p><img src="/images/blog/chrome-grid-layout-002.png"></p>

<p>What's going on? An update to the Chrome browser occurred in which has caused problems with the rendering of grid views in certain situations. The problem exists in all versions of Chrome great than 25 and also affects the <a href="http://www.google.com/chromeframe">Google Chrome Frame</a> plugin for IE.</p>

<p>DevExpress were able to fix some scenarios in 13.1.4 and 12.2.11 (such as column sorting), but there are other situations which still pose problems (<em>e.g.</em> the fix does not resolve the problem if the <em>Auto Filter Row</em> is enabled, which is the case above.)</p>

<p>Hopefully the Chrome devs will one day fix the root problem. You can keep an eye on <a href="https://code.google.com/p/chromium/issues/detail?id=178369">the issue here</a></p>

<h2>The fix</h2>

<p>Not so much a fix as a workaround. We use a <code>ViewController&lt;ListView&gt;</code> to set the grid layout to <code>UseFixedTableLayout</code>, but only for Chrome browsers. Something like this:</p>

<p>```c#
/// <summary>
/// Switches to fixed table layout for the main list view when using Chrome or ChromeFrame.
/// </summary>
public class ChromeSpecificListViewController : ViewController<ListView>
{</p>

<pre><code>protected override void OnViewChanging(View view)
{
    base.OnViewChanging(view);
    Active["IsChrome"] = IsChrome;
}

private static bool IsChrome
{
    get
    {
        HttpContext context = HttpContext.Current;
        return context != null &amp;&amp; context.Request.Browser.Browser == "Chrome";
    }
}

protected override void OnViewControlsCreated()
{
    base.OnViewControlsCreated();

    ASPxGridListEditor listEditor = View.Editor as ASPxGridListEditor;
    if (listEditor == null)
        return;

    ASPxGridView gridView = listEditor.Grid as ASPxGridView;
    if (gridView == null)
        return;

    gridView.Settings.UseFixedTableLayout = true;
}
</code></pre>

<p>}
```</p>

<p>The resulting view in Chrome:</p>

<p><img src="/images/blog/chrome-grid-layout-003.png"></p>

<p>That looks better. You may notice the columns will allways be the same width now, which is not quite as good as the IE rendering. As such, it may not be appropriate for all views. But since it's a <code>ViewController</code> it's easy to deactivate it by adding an <code>Active[]</code> criteria.</p>

<h4>References</h4>

<ul>
<li><a href="https://code.google.com/p/chromium/issues/detail?id=178369">Chrome issue</a></li>
<li><a href="http://www.devexpress.com/Support/Center/Question/Details/Q477066">Support Center Q477066</a></li>
<li><a href="https://www.devexpress.com/Support/Center/Question/Details/B235945">Support Center B235945</a></li>
<li><a href="https://www.devexpress.com/Support/Center/Question/Details/Q510468">Support Center Q510468</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three ways to store a list of currency codes in XAF]]></title>
    <link href="http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf/"/>
    <updated>2013-10-22T18:15:00+01:00</updated>
    <id>http://ZeroSharp.github.com/three-ways-to-store-a-list-of-currency-codes-in-xaf</id>
    <content type="html"><![CDATA[<p>In the <a href="/the-ugly-the-heavy-and-the-good">last post</a> we looked at three solutions to a relatively simple XAF requirement. In this post I'll discuss another XAF challenge, explain the options and provide a versatile and maintainable solution.</p>

<p>In my DevExpress XAF application, I have an object which has several properties like this:</p>

<p><img src="/images/blog/currency-list-editor-002.png"></p>

<p>In each case, the field is a comma-separated list of currency codes. These fields are not very important to the model - they are used mainly for reporting.</p>

<p>Let's look at 3 different ways of handling these fields.</p>

<h2>Option 1 - Use a string field</h2>

<p>The <em>lightest</em> option would be just to declare them as a normal XPO string field:</p>

<p>```c#
private string _List1Currencies;
public string List1Currencies
{</p>

<pre><code>get
{
    return _List1Currencies;
}
set
{
    SetPropertyValue("List1Currencies", ref _List1Currencies, value);
}
</code></pre>

<p>}
```
It's certainly simple and maintainable, but it's not very user-friendly. There is no fancy interface to help with the input.  We can perhaps improve things slightly by providing edit masks and/or validation rules to check the input, but careful typing is the only way to change the values.</p>

<h2>Option 2 - Declare an association property</h2>

<p>The <em>heaviest</em> option is to declare each such property as a many-to-many relationship.</p>

<p>```c#
public class Container: XPObject {</p>

<pre><code>public Container(Session session) : base(session) { }

public string Name;

[Association("List1Currencies")]
public XPCollection&lt;Currency&gt; List1 { 
    get { return GetCollection&lt;Currency&gt;("List1"); }
}
</code></pre>

<p>}</p>

<p>public class Currency: XPObject {</p>

<pre><code>public Currency(Session session) : base(session) { }

[Size(3)]
public string Code;

public string Name;

[Association("List1Currencies")]
public XPCollection&lt;Container&gt; List1Container { 
    get { return GetCollection&lt;Container&gt;("List1Container"); }
}
</code></pre>

<p>}
```</p>

<p>This works great - we get a nice interface for selecting the currencies and the end result looks like this:</p>

<p><img src="/images/blog/currency-list-editor-003.png"></p>

<p>However, it's quite a heavy solution for something quite simple. For each such relationship XPO will generate a new intermediate table. If we look at the database schema, we see the following:</p>

<p><img src="/images/blog/currency-list-editor-004.png"></p>

<p>And in the model there are two new views.</p>

<p><img src="/images/blog/currency-list-editor-005.png"></p>

<p>If we have 5 such properties, we end up with 5 intermediary tables and 10 new views.</p>

<p>Now, depending on your requirements that may be acceptable. If those relationships are important to your model, then the overhead may be justified. In my situation, these are minor fields and I do not want to burden the model or the database with extra complexity if I can avoid it.</p>

<h2>Option 3 - Create a custom property editor</h2>

<p>With the help of <a href="http://documentation.devexpress.com/xaf/CustomDocument3097.aspx">the documentation</a> and old Support Center issues, I was able to quite quickly put together a custom editor which gives the end user a nice interface while keeping it simple. The bulk of the logic is in the <code>SerializedListPropertyEditor</code> base class (see the end of the article for the link to the code), but the principle is as follows:</p>

<p>Create a new subclass:</p>

<p>```c#</p>

<pre><code>[PropertyEditor(typeof(String), false)]
public class CurrencyListPropertyEditor : SerializedListPropertyEditor&lt;Currency&gt;
{
    public CurrencyListPropertyEditor(Type objectType, IModelMemberViewItem info)
        : base(objectType, info) { }

    protected override string GetDisplayText(Currency currency)
    {
        return String.Format("{0}\t{1}", currency.Code, currency.Name);
    }

    protected override string GetValue(Currency currency)
    {
        return currency.Code;
    }
}
</code></pre>

<p>```</p>

<p>Then decorate each property with a <code>ModelDefault</code> attribute to set the <code>PropertyEditorType</code>.</p>

<p>```c#
private string _List1Currencies;
[ModelDefault("PropertyEditorType", "Solution1.Module.Web.CurrencyListPropertyEditor")]
public string List1Currencies
{</p>

<pre><code>get
{
    return _List1Currencies;
}
set
{
    SetPropertyValue("List1Currencies", ref _List1Currencies, value);
}
</code></pre>

<p>}
```</p>

<p>Now the user gets a pretty editor to select the currencies, but the field is just a string field.</p>

<p><img src="/images/blog/currency-list-editor-001.png"></p>

<p>The editor supports use of the <code>[DataSourceProperty]</code> and <code>[DataSourceCriteria]</code> properties too, so you can easily filter the collection.</p>

<p>It is easy to provide a similar editor for any object type - just create a new subclass of <code>SerializedListPropertyEditor&lt;T&gt;</code> where <code>T</code> is your persistent type.</p>

<p>You can download <a href="https://github.com/ZeroSharp/Xaf_CurrencyListPropertyEditor">a working sample project on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ugly, the Heavy and the Good: 3 solutions to an XAF layout problem]]></title>
    <link href="http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good/"/>
    <updated>2013-10-14T09:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/the-ugly-the-heavy-and-the-good</id>
    <content type="html"><![CDATA[<p>This post aims to look at various solutions to a seemingly simple layout change.</p>

<p>With <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, a lot of the difficult things are easy: authentication, authorisation, ORM, reporting, complex form layouts, themes, etc., are all made easy by XAF. On the other hand, some of the easy things are hard. It can be frustratingly difficult to make a small modification to the basic layout. We will look at an example of such a change and evaluate the recommended DevExpress approaches.</p>

<h2>The problem</h2>

<p>Whenever my XAF web application asks me to change my password, I get a screen like this:</p>

<p><img src="/images/blog/narrow-dialog-001.png"></p>

<p>Well that's a bit annoying - those edit boxes are far too wide. Wouldn't it look much better if it were narrower and centered? If we weren't using XAF, we'd probably have a separate <em>aspx</em> file for this view and we could just modify the html. With XAF there are several different recommended ways of modifying the output.</p>

<h2>Option 1: Use the model</h2>

<p>Well, one approach would be to use the layout designer to add some <em>EmptySpaceItems</em> to the default layout for the <code>ChangePasswordOnLogon</code>. Add something like this to <em>MainDemo.Web/Model.xafml</em>:</p>

<p>```xml
  <Views></p>

<pre><code>&lt;DetailView Id="ChangePasswordOnLogonParameters_DetailView"&gt;
  &lt;Layout&gt;
    &lt;LayoutGroup Id="Main" Removed="True" /&gt;
    &lt;LayoutGroup Id="Narrow" RelativeSize="50" HorizontalAlign="Center" Direction="Horizontal" IsNewNode="True"&gt;
      &lt;LayoutItem Id="EmptySpaceItem1" Index="0" ViewItem="" RelativeSize="25" IsNewNode="True" /&gt;
      &lt;LayoutGroup Id="Main" ShowCaption="False" Index="1" IsNewNode="True"&gt;
        &lt;LayoutGroup Id="Static" Index="0" Direction="Horizontal" ShowCaption="False" IsNewNode="True"&gt;
          &lt;LayoutItem Id="ChangePasswordImage" Index="0" ShowCaption="False" RelativeSize="1" ViewItem="ChangePasswordImage" IsNewNode="True" /&gt;
          &lt;LayoutItem Id="ChangePasswordText" Index="1" ShowCaption="False" RelativeSize="99" ViewItem="ChangePasswordText" IsNewNode="True" /&gt;
        &lt;/LayoutGroup&gt;
        &lt;LayoutGroup Id="SimpleEditors" Index="1" ShowCaption="False" IsNewNode="True"&gt;
          &lt;LayoutGroup Id="ChangePasswordOnLogonParameters" ShowCaption="False" Index="0" IsNewNode="True"&gt;
            &lt;LayoutItem Id="NewPassword" ViewItem="NewPassword" Index="0" IsNewNode="True" /&gt;
            &lt;LayoutItem Id="ConfirmPassword" ViewItem="ConfirmPassword" Index="1" IsNewNode="True" /&gt;
          &lt;/LayoutGroup&gt;
        &lt;/LayoutGroup&gt;
      &lt;/LayoutGroup&gt;
      &lt;LayoutItem Id="EmptySpaceItem2" Index="2" ViewItem="" RelativeSize="25" IsNewNode="True" /&gt;
    &lt;/LayoutGroup&gt;
  &lt;/Layout&gt;
&lt;/DetailView&gt;
</code></pre>

<p>  </Views>  <br/>
```</p>

<p>Ugh. What a lot of work for such a small change. Another approach would be to make an equivalent model modification in code by subclassing <code>ModelNodesGeneratorUpdater&lt;ModelViewsNodesGenerator&gt;</code> but it would be even more effort.</p>

<p>Is it easy to maintain? Not especially. If we make any changes to the parameters object, we would have to update the layout again. It is quite likely we'd have to make revisions when upgrading the framework.</p>

<p>And does it work?</p>

<p><img src="/images/blog/narrow-dialog-003.png"></p>

<p>No!. It's a little better but it still looks ugly because the OK and Cancel buttons are still out wide.</p>

<p><blockquote><p>Verdict: too ugly</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the layout changes are within the main view area.</li>
</ul>


<p>Let's look at another option.</p>

<h2>Option 2: Customise the ASP.NET template</h2>

<p>If we were to <a href="http://documentation.devexpress.com/#Xaf/CustomDocument3460">follow the instructions here</a> we can modify the HTML exactly as we want. Unfortunately, this is even more work. We would need to:</p>

<p><img src="/images/blog/narrow-dialog-004.jpg"></p>

<ul>
<li>Create a new MyNarrowTemplateDialogContent.ascx</li>
<li>Modify the HTML within it to add a width to <code>Form1</code></li>
<li>Find some way of applying this template to only the detail view for <em>Change Password</em>. This is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q207853">currently not easy</a> but there is an example project at the end of <a href="http://www.devexpress.com/Support/Center/Question/Details/Q204692">this issue</a>.</li>
</ul>


<p>We'd end up with quite a few new files to maintain for just one little layout fix...</p>

<p>Also, another problem with this approach is that it needs reviewing whenever a new version of the framework is released, because the default templates may have changed. Too much maintenance work for such a little change.</p>

<p><blockquote><p>Verdict: too heavy</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When the same layout changes are to be applied to the views of all or many different object types.</li>
<li>When the changes you are making are significant enough that they are hard to achieve by the solution below.</li>
</ul>


<h2>Option 3: Use a ViewController</h2>

<p>The <code>ViewController</code> and <code>WindowController</code> are well-suited to this sort of task.</p>

<p>```c#
public class NarrowDialogViewController : ViewController<DetailView>
{</p>

<pre><code>protected override void OnActivated()
{
    base.OnActivated();
    Active["ShouldUseNarrowForm"] = View.ObjectTypeInfo.Type == typeof(ChangePasswordOnLogonParameters); // see side-note below
}

protected override void OnViewControlsCreated()
{
    base.OnViewControlsCreated();
    if (WebWindow.CurrentRequestPage != null)
    {
        var htmlForm = WebWindow.CurrentRequestPage.FindControl("Form2") as HtmlForm; // see note below
        if (htmlForm != null)
        {
            // make the form narrow
            htmlForm.Attributes.CssStyle.Add("width", Unit.Percentage(40).ToString());
            // center the form
            htmlForm.Attributes.CssStyle.Add("margin-left", "auto");
            htmlForm.Attributes.CssStyle.Add("margin-right", "auto");
        }
    }
}
</code></pre>

<p>}
```</p>

<p>A side note: do not use <code>TargetObjectType == typeof(ChangePasswordOnLogonParameters)</code> instead of the <code>OnActivated()</code> override. This is because <code>ChangePasswordParameters</code> which is used when the user clicks on <code>Change My Password</code> is a subclass of <code>ChangePasswordOnLogonParameters</code> and we do <em>not</em> want that view to be narrowed because it appears in a popup window instead of the main window.</p>

<p>This solution is quite maintainable. We can delimit the views for which the modification applies making the controller is active. And the modification itself is relatively simple. It is also reasonably robust with regard to DevExpress upgrades. (They did just change the name of the main dialog Form <code>Form1</code> in 12.1 to <code>Form2</code> in 12.2, but it was the first time in years and it was simple to fix. Alternatively, you could use <code>FindControl</code> instead of using the hard-wired name).</p>

<p>Here's the resulting output, horizontally centered in the browser window:</p>

<p><img src="/images/blog/narrow-dialog-002.png"></p>

<p><blockquote><p>Verdict: good</p></blockquote></p>

<p><em>When</em> <strong>should</strong> <em>you use this approach?</em>:</p>

<ul>
<li>When a layout change is easy to apply by modifying styles. When a change pertains only to one or few specific object types.</li>
</ul>


<h2>Conclusions</h2>

<p>In this case, using a <code>ViewController</code> leads to relatively simple code and ease of maintenance. Other situations may well be better served by the other approaches.</p>

<p>DevExpress XAF is a powerful mature product. As such, it can be daunting to new users because of all the different approaches for applying changes. It is always possible to find an elegant maintainable solution, but sometimes it is not obvious, even when the required change is small.</p>
]]></content>
  </entry>
  
</feed>
