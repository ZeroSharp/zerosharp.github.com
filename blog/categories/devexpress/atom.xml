<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devexpress | ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/blog/categories/devexpress/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2015-12-09T17:01:28+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevExpress 2015.2 review part 1]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1/"/>
    <updated>2015-12-09T14:43:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1</id>
    <content type="html"><![CDATA[<p>Last week, DevExpress released 2015.2.3, their second major version of the year.</p>

<p>There are already some good blog posts about the changes:</p>

<ul>
<li><a href="http://www.codeproject.com/Tips/1060260/Whats-New-for-XAF">Michael Bogaerts</a></li>
<li><a href="http://vimarx.com/blog/92/">Gustavo Marzioni</a></li>
<li><a href="https://www.devexpress.com/Subscriptions/New-2015.xml?product=xaf">DevExpress What's New</a></li>
</ul>


<p>Rather than repeat general overviews provided in these, this two-part blog post is more of a 'deep dive'. In particular I'll be looking at two of the new features in the expressApp Framework (XAF).
Today I'll cover the new XML serialisation in the report designer. Tomorrow's post will examine the new batch editing features.</p>

<h2>Reports</h2>

<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report that v1 reports are still very much present.'>
Reporting is definitely one of the areas where XAF has progressed the most in recent versions. There is now an in-browser report designer (since 14.2) and an alternative implementation of the reports (reports v2, since 13.2).</p>

<p>In this release, I was a little worried that the support for Reports v1 would be deprecated, since our production system has over 100 custom reports and we have not yet looked for an easy way to migrate these to v2. I'm happy to report that v1 reports are still very much present.
</span></p>

<p>However there are also a number of new features in v2 Reports, not least of which is the ability to store the report's layout in XML. There's currently not a lot of documentation about the XML serialization, so let's dig in and see what we can discover.</p>

<h3>XML serialization deep dive</h3>

<p>First I ran the demo and ran the <em>Copy Predefined Report</em> on the Contacts Report.</p>

<p>Then I ran the report designer and added a dummy <code>OnBeforePrint()</code> script to one of the table's cells.</p>

<p><code>c#
private void xrTableCell8_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
  var x = 23;
}
</code></p>

<p>Then, in the MainDemo's Updater.cs file, I placed the following code.
```c#
var reportData = ObjectSpace.FindObject<ReportDataV2>(new BinaryOperator("DisplayName", "Contacts Report") &amp; new BinaryOperator("IsPredefined", new OperandValue(false)));
if (reportData != null)
{</p>

<pre><code>var report = ReportDataProvider.ReportsStorage.LoadReport(reportData);
report.SaveLayoutToXml(@"C:\Temp\ContactsReport.xml");
report.SaveLayout(@"C:\Temp\ContactsReport.repx");
</code></pre>

<p>}
```</p>

<p>This creates two output files. One of them contains the familiar <em>.repx</em> format. The other contains the newer <em>.xml</em> serialization.</p>

<p>The contents of the XML file is displayed below and is 77 lines long.</p>

<p><div><script src='https://gist.github.com/f085bf10dd65ace5d229.js?file=ContactReport.xml'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>By comparison, the <a href="https://gist.github.com/shamp00/f085bf10dd65ace5d229#file-contactsreport-repx">ContactReport.repx</a> is 408 lines long and much harder to read.</p>

<p>As you can see the XML file is <em>much</em> smaller and simpler than the <em>.repx</em> file. At first I didn't believe it contained all the necessary information, so I started up the MainDemo WinForms application, created a blank new report and imported the layout and the layout looks correct and the preview loads with data as expected.</p>

<h3>Scripts</h3>

<p>What about scripts? Are they serialized in the xml version? You bet. In the XML export you can see this has been serialised near the top of the file.</p>

<p><code>xml
ScriptsSource=
   "&amp;#xD;&amp;#xA;private void xrTableCell8_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e)
   {&amp;#xD;&amp;#xA;  var x = 23;&amp;#xD;&amp;#xA;}&amp;#xD;&amp;#xA;"
</code></p>

<h3>Setup</h3>

<p>In order to use this new XML serialization of report layouts, you must set the ReportsV2 module to use it.</p>

<p><code>c#
reportsModuleV2.ReportStoreMode = ReportStoreModes.XML
</code></p>

<p>This will most likely invalidate any reports which have already been serialized to the database. There are some notes on how to fix this <a href="https://www.devexpress.com/Support/Center/Question/Details/T275363">here</a>.</p>

<h3>Default for new projects</h3>

<p>What about new projects? I created a new solution and chose <em>DevExpress 15.2 XAF Solution Wizard</em> as the type of solution and added the reports module. Now when I navigate to the <code>WinApplication.Designer.cs</code> file, I find:</p>

<p><code>c#
//
// reportsModuleV2
//
this.reportsModuleV2.ReportDataType = typeof(DevExpress.Persistent.BaseImpl.ReportDataV2);
this.reportsModuleV2.ReportStoreMode = DevExpress.ExpressApp.ReportsV2.ReportStoreModes.XML;
</code></p>

<p>So the default storage method for new projects is now XML.</p>

<h3>Conclusion</h3>

<p>The XML serialisation looks like a considerable upgrade to the mechanism for storing, loading and saving reports. Now I just need to find a good way of converting my existing v1 reports... Perhaps a future blog post.</p>

<h2>Coming up</h2>

<p>Tomorrow I'll be looking at the new <a href="https://community.devexpress.com/blogs/eaf/archive/2015/11/24/xaf-validation-module-enhancements-for-windows-and-the-web-coming-soon-in-v15-2.aspx">batch editing in grids</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 3]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3/"/>
    <updated>2015-09-16T09:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report there is a considerable improvement under load in version 15.1.'>
This is the third part of a <a href="/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2">series</a> about migrating a large application from XAF 12.1 to XAF 15.1. In this part I will compare the results of a simple stress test between the versions.</p>

<p>I have described in previous posts how to <a href="/load-testing-xaf-overview/">stress test XAF applications</a>. One of our most basic tests is to simulate 25 users cycling through all the navigation tabs for an hour. I'm happy to report there is a considerable improvement under load in version 15.1.</p>

<p>(Note that we purposefully stress test against a single web application so that we can compare apples with apples. In production we have multiple instances load-balanced.)</p>

<p>Here is an interactive summary of the 15.1 results:
</span></p>

<p>Here is version 15.1. There were zero errors and 382 completed scripts.</p>

<p>By comparison, the same test against DevExpress 12.1 yielded only 258 completions. So 15.1 shows a 48% performance improvement over 12.1.</p>

<p><iframe class="cmd" src="https://load.wpm.neustar.biz/load/test/share/e4c5e109f8f04ceebd72cdb5c93eb1c2" width="1024" height="512"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2/"/>
    <updated>2015-09-15T10:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of a <a href="/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1">series</a> about migrating a large application from XAF 12.1 to XAF 15.1.</p>

<p>In the 13.1 release, DevExpress made a change to the way XAF <code>Validator</code> class is used. It now requires an <code>IObjectSpace</code> parameter corresponding to the object. It is needed to correctly evaluate any rules which are descendants of the <code>RuleSearchObjectProperties</code>. These include:</p>

<ul>
<li><code>RuleCombinationOfPropertiesIsUnique</code></li>
<li><code>RuleIsReferenced</code></li>
<li><code>RuleObjectExists</code></li>
<li><code>RuleUniqueValue</code></li>
</ul>


<p>A lot of our code has been around for years now and the older parts rely heavily on <code>Session</code> and <code>UnitOfWork</code> instead of <code>IObjectSpace</code> For the most part our application used <code>IObjectSpace</code> only within <code>ViewControllers</code>.</p>

<p>But there were several situations where we need the validator where we don't have an <code>IObjectSpace</code>. For instance we sometimes need to validate from within <a href="https://documentation.devexpress.com/#eXpressAppFramework/clsDevExpressPersistentBaseActionAttributetopic">method actions</a> (decorated with the <code>ActionAttribute</code>). For performance reasons, we pass criteria to our middleware and it uses a <code>UnitOfWork</code> to run the method on each object. So in this case, there was no <code>IObjectSpace</code> to pass to the XAF <code>Validator</code>.</p>

<p><span class='pullquote-right' data-pullquote='When writing code I often find myself having to decide between the &#8216;quick&#8217; fix and the &#8216;right&#8217; fix.'>
Here I had a refactoring dilemma to solve. Either I need to rewrite all of the affected rules so that they no longer make use of the <code>IObjectSpace</code>. For instance, I could use <code>RuleFromBoolProperty</code> instead. In our application, this would mean rewriting about 50 rules. Or alternatively, I could go through the entire code base looking for <code>new UnitOfWork()</code> and <code>new Session()</code> and try to use an <code>IObjectSpace</code> instead. When writing code I often find myself having to decide between the 'quick' fix and the 'right' fix. Here, moving to <code>IObjectSpace</code> throughout is clearly the right fix and although it would take more time to implement, the system will be more in-line with best XAF practices throughout.
</span></p>

<p> Eventually, the refactoring was complete and all unit tests are passing. I was eager to run a multi-user load stress test against the 15.1 version to compare performance under load. I have described in previous posts how to <a href="/load-testing-xaf-overview/">stress test XAF applications</a>. I'll be sharing the results in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1/"/>
    <updated>2015-09-14T10:01:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1</id>
    <content type="html"><![CDATA[<p>I am the principal software architect for a treasury application in use by over 100 large multinational corporates. Upgrades are generally met with reluctance in the enterprise world and so we've been somewhat stuck on an old version of the expressAppFramework.</p>

<p>Recently I've been pushing to move to the newer version and I have spent about three weeks migrating the substantial code base to XAF 15.1 and .NET 4.6.</p>

<p>The steps are:</p>

<ul>
<li>Run the project converter tool.</li>
<li>Try to compile. Identify the errors which are easily fixable (check with the 'breaking changes' documents from DevExpress.)</li>
<li>When in doubt, compare the libraries with a decompiler like .NET Reflector.</li>
<li>Refactor where necessary (ensure you have unit tests for the behaviour you are changing).</li>
</ul>


<p>On this last point, my whole approach to refactoring has been shaped by Michael C. Feather's book <a href="http://amzn.com/0131177052"><em>Working Effectively with Legacy Code</em></a>. Highly recommended for anyone maintaining complex applications regardless of whether the code is legacy or not...</p>

<p>I was pleasantly surprised that I was very quickly able to get everything to compile and even run. The layout was not correct, but a lot of things worked straight away.</p>

<p>I then had to spend some time restoring the customisations we'd made to the default ASP.NET layout. In XAF 12.1 these were applied directly to <em>default.aspx.cs</em> and <em>dialog.aspx.cs</em>, but in 15.1 these no longer exist. Instead, you can customise layout by providing your own alternate templates. I was expecting this to be much harder, but by <a href="https://documentation.devexpress.com/#eXpressAppFramework/CustomDocument112696">following the instructions in the documentation</a> I managed to restore our layout quite easily.</p>

<p>I still had a lot of failing unit tests. One seemingly minor change to XAF validation proved to be a lot of work to fix in our code.
Since 13.1, the XAF <code>Validator</code> class now requires an <code>IObjectSpace</code> parameter in the constructor. This was by far the biggest problem to fix and is the subject of the next blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force a complete garbage collection in an ASP.NET application.]]></title>
    <link href="http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application/"/>
    <updated>2015-08-05T09:26:00+01:00</updated>
    <id>http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application</id>
    <content type="html"><![CDATA[<p>How can I force a full garbage collection easily within an ASP.NET application? The method here is for XAF web applications but the same approach should work with any ASP.NET app.</p>

<p><span class='pullquote-right' data-pullquote='First up: Never mess with the .NET garbage collector.'>
First up: Never mess with the .NET garbage collector.</p>

<p>I sometimes mess with the garbage collector in .NET when I'm trying to pin down some memory problem. Also, after <a href="/load-testing-xaf-part-1-deploying/">a load test</a>, I prefer to force the garbage collector to collect everything it can so that I can check that the memory drops as expected.
</span></p>

<p>Garbage collection in .NET is complex and it is hard to be sure you've done it correctly. <a href="///%20See%20http://blogs.msdn.com/b/tess/archive/2006/02/02/net-memory-my-object-is-not-rooted-why-wasn-t-it-garbage-collected.aspx">This ancient article by Tess Ferrandez</a> pointed me in the following direction.</p>

<p>```c#
void ForceGarbageCollection()
{</p>

<pre><code>/// This will garbage collect all generations (including large object), 
GC.Collect(3);
/// then execute any finalizers
GC.WaitForPendingFinalizers();
/// and then garbage collect again to take care of all the objects that had finalizers.            
GC.Collect(3);
</code></pre>

<p>}
```</p>

<p>How can we easily trigger this routine in an XAF web application? First, add the following to the <em>Global.asax.cs</em> file:</p>

<p>```c# Global.asax.cs
protected void Application_BeginRequest(object sender, EventArgs e) {</p>

<pre><code>var shouldForceGarbageCollection = Request.QueryString["ForceGC"] != null;
if (shouldForceGarbageCollection)
{
    ForceGarbageCollection();
    Response.Write("&lt;H1&gt;Forced garbage collection OK!&lt;/H1&gt;");
}
</code></pre>

<p>}
```</p>

<p>Then whenever you want to trigger a garbage collection, visit the following URL:</p>

<pre><code>http://.../Login.aspx?ForceGC=1
</code></pre>

<p>You should see the text <strong>'Forced garbage collection OK'</strong> in the top left of the browser window.</p>
]]></content>
  </entry>
  
</feed>
