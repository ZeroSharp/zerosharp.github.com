<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2016-02-01T08:06:24+00:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 4: Connecting the parts]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts/"/>
    <updated>2016-02-01T09:44:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-4-connecting-the-parts</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>: <a href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/">Part 1</a>, <a href="http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha/">part 2</a>, <a href="http://ZeroSharp.github.com/serverless-framework-part-3-the-guts/">part 3</a>.</p>

<h2>The Password of the Day Generator class</h2>

<p>First up we need a class to generate and check the password of the day. For the moment, let&#8217;s pretend the password of the day is always the string <em>&#8220;Password&#8221;</em>. Put the following typescript class in <em>nodejscomponent/src</em>.</p>

<figure class='code'><figcaption><span>nodejscomponent/src/passwordOfTheDay.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">checkPotd</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">PasswordGenerator</span><span class="p">().</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">PasswordGenerator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">generate</span><span class="p">(</span><span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">)</span> <span class="o">:</span> <span class="nx">string</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>        <span class="c1">// generate today&#39;s password</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Password&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  
</span><span class='line'>  <span class="nx">check</span><span class="p">(</span><span class="nx">password</span> <span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>        <span class="c1">// check the value matches today&#39;s password of the day</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">password</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now add a mocha test for it.</p>

<figure class='code'><figcaption><span>nodejscomponent/src/test/passwordOfTheDayTest.ts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;../../typings/mocha/mocha.d.ts&quot; /&gt;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">PasswordOfTheDay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../passwordOfTheDay&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Generator&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">subject</span> <span class="o">:</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">PasswordGenerator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#generate&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should generate the password&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">24</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="s2">&quot;Password&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;Password&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return false when the password is incorrect&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s2">&quot;garbage&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;false&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;#check&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return true when the password is correct&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="nx">subject</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s2">&quot;Password&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected &#39;true&#39; but was &quot;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now compile everything.</p>

<pre><code>$ cd nodejscomponent
$ tsc
</code></pre>

<p>You will now find that there is a corresponding javascript file in the <em>lib</em> folder</p>

<figure class='code'><figcaption><span>nodejscomponent/src/passwordOfTheDay.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">checkPotd</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">PasswordGenerator</span><span class="p">().</span><span class="nx">check</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">checkPotd</span> <span class="o">=</span> <span class="nx">checkPotd</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PasswordGenerator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">PasswordGenerator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">PasswordGenerator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">generate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// generate today&#39;s password</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;Password&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">PasswordGenerator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// check the value matches today&#39;s password of the day</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">password</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">PasswordGenerator</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">PasswordGenerator</span> <span class="o">=</span> <span class="nx">PasswordGenerator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And likewise for the mocha test in <em>lib/test</em>. Now to run those tests:</p>

<pre><code>$ npm test

&gt; @0.0.1 pretest /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; tsc

&gt; @0.0.1 test /Users/ra/Projects/Coprocess/serverlessPotd/nodejscomponent
&gt; mocha ./lib/test

Generator
    #generate
    ✓ should generate the password
    #check
    ✓ should return false when the password is incorrect
    #check
    ✓ should return true when the password is correct

3 passing (10ms)
</code></pre>

<p>Nice. Next, modify the main entry point of the component <em>index.js</em>.</p>

<figure class='code'><figcaption><span>nodejscomponent/lib/index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Dependencies</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PasswordOfTheDay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./passwordOfTheDay&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">PasswordOfTheDay</span><span class="p">.</span><span class="nx">checkPotd</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="nx">result</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how we make use of <code>event.password</code> which is the parameter we configured in <a href="http://ZeroSharp.github.com/serverless-framework-part-3-the-guts/">part 3</a> in the <code>s_function.json</code> file.</p>

<p>Let&#8217;s deploy!</p>

<pre><code>$ serverless dash deploy
_______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.1.5
`-------'

Serverless: Select the assets you wish to deploy:
    nodejscomponent - potd - check
    function - nodejscomponent/potd/check
    endpoint - nodejscomponent/potd/check@potd/check~GET
    - - - - -
&gt; Deploy

Serverless: Deploying functions in "development" to the following regions: eu-west-1  
Serverless: ------------------------  
Serverless: Successfully deployed functions in "development" to the following regions:   
Serverless: eu-west-1 ------------------------  
Serverless:   nodejscomponent/potd/check: arn:aws:lambda:eu-west-1:962613113552:function:serverlessPotd-nodejscomponent-potd-check:development  

Serverless: Deploying endpoints in "development" to the following regions: eu-west-1  
Serverless: Successfully deployed endpoints in "development" to the following regions:  
Serverless: eu-west-1 ------------------------  
Serverless:   GET - potd/check - https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check  
</code></pre>

<p>And lets visit that URI</p>

<pre><code>https://[...]amazonaws.com/development/potd/check?password=nonsense
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">message:</span> <span class="err">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>https://[...]amazonaws.com/development/potd/check?password=Password
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">message:</span> <span class="err">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rock and roll. A working password checker running on Lambda in the Amazon cloud.</p>

<p>Next up - we&#8217;ll extend the <code>PasswordGenerator</code> class to pull in a node package and generate a better password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 3: The guts of a serverless service]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-3-the-guts/"/>
    <updated>2016-01-29T17:44:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-3-the-guts</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series about the <a href="https://github.com/serverless/serverless">Serverless framework</a>. For those following along, <a href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/">part 1</a> and <a href="http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha/">part 2</a> have been updated for the current latest version of Serverless 0.1.5.</p>

<p>In this post, we&#8217;ll discuss how a Serverless function actually works.</p>

<h2>The guts of a serverless function</h2>

<p>When we visited the deployed endpoint at the end of <a href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/">part 1</a>, it correctly returned some JSON content.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">message:</span> <span class="nt">&quot;Your Serverless function ran successfully!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Where does this message come from? Look at <em>index.js</em> in the component&#8217;s <em>lib</em> folder.</p>

<figure class='code'><figcaption><span>nodejscomponent/lib/index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Lib</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Your Serverless function ran successfully!&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it&#8217;s the <em>handler.js</em> file in the function&#8217;s subfolder which calls it.</p>

<figure class='code'><figcaption><span>nodejscomponent/potd/check/handler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Serverless Module: Lambda Handler</span>
</span><span class='line'><span class="cm"> * - Your lambda functions should be a thin wrapper around your own separate</span>
</span><span class='line'><span class="cm"> * modules, to keep your code testable, reusable and AWS independent</span>
</span><span class='line'><span class="cm"> * - &#39;serverless-helpers-js&#39; module is required for Serverless ENV var support.  Hopefully, AWS will add ENV support to Lambda soon :)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Require Serverless ENV vars</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ServerlessHelpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;serverless-helpers-js&#39;</span><span class="p">).</span><span class="nx">loadEnv</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Require Logic</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lib</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../../lib&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Lambda Handler</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">lib</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our case we&#8217;re coding a password checking function. The URI will look something like this:</p>

<pre><code>http://something.amazonaws.com/development/potd/check?password=P455w0rd
</code></pre>

<p>We&#8217;ll modify <em>lib/index.js</em> to retrieve the value from the query parameter <code>password</code> and return <code>true</code> if the password is correct and <code>false</code> otherwise. But first we need to set up the parameter.</p>

<h2>Configuring the function parameter</h2>

<p>In each function&#8217;s directory, there is a file named <em>s-function.json</em> which allows you to specify the details of the function call. Add a section to the <code>requestTemplates</code> as follows:</p>

<figure class='code'><figcaption><span>nodejscomponent/potd/check/s-function.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;check&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;handler&quot;</span><span class="p">:</span> <span class="s2">&quot;potd/check/handler.handler&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;timeout&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;memorySize&quot;</span><span class="p">:</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;excludePatterns&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;envVars&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;endpoints&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;potd/check&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;authorizationType&quot;</span><span class="p">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;apiKeyRequired&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;requestParameters&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nt">&quot;requestTemplates&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'><span class="err">+</span>       <span class="nt">&quot;application/json&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'><span class="err">+</span>           <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;$input.params(&#39;password&#39;)&quot;</span>
</span><span class='line'><span class="err">+</span>       <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;responses&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;400&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;statusCode&quot;</span><span class="p">:</span> <span class="s2">&quot;400&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;default&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;statusCode&quot;</span><span class="p">:</span> <span class="s2">&quot;200&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;responseParameters&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>          <span class="nt">&quot;responseModels&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>          <span class="nt">&quot;responseTemplates&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;application/json&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <em>s-function.json</em> file is also where you can configure if the service accepts <code>POST</code> or <code>PUT</code> or <code>DELETE</code> requests. Here we are only interested in <code>GET</code>.</p>

<p>You can easily tailor the <code>requestTemplates</code> in this file to extract whatever parameters you need in your lambda function.</p>

<h2>Retrieving the parameter value</h2>

<p>Now back in <em>index.js</em> you will find that the function&#8217;s <code>event</code> parameter has a property <code>password</code> which is set to the value of the querystring parameter.</p>

<figure class='code'><figcaption><span>nodejscomponent/lib/index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parameterValue</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">password</span><span class="p">;</span> <span class="c1">// the querystring parameter</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="nx">parameterValue</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redeploy.</p>

<pre><code> $ serverless dash deploy
</code></pre>

<p>Visit the URI.</p>

<pre><code>http://something.amazonaws.com/development/potd/check?password=P455w0rd
</code></pre>

<p>The response is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">message:</span> <span class="nt">&quot;P455w0rd&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ready for implementation</h2>

<p>We now have all the pieces we need. Serverless, Typescript, Mocha and AWS. In the next post I&#8217;ll show how to wire up everything get it working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 2: TypeScript and Mocha]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha/"/>
    <updated>2016-01-12T08:08:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-2-typescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Happy New Year everyone!</p>

<p>This is the second part of a series about the <a href="https://github.com/serverless/serverless">Serverless</a> framework. Read <a href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/">the first part</a> to get up and running.</p>

<p>First I&#8217;ll describe the webservice I&#8217;m building. Then we&#8217;ll configure our environment for Typescript and Mocha testing.</p>

<h2>Poor man&#8217;s dual factor authentication via a password of the day</h2>

<p><span class='pullquote-right' data-pullquote='it&#8217;s about not having the hassle of administering a server.'>
I&#8217;m the technical lead for an enterprise application which is in use by about 100 large multinational corporates. As part of the installation process, we ask for a registration code which is based on the date. The customer has to call us to get the password of the day. This gives us an opportunity to engage with the customer and also gives us little more control. It&#8217;s a simple form of dual factor authorization where one of the factors requires a phone call.</p>

<p>In the old days, the routine for checking the validity of the password was part of the source code, but we&#8217;ve since moved the checking function to a web service.</p>

<p>It&#8217;s my goal to replace this &#8216;password of the day&#8217; check function with a Serverless module. The service will take a password as input and check that it matches the password of the day.</p>

<p>It&#8217;s a tiny, simple, rarely-used web service but AWS lambda is still a great fit for it. Although lambda can scale if necessary, in this case it&#8217;s about not having the hassle of administering a server.
</span></p>

<h2>Mocha and TypeScript</h2>

<h2>New version 0.1.5</h2>

<p><span class="fluo">Edit: since the original version of this post, a new version 0.1.5 of Serverless was released. I have updated the tutorial below to reflect the newer version. </span></p>

<p>Let&#8217;s do things properly and set up a testing framework.</p>

<p>Make sure you&#8217;re in the component folder.</p>

<pre><code>$ cd nodejscomponent
</code></pre>

<p>Then we&#8217;ll install Mocha.</p>

<pre><code>$ npm install mocha --save-dev
mocha@2.3.4 node_modules/mocha
├── escape-string-regexp@1.0.2
├── diff@1.4.0
├── commander@2.3.0
├── supports-color@1.2.0
├── growl@1.8.1
├── debug@2.2.0 (ms@0.7.1)
├── jade@0.26.3 (commander@0.6.1, mkdirp@0.3.0)
├── mkdirp@0.5.0 (minimist@0.0.8)
└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)
</code></pre>

<p>Next we&#8217;ll install TypeScript. Of course you can use plain javascript if you prefer. My background is C#: I make fewer dumb mistakes with TypeScript. It looks like there <a href="https://github.com/serverless/serverless/issues/371">is a typescript plugin in the pipeline</a> which will make typescript integration even easier in the future, but for now:</p>

<pre><code>$ npm install typescript --save
typescript@1.7.5 node_modules/typescript

$ npm install tsd -g
npm WARN engine joi-assert@0.0.3: wanted: {"node":"&gt;= 0.10.0 &lt;= 0.11.0"} (current: {"node":"4.2.3","npm":"2.14.7"})
/usr/local/bin/tsd -&gt; /usr/local/lib/node_modules/tsd/build/cli.js
tsd@0.6.5 /usr/local/lib/node_modules/tsd
├── diff@1.4.0
├── assertion-error@1.0.0
├── type-detect@0.1.2
... etc ...

$ tsd init
-&gt; written tsd.json
-&gt; written typings/tsd.d.ts
</code></pre>

<p>Now we add the type definitions for Mocha.</p>

<pre><code>$ tsd install mocha --save
- mocha / mocha    
&gt;&gt; running install..
&gt;&gt; written 1 file:
    - mocha/mocha.d.ts
</code></pre>

<p>We need a config file for the TypeScript compiler. This goes in the same module directory (<em>back/modules/potd</em> in my case).</p>

<figure class='code'><figcaption><span>tsconfig.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;compilerOptions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;module&quot;</span><span class="p">:</span> <span class="s2">&quot;commonjs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;target&quot;</span><span class="p">:</span> <span class="s2">&quot;es5&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;noImplicitAny&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sourceMap&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;declaration&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;outdir&quot;</span><span class="p">:</span> <span class="s2">&quot;lib&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;exclude&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;node_modules&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now make a subdirectory for our TypeScript source files.</p>

<pre><code>$ mkdir src
$ mkdir src/test
</code></pre>

<p>Next up we need to modify the package.json file to add a scripts section. Only the <code>"scripts"</code> section needs changing.</p>

<figure class='code'><figcaption><span>package.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;potd&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Dependencies for a Password of the day Serverless Module&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Robert Anderson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git://github.com/&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3.4&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;serverless-helpers-js&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.0.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;typescript&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.7.5&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;prepublish&quot;</span><span class="p">:</span> <span class="s2">&quot;tsc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;pretest&quot;</span><span class="p">:</span> <span class="s2">&quot;tsc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;mocha ./lib/test&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve finished setting up everything for TypeScript and Mocha. Whenever you run <code>tsc</code>, any TypeScript files in <em>/src</em> will get compiled to javascript in <em>/lib</em>. And running <code>npm test</code> will compile and then run any Mocha tests in <em>/lib/test</em>.</p>

<p>The <a href="https://github.com/ZeroSharp/ServerlessPotd">source code so far</a> is on GitHub. Note the default <em>.gitignore</em> file skips the <em>admin.env</em> file which contains the (sensitive) AWS keys in it so don&#8217;t forget to add your own.</p>

<p>In the next post we&#8217;ll create a TypeScript class for the guts of the lambda function which checks the password of the day, along with some corresponding Mocha tests, also written in TypeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Framework - Part 1: Up and running]]></title>
    <link href="http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running/"/>
    <updated>2015-12-22T20:26:00+00:00</updated>
    <id>http://ZeroSharp.github.com/serverless-framework-part-1-up-and-running</id>
    <content type="html"><![CDATA[<h2>New version 0.1.5</h2>

<p><span class="fluo">Edit: since the original version of this post, a new version 0.1.5 of Serverless was released. I have updated the tutorial below to reflect the newer version. </span></p>

<p>I was in the middle of a blog post about the JAWS framework and before I had finished it changed its name to <a href="https://github.com/serverless/serverless">the Serverless framework</a>. It is a very clever way to build apps without worrying about provisioning server or whether it will scale. This is because it uses Amazon Web Services and in particular the Amazon lambda compute service. It&#8217;s currently in beta.</p>

<p>Follow <a href="http://docs.serverless.com/docs/configuring-aws">the instructions</a> for setting up an administrative IAM user for use with the framework.</p>

<p>Make sure you have node and npm installed. You need node 4.0 or greater.</p>

<pre><code>$ node -v
v4.2.3
$ npm -v
2.14.7
</code></pre>

<p>Install the Serverless framework.</p>

<pre><code>$ npm install serverless -g 
</code></pre>

<p>Create a new project</p>

<pre><code>$ serverless project create
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Serverless: Creating a new Serverless Project...  
</span><span class='line'> _______                             __
</span><span class='line'>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
</span><span class='line'>|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
</span><span class='line'>|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
</span><span class='line'>|   |   |             The Serverless Application Framework
</span><span class='line'>|       |                           serverless.com, v0.1.5
</span><span class='line'>`-------'
</span><span class='line'>Serverless: Enter a project name:  (serverless4ylkhz) serverlessPotd
</span><span class='line'>Serverless: Enter a project domain (used for the Serverless Project Bucket):  (serverless4ylkhz.com) zerosharp.com
</span><span class='line'>Serverless: Enter an email to use for AWS alarms:  (me@serverless4ylkhz.com) potd@nosredna.com
</span><span class='line'>Serverless: Select a region for your project: 
</span><span class='line'>    us-east-1
</span><span class='line'>    us-west-2
</span><span class='line'>  &gt; eu-west-1
</span><span class='line'>    ap-northeast-1
</span><span class='line'>Serverless: Select an AWS profile for your project: 
</span><span class='line'>  &gt; default
</span><span class='line'>Serverless: Creating your project bucket on S3: serverless.eu-west-1.zerosharp.com...  
</span><span class='line'>Serverless: Creating stage "development"...  
</span><span class='line'>Serverless: Creating region "eu-west-1" in stage "development"...  
</span><span class='line'>Serverless: Deploying resources to stage "development" in region "eu-west-1" via Cloudformation (~3 minutes)...  
</span><span class='line'>Serverless: Successfully deployed "development" resources to "eu-west-1"  
</span><span class='line'>Serverless: Successfully created region "eu-west-1" within stage "development"  
</span><span class='line'>Serverless: Successfully created stage "development"  
</span><span class='line'>Serverless: Successfully created project: serverlessPotd  </span></code></pre></td></tr></table></div></figure>


<p>It takes about 3 minutes to setup the necessary CloudFormation stack for your project. Change directory to the newly created project.</p>

<pre><code>$ cd serverlessPotd
</code></pre>

<p>Create a new component.</p>

<pre><code>$ serverless component create
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>riemann:serverlessPotd ra$ serverless component create
</span><span class='line'>Serverless: Enter a name for your new component:  (nodejscomponent) 
</span><span class='line'>Serverless: Enter a name for your component's first module:  (resource) potd
</span><span class='line'>Serverless: Enter a name for your module's first function:  (show) check
</span><span class='line'>Serverless: Successfully created function: "check"  
</span><span class='line'>Serverless: Successfully created new serverless module "potd" inside the component "nodejscomponent"  
</span><span class='line'>Serverless: Installing "serverless-helpers" for this component via NPM...  
</span><span class='line'>serverless-helpers-js@0.0.3 node_modules/serverless-helpers-js
</span><span class='line'>└── dotenv@1.2.0
</span><span class='line'>Serverless: Successfully created new serverless component: nodejscomponent </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This has created the javascript code for a basic lambda function which we can immediately deploy.</p>

<pre><code>$ serverless dash deploy
</code></pre>

<p>At the prompt select both the function and the endpoint and then select <em>Deploy</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> _______                             __
</span><span class='line'>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
</span><span class='line'>|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
</span><span class='line'>|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
</span><span class='line'>|   |   |             The Serverless Application Framework
</span><span class='line'>|       |                           serverless.com, v0.1.5
</span><span class='line'>`-------'
</span><span class='line'>
</span><span class='line'>Serverless: Select the assets you wish to deploy:
</span><span class='line'>    nodejscomponent - potd - check
</span><span class='line'>      function - nodejscomponent/potd/check
</span><span class='line'>      endpoint - nodejscomponent/potd/check@potd/check~GET
</span><span class='line'>    - - - - -
</span><span class='line'>  &gt; Deploy
</span><span class='line'>
</span><span class='line'>Serverless: Deploying functions in "development" to the following regions: eu-west-1  
</span><span class='line'>Serverless: ------------------------  
</span><span class='line'>Serverless: Successfully deployed functions in "development" to the following regions:   
</span><span class='line'>Serverless: eu-west-1 ------------------------  
</span><span class='line'>Serverless:   nodejscomponent/potd/check: arn:aws:lambda:eu-west-1:962613113552:function:serverlessPotd-nodejscomponent-potd-check:development  
</span><span class='line'>
</span><span class='line'>Serverless: Deploying endpoints in "development" to the following regions: eu-west-1  
</span><span class='line'>Serverless: Successfully deployed endpoints in "development" to the following regions:  
</span><span class='line'>Serverless: eu-west-1 ------------------------  
</span><span class='line'>Serverless:   GET - potd/check - https://rhnjv4ms2b.execute-api.eu-west-1.amazonaws.com/development/potd/check  </span></code></pre></td></tr></table></div></figure>


<p>Now open a browser and navigate to the URL in the last line. You should see the following JSON response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">message:</span> <span class="nt">&quot;Your Serverless function ran successfully!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now that&#8217;s already fantastic. With a handful of commands we have deployed an arbitrary javascript function to a URL endpoint very cheaply and with automatic scaling. We never had to consider instance size or memory or operating system.</p>

<p>And it&#8217;s extremely extensible too - thanks to the other AWS services, we can easily make it secure (with Amazon Cognito) kick off emails (SES), store files (S3), add persistence (DynamoDB), etc.</p>

<p>In the next post, I&#8217;ll be applying it to a real life scenario to replace an existing web service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 2015.2 review part 2]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-2/"/>
    <updated>2015-12-10T09:43:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-2</id>
    <content type="html"><![CDATA[<p>This is the second and final dive into some of the new DevExpress XAF 2015.2 features. The <a href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1/">first part</a> covers the Report Designer and the new XML serialisation.</p>

<h2>Batch editing</h2>

<p>Another feature I&#8217;m excited about is the support for batch editing within the web application grids.</p>

<p>Let&#8217;s see what happens when combined with the validation rules. What happens if I edit two rows but only one has a validation problem - does the whole batch get rejected? Or just the row with the problem?</p>

<p>First I modified the edit mode of the Tasks grid to <code>Batch</code> via the model.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-15-2-review-001.png"></p>

<p>Then I added a new <code>RuleRequiredField</code> validation rule via the model.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-15-2-review-002.png"></p>

<p>I started up the MainDemo application and navigated to the Tasks view and tried to delete the subject of multiple rows at the same time.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-15-2-review-003.png"></p>

<p>I never even got to press Save because of another new 15.2 feature: <a href="https://community.devexpress.com/blogs/eaf/archive/2015/11/24/xaf-validation-module-enhancements-for-windows-and-the-web-coming-soon-in-v15-2.aspx">inplace validation</a>! The rules are being validated <em>without</em> a round trip to the server!</p>

<p>So let&#8217;s try another way. <em>Inplace Validation</em> does not work with all rule types, so I deleted my <code>RuleRequiredField</code> from the model and instead added a new <code>RuleFromBoolProperty</code> to the <code>DemoTask</code> object as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[MemberDesignTimeVisibility(false)]</span>
</span><span class='line'><span class="na">[RuleFromBoolProperty(&quot;SubjectIsRequired&quot;, </span>
</span><span class='line'><span class="na">    DefaultContexts.Save, </span>
</span><span class='line'><span class="na">    &quot;Subject is required.&quot;, </span>
</span><span class='line'><span class="na">    UsedProperties = &quot;Subject&quot;, </span>
</span><span class='line'><span class="na">    SkipNullOrEmptyValues = false)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsSubjectRequired</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">!</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">Subject</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we go back to the list view for Task and try to set multiple subjects to empty.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-15-2-review-004.png"></p>

<p>Fantastic! This time the broken rules appear for each row and it is quite clear which message belongs to which object.</p>

<p>So the batch editing makes use of inplace validation when it can, but handles more complex validation rules well too. This is an excellent combination because the inpalce validation will help to make the client seem very quick and responsive.</p>

<h2>Conclusion</h2>

<p>This concludes my review of DevExpress 2015.2. We&#8217;ve looked in some detail at two of the most impressive new features - the way reports are serialised and the improvements to client-side validation. These changes help with performance and ease of maintenance and I&#8217;m very happy to see that the DevExpress team has focused on these areas. Looking forward to the 2016 releases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 2015.2 review part 1]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1/"/>
    <updated>2015-12-09T14:43:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-15-dot-2-review-part-1</id>
    <content type="html"><![CDATA[<p>Last week, DevExpress released 2015.2.3, their second major version of the year.</p>

<p>There are already some good blog posts about the changes:</p>

<ul>
<li><a href="http://www.codeproject.com/Tips/1060260/Whats-New-for-XAF">Michael Bogaerts</a></li>
<li><a href="http://vimarx.com/blog/92/">Gustavo Marzioni</a></li>
<li><a href="https://www.devexpress.com/Subscriptions/New-2015.xml?product=xaf">DevExpress What&#8217;s New</a></li>
</ul>


<p>Rather than repeat general overviews provided in these, this two-part blog post is more of a &#8216;deep dive&#8217;. In particular I&#8217;ll be looking at two of the new features in the expressApp Framework (XAF).
Today I&#8217;ll cover the new XML serialisation in the report designer. Tomorrow&#8217;s post will examine the new batch editing features.</p>

<h2>Reports</h2>

<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report that v1 reports are still very much present.'>
Reporting is definitely one of the areas where XAF has progressed the most in recent versions. There is now an in-browser report designer (since 14.2) and an alternative implementation of the reports (reports v2, since 13.2).</p>

<p>In this release, I was a little worried that the support for Reports v1 would be deprecated, since our production system has over 100 custom reports and we have not yet looked for an easy way to migrate these to v2. I&#8217;m happy to report that v1 reports are still very much present.
</span></p>

<p>However there are also a number of new features in v2 Reports, not least of which is the ability to store the report&#8217;s layout in XML. There&#8217;s currently not a lot of documentation about the XML serialization, so let&#8217;s dig in and see what we can discover.</p>

<h3>XML serialization deep dive</h3>

<p>First I ran the demo and ran the <em>Copy Predefined Report</em> on the Contacts Report.</p>

<p>Then I ran the report designer and added a dummy <code>OnBeforePrint()</code> script to one of the table&#8217;s cells.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">xrTableCell8_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="m">23</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, in the MainDemo&#8217;s Updater.cs file, I placed the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">reportData</span> <span class="p">=</span> <span class="n">ObjectSpace</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">ReportDataV2</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">BinaryOperator</span><span class="p">(</span><span class="s">&quot;DisplayName&quot;</span><span class="p">,</span> <span class="s">&quot;Contacts Report&quot;</span><span class="p">)</span> <span class="p">&amp;</span> <span class="k">new</span> <span class="n">BinaryOperator</span><span class="p">(</span><span class="s">&quot;IsPredefined&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">OperandValue</span><span class="p">(</span><span class="k">false</span><span class="p">)));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">reportData</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="n">ReportDataProvider</span><span class="p">.</span><span class="n">ReportsStorage</span><span class="p">.</span><span class="n">LoadReport</span><span class="p">(</span><span class="n">reportData</span><span class="p">);</span>
</span><span class='line'>    <span class="n">report</span><span class="p">.</span><span class="n">SaveLayoutToXml</span><span class="p">(</span><span class="s">@&quot;C:\Temp\ContactsReport.xml&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">report</span><span class="p">.</span><span class="n">SaveLayout</span><span class="p">(</span><span class="s">@&quot;C:\Temp\ContactsReport.repx&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates two output files. One of them contains the familiar <em>.repx</em> format. The other contains the newer <em>.xml</em> serialization.</p>

<p>The contents of the XML file is displayed below and is 77 lines long.</p>

<div><script src='https://gist.github.com/f085bf10dd65ace5d229.js?file=ContactReport.xml'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>By comparison, the <a href="https://gist.github.com/shamp00/f085bf10dd65ace5d229#file-contactsreport-repx">ContactReport.repx</a> is 408 lines long and much harder to read.</p>

<p>As you can see the XML file is <em>much</em> smaller and simpler than the <em>.repx</em> file. At first I didn&#8217;t believe it contained all the necessary information, so I started up the MainDemo WinForms application, created a blank new report and imported the layout and the layout looks correct and the preview loads with data as expected.</p>

<h3>Scripts</h3>

<p>What about scripts? Are they serialized in the xml version? You bet. In the XML export you can see this has been serialised near the top of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>ScriptsSource=
</span><span class='line'>   &quot;<span class="ni">&amp;#xD;&amp;#xA;</span>private void xrTableCell8_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e)
</span><span class='line'>   {<span class="ni">&amp;#xD;&amp;#xA;</span>  var x = 23;<span class="ni">&amp;#xD;&amp;#xA;</span>}<span class="ni">&amp;#xD;&amp;#xA;</span>&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>Setup</h3>

<p>In order to use this new XML serialization of report layouts, you must set the ReportsV2 module to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">reportsModuleV2</span><span class="p">.</span><span class="n">ReportStoreMode</span> <span class="p">=</span> <span class="n">ReportStoreModes</span><span class="p">.</span><span class="n">XML</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will most likely invalidate any reports which have already been serialized to the database. There are some notes on how to fix this <a href="https://www.devexpress.com/Support/Center/Question/Details/T275363">here</a>.</p>

<h3>Default for new projects</h3>

<p>What about new projects? I created a new solution and chose <em>DevExpress 15.2 XAF Solution Wizard</em> as the type of solution and added the reports module. Now when I navigate to the <code>WinApplication.Designer.cs</code> file, I find:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// reportsModuleV2</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">reportsModuleV2</span><span class="p">.</span><span class="n">ReportDataType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">DevExpress</span><span class="p">.</span><span class="n">Persistent</span><span class="p">.</span><span class="n">BaseImpl</span><span class="p">.</span><span class="n">ReportDataV2</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">reportsModuleV2</span><span class="p">.</span><span class="n">ReportStoreMode</span> <span class="p">=</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">ExpressApp</span><span class="p">.</span><span class="n">ReportsV2</span><span class="p">.</span><span class="n">ReportStoreModes</span><span class="p">.</span><span class="n">XML</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the default storage method for new projects is now XML.</p>

<h3>Conclusion</h3>

<p>The XML serialisation looks like a considerable upgrade to the mechanism for storing, loading and saving reports. Now I just need to find a good way of converting my existing v1 reports&#8230; Perhaps a future blog post.</p>

<h2>Coming up</h2>

<p>Tomorrow I&#8217;ll be looking at the new <a href="https://community.devexpress.com/blogs/eaf/archive/2015/11/24/xaf-validation-module-enhancements-for-windows-and-the-web-coming-soon-in-v15-2.aspx">batch editing in grids</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 3]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3/"/>
    <updated>2015-09-16T09:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-3</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='I&#8217;m happy to report there is a considerable improvement under load in version 15.1.'>
This is the third part of a <a href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2">series</a> about migrating a large application from XAF 12.1 to XAF 15.1. In this part I will compare the results of a simple stress test between the versions.</p>

<p>I have described in previous posts how to <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">stress test XAF applications</a>. One of our most basic tests is to simulate 25 users cycling through all the navigation tabs for an hour. I&#8217;m happy to report there is a considerable improvement under load in version 15.1.</p>

<p>(Note that we purposefully stress test against a single web application so that we can compare apples with apples. In production we have multiple instances load-balanced.)</p>

<p>Here is an interactive summary of the 15.1 results:
</span></p>

<p>Here is version 15.1. There were zero errors and 382 completed scripts.</p>

<p>By comparison, the same test against DevExpress 12.1 yielded only 258 completions. So 15.1 shows a 48% performance improvement over 12.1.</p>

<iframe class="cmd" src="https://load.wpm.neustar.biz/load/test/share/e4c5e109f8f04ceebd72cdb5c93eb1c2" width="1024" height="512">

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2/"/>
    <updated>2015-09-15T10:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of a <a href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1">series</a> about migrating a large application from XAF 12.1 to XAF 15.1.</p>

<p>In the 13.1 release, DevExpress made a change to the way XAF <code>Validator</code> class is used. It now requires an <code>IObjectSpace</code> parameter corresponding to the object. It is needed to correctly evaluate any rules which are descendants of the <code>RuleSearchObjectProperties</code>. These include:</p>

<ul>
<li><code>RuleCombinationOfPropertiesIsUnique</code></li>
<li><code>RuleIsReferenced</code></li>
<li><code>RuleObjectExists</code></li>
<li><code>RuleUniqueValue</code></li>
</ul>


<p>A lot of our code has been around for years now and the older parts rely heavily on <code>Session</code> and <code>UnitOfWork</code> instead of <code>IObjectSpace</code> For the most part our application used <code>IObjectSpace</code> only within <code>ViewControllers</code>.</p>

<p>But there were several situations where we need the validator where we don&#8217;t have an <code>IObjectSpace</code>. For instance we sometimes need to validate from within <a href="https://documentation.devexpress.com/#eXpressAppFramework/clsDevExpressPersistentBaseActionAttributetopic">method actions</a> (decorated with the <code>ActionAttribute</code>). For performance reasons, we pass criteria to our middleware and it uses a <code>UnitOfWork</code> to run the method on each object. So in this case, there was no <code>IObjectSpace</code> to pass to the XAF <code>Validator</code>.</p>

<p><span class='pullquote-right' data-pullquote='When writing code I often find myself having to decide between the &#8216;quick&#8217; fix and the &#8216;right&#8217; fix.'>
Here I had a refactoring dilemma to solve. Either I need to rewrite all of the affected rules so that they no longer make use of the <code>IObjectSpace</code>. For instance, I could use <code>RuleFromBoolProperty</code> instead. In our application, this would mean rewriting about 50 rules. Or alternatively, I could go through the entire code base looking for <code>new UnitOfWork()</code> and <code>new Session()</code> and try to use an <code>IObjectSpace</code> instead. When writing code I often find myself having to decide between the &#8216;quick&#8217; fix and the &#8216;right&#8217; fix. Here, moving to <code>IObjectSpace</code> throughout is clearly the right fix and although it would take more time to implement, the system will be more in-line with best XAF practices throughout.
</span></p>

<p> Eventually, the refactoring was complete and all unit tests are passing. I was eager to run a multi-user load stress test against the 15.1 version to compare performance under load. I have described in previous posts how to <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">stress test XAF applications</a>. I&#8217;ll be sharing the results in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a large web application from XAF 12.1 to 15.1 - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1/"/>
    <updated>2015-09-14T10:01:00+01:00</updated>
    <id>http://ZeroSharp.github.com/migrating-a-large-web-application-from-xaf-12-dot-1-to-15-dot-1-part-1</id>
    <content type="html"><![CDATA[<p>I am the principal software architect for a treasury application in use by over 100 large multinational corporates. Upgrades are generally met with reluctance in the enterprise world and so we&#8217;ve been somewhat stuck on an old version of the expressAppFramework.</p>

<p>Recently I&#8217;ve been pushing to move to the newer version and I have spent about three weeks migrating the substantial code base to XAF 15.1 and .NET 4.6.</p>

<p>The steps are:</p>

<ul>
<li>Run the project converter tool.</li>
<li>Try to compile. Identify the errors which are easily fixable (check with the &#8216;breaking changes&#8217; documents from DevExpress.)</li>
<li>When in doubt, compare the libraries with a decompiler like .NET Reflector.</li>
<li>Refactor where necessary (ensure you have unit tests for the behaviour you are changing).</li>
</ul>


<p>On this last point, my whole approach to refactoring has been shaped by Michael C. Feather&#8217;s book <a href="http://amzn.com/0131177052"><em>Working Effectively with Legacy Code</em></a>. Highly recommended for anyone maintaining complex applications regardless of whether the code is legacy or not&#8230;</p>

<p>I was pleasantly surprised that I was very quickly able to get everything to compile and even run. The layout was not correct, but a lot of things worked straight away.</p>

<p>I then had to spend some time restoring the customisations we&#8217;d made to the default ASP.NET layout. In XAF 12.1 these were applied directly to <em>default.aspx.cs</em> and <em>dialog.aspx.cs</em>, but in 15.1 these no longer exist. Instead, you can customise layout by providing your own alternate templates. I was expecting this to be much harder, but by <a href="https://documentation.devexpress.com/#eXpressAppFramework/CustomDocument112696">following the instructions in the documentation</a> I managed to restore our layout quite easily.</p>

<p>I still had a lot of failing unit tests. One seemingly minor change to XAF validation proved to be a lot of work to fix in our code.
Since 13.1, the XAF <code>Validator</code> class now requires an <code>IObjectSpace</code> parameter in the constructor. This was by far the biggest problem to fix and is the subject of the next blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force a complete garbage collection in an ASP.NET application.]]></title>
    <link href="http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application/"/>
    <updated>2015-08-05T09:26:00+01:00</updated>
    <id>http://ZeroSharp.github.com/force-a-complete-garbage-collection-in-an-asp-dot-net-application</id>
    <content type="html"><![CDATA[<p>How can I force a full garbage collection easily within an ASP.NET application? The method here is for XAF web applications but the same approach should work with any ASP.NET app.</p>

<p><span class='pullquote-right' data-pullquote='First up: Never mess with the .NET garbage collector.'>
First up: Never mess with the .NET garbage collector.</p>

<p>I sometimes mess with the garbage collector in .NET when I&#8217;m trying to pin down some memory problem. Also, after <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">a load test</a>, I prefer to force the garbage collector to collect everything it can so that I can check that the memory drops as expected.
</span></p>

<p>Garbage collection in .NET is complex and it is hard to be sure you&#8217;ve done it correctly. <a href="http://ZeroSharp.github.com///%20See%20http://blogs.msdn.com/b/tess/archive/2006/02/02/net-memory-my-object-is-not-rooted-why-wasn-t-it-garbage-collected.aspx">This ancient article by Tess Ferrandez</a> pointed me in the following direction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">void</span> <span class="nf">ForceGarbageCollection</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">/// This will garbage collect all generations (including large object), </span>
</span><span class='line'>    <span class="n">GC</span><span class="p">.</span><span class="n">Collect</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">/// then execute any finalizers</span>
</span><span class='line'>    <span class="n">GC</span><span class="p">.</span><span class="n">WaitForPendingFinalizers</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">/// and then garbage collect again to take care of all the objects that had finalizers.            </span>
</span><span class='line'>    <span class="n">GC</span><span class="p">.</span><span class="n">Collect</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How can we easily trigger this routine in an XAF web application? First, add the following to the <em>Global.asax.cs</em> file:</p>

<figure class='code'><figcaption><span>Global.asax.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_BeginRequest</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">shouldForceGarbageCollection</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">QueryString</span><span class="p">[</span><span class="s">&quot;ForceGC&quot;</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">shouldForceGarbageCollection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ForceGarbageCollection</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Response</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;&lt;H1&gt;Forced garbage collection OK!&lt;/H1&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then whenever you want to trigger a garbage collection, visit the following URL:</p>

<pre><code>http://.../Login.aspx?ForceGC=1
</code></pre>

<p>You should see the text <strong>&#8216;Forced garbage collection OK&#8217;</strong> in the top left of the browser window.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A strange error message from Visual Studio 2015]]></title>
    <link href="http://ZeroSharp.github.com/a-strange-error-message-from-visual-studio-2015/"/>
    <updated>2015-08-03T15:35:00+01:00</updated>
    <id>http://ZeroSharp.github.com/a-strange-error-message-from-visual-studio-2015</id>
    <content type="html"><![CDATA[<p>When I recently upgraded to Visual Studio 2015, everything seemed to go very smoothly except that whenever I debugged my main application I got a dialog window with the following strange error:</p>

<pre><code>The procedure entry point could not be located in the dynamic link library C:\...\bin\Debug\netutils.dll.
</code></pre>

<p>After pressing <code>OK</code> everything seemed to work as normal.</p>

<p>After a considerable number of dead ends, I finally worked out that changing the name of the <em>NetUtils.dll</em> assembly fixes the problem. It seems that Visual Studio 2015 gets confused with a Windows system assembly with the same name. I don&#8217;t know why it was never a problem with Visual Studio 2013, but I renamed the assembly and now everything is working fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing slow debugging of ASP.NET applications]]></title>
    <link href="http://ZeroSharp.github.com/fixing-slow-debugging-of-asp-dot-net-applications/"/>
    <updated>2015-06-03T21:31:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fixing-slow-debugging-of-asp-dot-net-applications</id>
    <content type="html"><![CDATA[<p>For a while I&#8217;ve noticed an annoying slowness when debugging ASP.NET applications from Visual Studio. Just after every page load it takes about a second before the buttons become clickable. I noticed mostly when debugging XAF applications, perhaps because the pages are quite complex.</p>

<p>Turns out the culprit is something called <a href="http://www.asp.net/visual-studio/overview/2013/using-browser-link">Browser Link</a> which was introduced in Visual Studio 2013. It&#8217;s enabled by default.</p>

<p>To turn it off you can turn it off from the menu:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/browserlink-001.png"></p>

<p>Or you can add the following to your web.config file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;vs:EnableBrowserLink&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/appSettings&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top tip for viewing CSV files in Excel]]></title>
    <link href="http://ZeroSharp.github.com/top-tip-for-viewing-csv-files-in-excel/"/>
    <updated>2015-05-08T11:32:00+01:00</updated>
    <id>http://ZeroSharp.github.com/top-tip-for-viewing-csv-files-in-excel</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a quick hack when your CSV file has a different separator than Excel is expecting.</p>

<p>Add this on the first line of the CSV file:</p>

<pre><code>sep=;
</code></pre>

<p>or</p>

<pre><code>sep=,
</code></pre>

<p>This will override system setting for list separator character and Excel will open the file correctly.</p>

<p><sup>Note: Excel expects the separator to match the one defined in the <em>Control Panel/Region/Formats/Additional settings/List Separator</em>. On a French system, it expects a semi-colon.</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevExpress 14.2 review]]></title>
    <link href="http://ZeroSharp.github.com/devexpress-14-dot-2-review/"/>
    <updated>2015-01-20T08:35:00+00:00</updated>
    <id>http://ZeroSharp.github.com/devexpress-14-dot-2-review</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The truly outstanding new feature is the ASP.NET report writer'>
This post is an overview of the brand new version XAF 14.2. The truly outstanding new feature is the ASP.NET report writer which is now available in all XAF applications.</p>

<p>A few months ago, we lost a potential sale because the customer wanted the ability to create custom reports from within the browser. We told them it was impossible to provide a fully-fledged report designer within our web application - but the DevExpress guys have done it! And how! </span></p>

<h2>The web-based report designer</h2>

<p>Let&#8217;s fire up the MainDemo application and navigate to the reports view. The first thing to notice is that there is a new action <em>Show Report Designer</em>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-001.png"></p>

<p>The designer action is disabled because the selected report is <em>predefined</em>. Predefined reports are a feature of Reports v2 which were introduced in version 13.2 (<a href="http://ZeroSharp.github.com/devexpress-13-dot-2-review-part-1">see my previous review</a>). So first, we clone the existing predefined report. I renamed the copy (via the edit button) so that we can tell them apart.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-002.png"></p>

<p>Now the <em>Show Report Designer</em> action is enabled. Let&#8217;s click it. <em>Whoa! That&#8217;s one impressive user interface for a web application!</em></p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-003.png"></p>

<p>Let&#8217;s add a chart and a few controls. I thought (incorrectly) that the link to the domain model might be somewhat lacking because the report designer is not designed specifically for XAF (you can also use it with non-XAF ASP.NET or ASP.NET MVC applications) but navigating the available domain objects to select a property seemed very natural and simple.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-005.png"></p>

<p>I had a few little mouse issues while trying to resize or move controls, and there were a couple of places where the interface seemed slightly sluggish, but these were very minor issues. In general the designer is slick and easy to use. I also had a little difficulty finding the <em>Save</em> button, but here it is:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-007.png"></p>

<p>And here&#8217;s the live output after my modifications.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-006.png"></p>

<p>You can also start from scratch with a new blank report.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/devexpress-14-2-review-004.png"></p>

<p>This report designer is an <strong>extremely impressive achievement</strong>. I played around with it for over an hour and it did not crash once. I managed to implement everything I tried including a chart, a bar code and a new data field.</p>

<p>There are some features missing from the web-based report designer compared to the Windows Forms version. Most significant is the ability to attach events and scripts to controls. Here is a <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument14651">full feature comparison table</a>.</p>

<p>I had a quick look for the tools they used to implement it. It looks like it uses <a href="https://jquery.com">jQuery</a>, <a href="https://jqueryui.com">jQuery.UI</a> and <a href="https://knockoutjs.com">knockout.js</a> and you can automatically bundle the required libraries via a new setting in the web.config. There is <a href="https://documentation.devexpress.com/#XtraReports/CustomDocument17558">some more information here</a>.</p>

<p>On the whole I am utterly impressed. Hats off to the DevExpress team!</p>

<h2>Other new features in XAF 14.2</h2>

<p>The new 14.2 includes several other new features. These include the ability to store user settings in the data store as well as improvements to the speed of the grids. For a full list of the new features and improvements see <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/18/xaf-brand-new-module-amp-features-for-both-windows-and-the-web-coming-soon-in-v14-2.aspx">here</a> and <a href="https://community.devexpress.com/blogs/eaf/archive/2014/11/20/xaf-enhancements-to-existing-features-amp-performance-tuning-coming-soon-in-v14-2.aspx">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELMAH with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/elmah-with-devexpress-xaf/"/>
    <updated>2014-10-08T15:45:00+01:00</updated>
    <id>http://ZeroSharp.github.com/elmah-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/p/elmah/">ELMAH (Error Logging Modules and Handlers)</a> is an open source library for logging unhandled exceptions. This post explains how to get it running with the <a href="https://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a> main demo.</p>

<p>A couple of amazing facts about ELMAH.</p>

<ul>
<li>It has been around since 2004!</li>
<li>It was written by <a href="http://www.raboof.com/">Atif Aziz</a> who happens to be an old school-friend from the International School of Geneva.</li>
</ul>


<p>XAF provides <a href="https://documentation.devexpress.com/#xaf/CustomDocument2704">quite extensive error handling options</a> out of the box, but I have found Elmah better suited to production environments because of the ability to remotely view the full error log.</p>

<h2>Setting up</h2>

<p>First, get the ELMAH package via NuGet into the MainDemo.Web project. ELMAH provides dozens of different methods of persisting the error log. For this example we&#8217;ll choose one of the simplest. Make sure you select the <em>ELMAH on XML Log</em> package.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-with-elmah-001.png"></p>

<p>NuGet makes several automatic modifications to the <em>web.config</em>. Unfortunately, these are not quite accurate enough for XAF. The changes you need to make are detailed below:</p>

<p>Add a <code>&lt;configSection&gt;</code> for ELMAH as alongside the existing devExpress one.</p>

<figure class='code'><figcaption><span>web.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;configSections&gt;</span>
</span><span class='line'>    <span class="nt">&lt;sectionGroup</span> <span class="na">name=</span><span class="s">&quot;devExpress&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/sectionGroup&gt;</span> <span class="c">&lt;!-- this should already exist--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;sectionGroup</span> <span class="na">name=</span><span class="s">&quot;elmah&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- this is new--&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;security&quot;</span> <span class="na">requirePermission=</span><span class="s">&quot;false&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.SecuritySectionHandler, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;errorLog&quot;</span> <span class="na">requirePermission=</span><span class="s">&quot;false&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorLogSectionHandler, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;errorMail&quot;</span> <span class="na">requirePermission=</span><span class="s">&quot;false&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorMailSectionHandler, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;errorFilter&quot;</span> <span class="na">requirePermission=</span><span class="s">&quot;false&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorFilterSectionHandler, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/sectionGroup&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configSections&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your <code>&lt;system.webServer&gt;</code> section should look like this:</p>

<figure class='code'><figcaption><span>web.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;system.webServer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;handlers&gt;</span>...<span class="nt">&lt;/handlers&gt;</span> <span class="c">&lt;!-- This is unchanged --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;validation</span> <span class="na">validateIntegratedModeConfiguration=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modules&gt;</span>
</span><span class='line'>      <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ASPxHttpHandlerModule&quot;</span> <span class="na">type=</span><span class="s">&quot;DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorLog&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorLogModule, Elmah&quot;</span> <span class="na">preCondition=</span><span class="s">&quot;managedHandler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorMail&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorMailModule, Elmah&quot;</span> <span class="na">preCondition=</span><span class="s">&quot;managedHandler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorFilter&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorFilterModule, Elmah&quot;</span> <span class="na">preCondition=</span><span class="s">&quot;managedHandler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/modules&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/system.webServer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a <code>&lt;location&gt;</code> for the path <em>elmah.axd</em> (alongside the existing <code>&lt;location&gt;</code> tags).</p>

<figure class='code'><figcaption><span>web.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;location</span> <span class="na">path=</span><span class="s">&quot;elmah.axd&quot;</span> <span class="na">inheritInChildApplications=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;system.web&gt;</span>
</span><span class='line'>      <span class="nt">&lt;httpHandlers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;add</span> <span class="na">verb=</span><span class="s">&quot;POST,GET,HEAD&quot;</span> <span class="na">path=</span><span class="s">&quot;elmah.axd&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorLogPageFactory, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/httpHandlers&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- </span>
</span><span class='line'><span class="c">        See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for </span>
</span><span class='line'><span class="c">        more information on using ASP.NET authorization securing ELMAH.</span>
</span><span class='line'>
</span><span class='line'><span class="c">      &lt;authorization&gt;</span>
</span><span class='line'><span class="c">        &lt;allow roles=&quot;admin&quot; /&gt;</span>
</span><span class='line'><span class="c">        &lt;deny users=&quot;*&quot; /&gt;  </span>
</span><span class='line'><span class="c">      &lt;/authorization&gt;</span>
</span><span class='line'><span class="c">      --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/system.web&gt;</span>
</span><span class='line'>    <span class="nt">&lt;system.webServer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;handlers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ELMAH&quot;</span> <span class="na">verb=</span><span class="s">&quot;POST,GET,HEAD&quot;</span> <span class="na">path=</span><span class="s">&quot;elmah.axd&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorLogPageFactory, Elmah&quot;</span> <span class="na">preCondition=</span><span class="s">&quot;integratedMode&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/handlers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/system.webServer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/location&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a new <code>&lt;elmah&gt;</code> section. I put mine just before the final <code>&lt;/configuration&gt;</code> tag.</p>

<figure class='code'><figcaption><span>web.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;elmah&gt;</span>
</span><span class='line'>    <span class="nt">&lt;errorLog</span> <span class="na">type=</span><span class="s">&quot;Elmah.XmlFileErrorLog, Elmah&quot;</span> <span class="na">logPath=</span><span class="s">&quot;~/App_Data/Elmah.Errors&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">        See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for </span>
</span><span class='line'><span class="c">        more information on remote access and securing ELMAH.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;security</span> <span class="na">allowRemoteAccess=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/elmah&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now modify <em>HttpModules.Web.Config</em> to look like this:</p>

<figure class='code'><figcaption><span>HttpModules.Web.Config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;httpModules&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ASPxHttpHandlerModule&quot;</span> <span class="na">type=</span><span class="s">&quot;DevExpress.Web.ASPxClasses.ASPxHttpHandlerModule, DevExpress.Web.v14.1, Version=14.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorLog&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorLogModule, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorMail&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorMailModule, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;ErrorFilter&quot;</span> <span class="na">type=</span><span class="s">&quot;Elmah.ErrorFilterModule, Elmah&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/httpModules&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to extend XAF&#8217;s standard error handling. Create a new class in the web application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ElmahErrorHandling</span> <span class="p">:</span> <span class="n">ErrorHandling</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">LogException</span><span class="p">(</span><span class="n">ErrorInfo</span> <span class="n">errorInfo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">base</span><span class="p">.</span><span class="n">LogException</span><span class="p">(</span><span class="n">errorInfo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">errorInfo</span><span class="p">.</span><span class="n">Exception</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Elmah</span><span class="p">.</span><span class="n">ErrorSignal</span><span class="p">.</span><span class="n">FromCurrentContext</span><span class="p">().</span><span class="n">Raise</span><span class="p">(</span><span class="n">errorInfo</span><span class="p">.</span><span class="n">Exception</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then modify <em>Global.asax.cs</em> to instantiate the new class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>    <span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_Start</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ErrorHandling</span><span class="p">.</span><span class="n">Instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ElmahErrorHandling</span><span class="p">();</span> <span class="c1">// &lt;---this line is new</span>
</span><span class='line'>        <span class="n">ASPxWebControl</span><span class="p">.</span><span class="n">CallbackError</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">EventHandler</span><span class="p">(</span><span class="n">Application_Error</span><span class="p">);</span>
</span><span class='line'><span class="cp">#if DEBUG</span>
</span><span class='line'>        <span class="n">TestScriptsManager</span><span class="p">.</span><span class="n">EasyTestEnabled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete files are available with the <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">source code</a>.</p>

<p>Now run the application and trigger an unhandled exception. Change the URL to something that does not exist. Or open any detail view and modify the URL so that the Guid in the <em>ShortcutObjectKey</em> is invalid (replace a digit with an &#8216;X&#8217;). Then the application error page appears.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-with-elmah-002.png"></p>

<p>Then return to the application and change the URL to <code>Elmah.axd</code>. You are looking at the log of all unhandled exceptions.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-with-elmah-003.png"></p>

<p>And for each exception, you can view the full details of any logged exception including coloured stack trace and full server variables.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-with-elmah-004.png"></p>

<h2>ELMAH options</h2>

<p>By default, ELMAH is configured to disallow remote access to the error logs -  only a local user can get to <em>elmah.axd</em>. If you take care of the security implications it can be very useful to enable remote access and  monitor the logs on your production servers.</p>

<p>We chose to use an XML file for each error but ELMAH is entirely pluggable. There are dozens of alternatives for persisting the error log including Sql Server, an RSS feeds, to Twitter, even to <a href="http://code.google.com/p/elmah/wiki/ProwlingErrors">an iPhone app</a>. There are even third party sites such as <a href="http://elmah.io">elmah.io</a> who will host your error logs for you.</p>

<p>One of the advantages of using XML files is that the files can be copied to another machine. If you look in <em>MainDemo.Web\App_Data\Elmah.Errors</em>, you will find the resulting xml files.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-with-elmah-005.png"></p>

<p>You can just copy these files to another installation&#8217;s <em>Elmah.Errors</em> folder and the log will show up when you visit <em>Elmah.axd</em>.</p>

<p>One final note. ELMAH was developed for ASP.NET applications and web services, but it is possible to get it to work with other types of applications such as Windows Forms, Windows Service or console applications. Check out <a href="https://stackoverflow.com/questions/841451/using-elmah-in-a-console-application">this StackOverflow question</a>.</p>

<p>The source code for this example is <a href="https://github.com/ZeroSharp/Xaf_MainDemo_Elmah">on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 4: Roslyn]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4/"/>
    <updated>2014-09-17T08:08:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4</id>
    <content type="html"><![CDATA[<p>This is the fourth and final part of a series about using Roslyn with dependency injection to create a flexible and powerful plug-in framework. Here I review the parts of the solution that deal with the Roslyn runtime compilation of plug-ins. Check out <a href="https://github.com/ZeroSharp/RoslynPlugins">the working example on GitHub</a>.</p>

<p>Previously</p>

<ul>
<li><a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></li>
<li><a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2: The Solution</a></li>
<li><a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/">Part 3: Dependency Injection</a></li>
</ul>


<h2>Roslyn</h2>

<p>Let&#8217;s look at some of the main classes used to compile plug-in code at runtime.</p>

<p>The <code>PluginSnippetCompiler.Compile()</code> method takes a string (for instance, the contents of an uploaded raw C# file) and converts it into an in-memory assembly with the same assembly references as the main project.</p>

<p>The Roslyn compiler is still in beta, and the Microsoft team have recently removed some syntactic sugar which made the code in the <code>Compile()</code> routine look cleaner. Hopefully they will include something similar soon. The code below works with version 0.7.0.0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PluginSnippetCompiler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PluginSnippetCompiler</span><span class="p">(</span><span class="n">IAssemblyReferenceCollector</span> <span class="n">assemblyReferenceCollector</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">assemblyReferenceCollector</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;assemblyReferenceCollector&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_AssemblyReferenceCollector</span> <span class="p">=</span> <span class="n">assemblyReferenceCollector</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAssemblyReferenceCollector</span> <span class="n">_AssemblyReferenceCollector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Diagnostic</span><span class="p">&gt;</span> <span class="n">_Diagnostics</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Empty</span><span class="p">&lt;</span><span class="n">Diagnostic</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Diagnostic</span><span class="p">&gt;</span> <span class="n">Errors</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_Diagnostics</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Severity</span> <span class="p">==</span> <span class="n">DiagnosticSeverity</span><span class="p">.</span><span class="n">Error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Diagnostic</span><span class="p">&gt;</span> <span class="n">Warnings</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_Diagnostics</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Severity</span> <span class="p">==</span> <span class="n">DiagnosticSeverity</span><span class="p">.</span><span class="n">Warning</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">string</span> <span class="nf">GetOutputAssemblyName</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;RoslynPlugins.Snippets.{0}&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>    <span class="c1">/// Compiles source code at runtime into an assembly. The assembly will automatically include all</span>
</span><span class='line'>    <span class="c1">/// the same assembly references as the main RoslynPlugins assembly, so you can call any function which is</span>
</span><span class='line'>    <span class="c1">/// available from within the deployed RoslynPlugins. Compilation errors and warnings can be obtained from </span>
</span><span class='line'>    <span class="c1">/// the Errors and Warnings properties.</span>
</span><span class='line'>    <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>    <span class="c1">/// &lt;param name=&quot;name&quot;&gt;The name of the class, e.g., HelloWorldGenerator&lt;/param&gt;</span>
</span><span class='line'>    <span class="c1">/// &lt;param name=&quot;script&quot;&gt;Source code such as the contents of HelloWorldGenerator.cs&lt;/param&gt;</span>
</span><span class='line'>    <span class="c1">/// &lt;returns&gt;The compiled assembly in memory. If there were errors, it will return null.&lt;/returns&gt;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Assembly</span> <span class="nf">Compile</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">script</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">script</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;script&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">string</span> <span class="n">outputAssemblyName</span> <span class="p">=</span> <span class="n">GetOutputAssemblyName</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">defaultImplementationAssembly</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">HelloWorldGenerator</span><span class="p">).</span><span class="n">Assembly</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">assemblyReferences</span> <span class="p">=</span> <span class="n">_AssemblyReferenceCollector</span><span class="p">.</span><span class="n">CollectMetadataReferences</span><span class="p">(</span><span class="n">defaultImplementationAssembly</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Parse the script to a SyntaxTree</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">syntaxTree</span> <span class="p">=</span> <span class="n">CSharpSyntaxTree</span><span class="p">.</span><span class="n">ParseText</span><span class="p">(</span><span class="n">script</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Compile the SyntaxTree to an in memory assembly</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">compilation</span> <span class="p">=</span> <span class="n">CSharpCompilation</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">outputAssemblyName</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="n">syntaxTree</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">assemblyReferences</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">CSharpCompilationOptions</span><span class="p">(</span><span class="n">OutputKind</span><span class="p">.</span><span class="n">DynamicallyLinkedLibrary</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">outputStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">pdbStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Emit assembly to streams. Throw an exception if there are any compilation errors</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">compilation</span><span class="p">.</span><span class="n">Emit</span><span class="p">(</span><span class="n">outputStream</span><span class="p">,</span> <span class="n">pdbStream</span><span class="p">:</span> <span class="n">pdbStream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Populate the _diagnostics property in order to read Errors and Warnings</span>
</span><span class='line'>                <span class="n">_Diagnostics</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">outputStream</span><span class="p">.</span><span class="n">ToArray</span><span class="p">(),</span> <span class="n">pdbStream</span><span class="p">.</span><span class="n">ToArray</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this demo, I have not included any user feedback about compilation errors, but they are easily obtainable from the <code>Errors</code> and <code>Warnings</code> properties. At present, if there is an error, the plug-in will be ignored and the original implementation will be used.</p>

<p>The class above depends on an <code>AssemblyReferenceCollector</code> which is responsible for enumerating the references to add to the runtime-generated plug-in assembly. We want exactly the same assembly references as the assembly which contains the original implementation so that we can reference any dependencies within those references.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AssemblyReferenceCollector</span> <span class="p">:</span> <span class="n">IAssemblyReferenceCollector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">MetadataReference</span><span class="p">&gt;</span> <span class="n">CollectMetadataReferences</span><span class="p">(</span><span class="n">Assembly</span> <span class="n">assembly</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">referencedAssemblyNames</span> <span class="p">=</span> <span class="n">assembly</span><span class="p">.</span><span class="n">GetReferencedAssemblies</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">references</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MetadataReference</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">AssemblyName</span> <span class="n">assemblyName</span> <span class="k">in</span> <span class="n">referencedAssemblyNames</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">loadedAssembly</span> <span class="p">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">assemblyName</span><span class="p">);</span>
</span><span class='line'>            <span class="n">references</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">MetadataFileReference</span><span class="p">(</span><span class="n">loadedAssembly</span><span class="p">.</span><span class="n">Location</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">references</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">MetadataFileReference</span><span class="p">(</span><span class="n">assembly</span><span class="p">.</span><span class="n">Location</span><span class="p">));</span> <span class="c1">// add a reference to &#39;self&#39;, i.e., NetMWC</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">references</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Connecting the pieces</h4>

<p>We need the <code>PluginLocator</code> class to connect the Ninject resolution root to the runtime-generated assembly (if one exists). It just looks for classes with the correct interface <code>IGenerator</code> within the <code>PluginAssemblyCache</code>.</p>

<p>Here&#8217;s how it looks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PluginLocator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PluginLocator</span><span class="p">(</span><span class="n">PluginAssemblyCache</span> <span class="n">pluginAssemblyCache</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pluginAssemblyCache</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;pluginAssemblyCache&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_PluginAssemblyCache</span> <span class="p">=</span> <span class="n">pluginAssemblyCache</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">PluginAssemblyCache</span> <span class="n">_PluginAssemblyCache</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Type</span> <span class="n">Locate</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">Locate</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="n">Type</span> <span class="nf">Locate</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">serviceTypes</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">implementingClasses</span> <span class="p">=</span> <span class="n">AssemblyExplorer</span><span class="p">.</span><span class="n">GetImplementingClasses</span><span class="p">(</span><span class="n">_PluginAssemblyCache</span><span class="p">.</span><span class="n">GetAssemblies</span><span class="p">(),</span> <span class="n">serviceTypes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">implementingClasses</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">implementingClasses</span><span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;More than one plugin class found which implements &quot;</span> <span class="p">+</span> <span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot; + &quot;</span><span class="p">,</span> <span class="n">serviceTypes</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">ToString</span><span class="p">())));</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">implementingClasses</span><span class="p">.</span><span class="n">Single</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>PluginAssemblyCache</code> avoids having to run the <code>Compile()</code> routine more than once by maintaining a dictionary of previously compiled plug-ins. It has the following dependencies:</p>

<ul>
<li>an <code>IPluginSnippetProvider</code> which (in this case) reads the existing snippets from the database (not shown here)</li>
<li>a <code>PluginLoader</code> which uses the above <code>PluginSnippetCompiler</code> to convert a snippet into a runtime assembly.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// This class maintains a list of runtime-compiled in memory assemblies loaded from the plugins</span>
</span><span class='line'><span class="c1">/// available via the provider. It is a singleton class.</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PluginAssemblyCache</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PluginAssemblyCache</span><span class="p">(</span><span class="n">IPluginSnippetProvider</span> <span class="n">pluginSnippetProvider</span><span class="p">,</span> <span class="n">PluginLoader</span> <span class="n">pluginLoader</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pluginSnippetProvider</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;pluginSnippetProvider&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_PluginSnippetProvider</span> <span class="p">=</span> <span class="n">pluginSnippetProvider</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pluginLoader</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;pluginLoader&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_PluginLoader</span> <span class="p">=</span> <span class="n">pluginLoader</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">class</span> <span class="nc">CacheEntry</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">Version</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">Assembly</span> <span class="n">Assembly</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IPluginSnippetProvider</span> <span class="n">_PluginSnippetProvider</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">PluginLoader</span> <span class="n">_PluginLoader</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">CacheEntry</span><span class="p">&gt;</span> <span class="n">_Cache</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">CacheEntry</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">version</span><span class="p">,</span> <span class="n">Assembly</span> <span class="n">assembly</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">cacheEntry</span> <span class="p">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">CacheEntry</span><span class="p">()</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Version</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Version</span><span class="p">(</span><span class="n">version</span><span class="p">),</span>
</span><span class='line'>                <span class="n">Assembly</span> <span class="p">=</span> <span class="n">assembly</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="n">_Cache</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">cacheEntry</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">RefreshCache</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">pluginScriptContainers</span> <span class="p">=</span> <span class="n">_PluginSnippetProvider</span><span class="p">.</span><span class="n">GetPlugins</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add a new assembly for any new or updated plugin</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">pluginScriptContainer</span> <span class="k">in</span> <span class="n">pluginScriptContainers</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">name</span> <span class="p">=</span> <span class="n">pluginScriptContainer</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">version</span> <span class="p">=</span> <span class="n">pluginScriptContainer</span><span class="p">.</span><span class="n">Version</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">_Cache</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span> <span class="p">&amp;&amp;</span> <span class="n">a</span><span class="p">.</span><span class="n">Version</span> <span class="p">==</span> <span class="k">new</span> <span class="n">Version</span><span class="p">(</span><span class="n">version</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">assembly</span> <span class="p">=</span> <span class="n">_PluginLoader</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">pluginScriptContainer</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Add</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">version</span><span class="p">,</span> <span class="n">assembly</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Remove any assemblies which we no longer have a plugin for.</span>
</span><span class='line'>        <span class="n">_Cache</span>
</span><span class='line'>            <span class="p">.</span><span class="n">RemoveAll</span><span class="p">(</span><span class="n">cacheEntry</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="p">!</span><span class="n">pluginScriptContainers</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">plugin</span> <span class="p">=&gt;</span> <span class="n">plugin</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">cacheEntry</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Assembly</span><span class="p">&gt;</span> <span class="n">GetAssemblies</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RefreshCache</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Return only the assemblies with the highest version numbers</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_Cache</span>
</span><span class='line'>            <span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">g</span> <span class="p">=&gt;</span> <span class="n">g</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Version</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">First</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Assembly</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So whenever the <code>SomeGenerator</code> class is resolved by Ninject, it will now</p>

<ul>
<li>Check whether there are any new plug-ins and compile them into runtime assemblies and add them to the <code>PluginAssemblyCache</code>.</li>
<li>Then the <code>PluginLocator</code> will search these assemblies for a newer version of <code>SomeGenerator</code>.</li>
<li>If it finds one, it will be resolved along with any constructor dependencies, otherwise it will use the original <code>SomeGenerator</code>.</li>
</ul>


<h4>Version numbers</h4>

<p>The version number of the plug-in is a key part of our solution. Let&#8217;s say you have version 1.0 in production. Then you fix some bugs in staging (version 1.1). You create a plug-in from this staging code and upload it into production. Then much later, you decide to upgrade production to 1.2. Then, with the query in <code>GetAssemblies()</code>, the 1.1 plug-in will automatically be ignored and be superseded by whatever was shipped with 1.2 <em>since that is newer code</em>. So we do not have to remember to remove obsolete plug-ins after an upgrade - they will automatically be ignored because of the version number.</p>

<h4>Security</h4>

<p>Obviously, security is a chief concern and you may have to secure the plug-ins. In this demo project, I just created a simple view for the <code>IPlugin</code> object, but in our production environment we handle the creation of plug-ins differently. We use a combination of role-based security (to control who has permission to upload plugins) and encryption with checksumming. No user can directly enter arbitrary code - instead, we send the user a zip file which contains the code (encrypted), the version number and a checksum and our application verifies the checksum and builds the <code>IPlugin</code> object from the contents of the zip. A Powershell script running on our build server is responsible for creating the checksummed plug-in directly from the source code used in our staging environment.</p>

<h2>Conclusions - the ultimate plug-in framework?</h2>

<p>The strength of the Roslyn approach is that it is easy to maintain while being extremely versatile. In our case, it provides us with the ability to restrict the number of major releases approximately one per annum while catering for the inevitable little fixes to output formats and reports.</p>

<p>In the example we replaced an existing class, but it would be straightforward to add the concept of <em>discovery</em> and use the same Roslyn features to make any <em>new</em> plug-in classes available to your application. Ninject, makes it easy to instantiate, say, every implementor of <code>IGenerator</code>, so you could enumerate all available plug-ins instead of replacing a single one.</p>

<p>So here&#8217;s a basic plug-in framework which is very flexible and very powerful without many of the versioning headaches of MEF or MAF. It&#8217;s also easy to maintain, since the plug-in code is identical to the &#8216;normal&#8217; code in staging (just packaged, delivered and compiled in a different way to production).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 3: Dependency Injection]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/"/>
    <updated>2014-09-15T08:01:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3</id>
    <content type="html"><![CDATA[<p>This is the third part of a series about using Roslyn with dependency injection to create a flexible and powerful plug-in framework. Here I review the parts of the solution that deal with dependency injection. Check out <a href="https://github.com/ZeroSharp/RoslynPlugins">the working example on GitHub</a>.</p>

<p>Previously</p>

<ul>
<li><a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></li>
<li><a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2: The Solution</a></li>
</ul>


<h2>Dependency injection</h2>

<p>The first trick is to use dependency injection to create any instance of the <code>HelloWorldGenerator</code> class. Then if we need to add a new dependency to the class, we can just add it to the constructor without breaking anything.</p>

<figure class='code'><figcaption><span>HelloWorldGenerator.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HelloWorldGenerator</span> <span class="p">:</span> <span class="n">IGenerator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">HelloWorldGenerator</span><span class="p">(</span>
</span><span class='line'>        <span class="n">ISomeDependency</span> <span class="n">dependency</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IAnotherDependency</span> <span class="n">another</span><span class="p">,</span>
</span><span class='line'>        <span class="n">INewDependency</span> <span class="k">new</span> <span class="c1">// a new dependency!!!)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll use Ninject here, but you ought to be able to achieve the same with any dependency injection framework.</p>

<p>So normally, we&#8217;d have a binding something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Bind</span><span class="p">&lt;</span><span class="n">IGenerator</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">HelloWorldGenerator</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead we&#8217;ll replace this with a binding to a factory method instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Bind</span><span class="p">&lt;</span><span class="n">IGenerator</span><span class="p">&gt;().</span><span class="n">ToMethod</span><span class="p">(</span><span class="n">context</span> <span class="p">=&gt;</span> <span class="n">CreatePluginInstance</span><span class="p">(</span><span class="n">context</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>CreatePluginInstance(context)</code> method will try to find an <code>IGenerator</code> class within any available plug-ins. If it finds one, it will ask the Ninject framework to create an instance of the plug-in class. Otherwise it falls back to the default type (the original implementation of the generator). The <code>PluginLocator</code> it is responsible for searching any runtime-compiled assemblies for candidate plug-ins. We&#8217;ll look at it in more detail later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="n">IGenerator</span> <span class="nf">CreatePluginInstance</span><span class="p">(</span><span class="n">IContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">pluginLocator</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">PluginLocator</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="n">Type</span> <span class="n">roslynPluginType</span> <span class="p">=</span> <span class="n">pluginLocator</span><span class="p">.</span><span class="n">Locate</span><span class="p">&lt;</span><span class="n">IGenerator</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// if we found a plug-in, create an instance of it</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">roslynPluginType</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">IGenerator</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">roslynPluginType</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="c1">///otherwise create an instance of the original implementation</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">context</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">HelloWorldGenerator</span><span class="p">&gt;();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>By convention</h4>

<p>Of course, you might have dozens of <code>IGenerator</code> descendants, in which case you can use <a href="https://github.com/ninject/ninject.extensions.conventions">Ninject&#8217;s convention-based binding module</a>. (Don&#8217;t forget to add it with NuGet). My version looks something like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">/// If you have a lot of IGenerator subclasses, you can use Ninject&#39;s</span>
</span><span class='line'><span class="c1">/// convention based module.</span>
</span><span class='line'><span class="c1">/// </span>
</span><span class='line'><span class="c1">///   For each Generator, bind to IGenerator. </span>
</span><span class='line'><span class="c1">///   For example, Bind&lt;IGenerator&gt;.To&lt;SomeGenerator&gt;();</span>
</span><span class='line'><span class="c1">/// </span>
</span><span class='line'><span class="n">Kernel</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">scanner</span> <span class="p">=&gt;</span> <span class="n">scanner</span>
</span><span class='line'>    <span class="p">.</span><span class="n">FromThisAssembly</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectAllClasses</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">InheritedFrom</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IGenerator</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">BindToPluginOtherwiseDefaultInterfaces</span><span class="p">());</span> <span class="c1">//This is a custom extension method (see below)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ConventionSyntaxExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IConfigureSyntax</span> <span class="nf">BindToPluginOtherwiseDefaultInterfaces</span><span class="p">(</span><span class="k">this</span> <span class="n">IJoinFilterWhereExcludeIncludeBindSyntax</span> <span class="n">syntax</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">syntax</span><span class="p">.</span><span class="n">BindWith</span><span class="p">(</span><span class="k">new</span> <span class="n">DefaultInterfacesBindingGenerator</span><span class="p">(</span><span class="k">new</span> <span class="n">BindableTypeSelector</span><span class="p">(),</span> <span class="k">new</span> <span class="n">PluginOtherwiseDefaultBindingCreator</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Returns a Ninject binding to a method which returns the plug-in type if one exists, otherwise returns the default type.</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PluginOtherwiseDefaultBindingCreator</span> <span class="p">:</span> <span class="n">IBindingCreator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IBindingWhenInNamedWithOrOnSyntax</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">CreateBindings</span><span class="p">(</span><span class="n">IBindingRoot</span> <span class="n">bindingRoot</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">serviceTypes</span><span class="p">,</span> <span class="n">Type</span> <span class="n">implementationType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bindingRoot</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;bindingRoot&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">!</span><span class="n">serviceTypes</span><span class="p">.</span><span class="n">Any</span><span class="p">()</span>
</span><span class='line'>         <span class="p">?</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Empty</span><span class="p">&lt;</span><span class="n">IBindingWhenInNamedWithOrOnSyntax</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>         <span class="p">:</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="n">bindingRoot</span><span class="p">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">serviceTypes</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()).</span><span class="n">ToMethod</span><span class="p">(</span><span class="n">context</span> <span class="p">=&gt;</span> <span class="n">context</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">PluginLocator</span><span class="p">&gt;().</span><span class="n">Locate</span><span class="p">(</span><span class="n">serviceTypes</span><span class="p">)</span> <span class="p">??</span> <span class="n">implementationType</span><span class="p">))</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we&#8217;ll look at <a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-4/">the Roslyn part</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 2: The Solution]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/"/>
    <updated>2014-09-11T09:18:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2</id>
    <content type="html"><![CDATA[<p>Previously: <a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/">Part 1: The Goal</a></p>

<h2>The solution</h2>

<p>The code for the example is <a href="https://github.com/ZeroSharp/RoslynPlugins">available on GitHub</a>.</p>

<h4>How it looks</h4>

<p>So here&#8217;s the Hello World page in production:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/roslyn-plugins-001.png">.</p>

<p>We navigate to the plugins view and create a new replacement for the HelloWorldGenerator:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/roslyn-plugins-002.png">.</p>

<p>Without restarting, we can return to the HelloWorld page and see that the new class is being used because the output has changed.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/roslyn-plugins-003.png">.</p>

<p>If you delete the row from the plugins page, the behaviour reverts to the original implementation (the code that was originally shipped with production).</p>

<h4>Basic project setup</h4>

<p>First, I created a new ASP.NET MVC 5 application. I added a HelloWorldContrroller and a View. I added a <code>Plugin</code> model and corresponding views. To get started I followed the tutorial here (http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started). Once I had the basics in place, I added the following NuGet packages.</p>

<p><strong>Stable</strong></p>

<ul>
<li>EntityFramework</li>
<li>Ninject</li>
<li>Ninject.MVC5</li>
<li>Ninject.Conventions</li>
</ul>


<p><strong>Pre-release</strong></p>

<ul>
<li>Microsoft.CodeAnalysis.CSharp</li>
</ul>


<p>The <em>Microsoft.CodeAnalysis.CSharp</em> is the &#8216;Roslyn&#8217; package. It is still in beta, so you have to switch to the pre-release.</p>

<p>Next we&#8217;ll look at <a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-3/">the dependency injection part</a> in more detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing a class at runtime using Ninject and Roslyn - Part 1: The Goal]]></title>
    <link href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1/"/>
    <updated>2014-09-09T10:47:00+01:00</updated>
    <id>http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-1</id>
    <content type="html"><![CDATA[<h2>The goal</h2>

<p><span class='pullquote-right' data-pullquote='How can we replace a given class&#8217;s code with new code at runtime?'>
How can we replace a given class&#8217;s code with new code at runtime? In particular, how we can we do this while allowing dependency injection and  sidestepping assembly versioning issues.
</span></p>

<p>Let&#8217;s say you have bunch of classes like this:</p>

<figure class='code'><figcaption><span>SomeGenerator.cs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SomeGenerator</span> <span class="p">:</span> <span class="n">IGenerator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SomeGenerator</span><span class="p">(</span><span class="n">ISomeDependency</span> <span class="n">dependency</span><span class="p">,</span> <span class="n">IAnotherDependency</span> <span class="n">another</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Generate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="c1">// generate some output</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s assume that you need the ability to modify the behaviour of these classes at runtime without upgrading. And change the dependencies. Without restarting the application.</p>

<h4>Old school - The MEF approach (and most other plug-in frameworks)</h4>

<p>One approach would be to place each generator in a separate assembly and then you could load them at runtime. (This was my first effort - <em>oh how I struggled</em>).</p>

<p>You can make use of something like <a href="http://msdn.microsoft.com/en-us/library/dd460648.aspx">MEF</a> to help with the grunt work, but can still be very complex.</p>

<p>One difficulty is the dependencies. The dependencies are often defined in other assemblies and you have to be very careful to avoid &#8216;dll hell&#8217;. It is very easy to get message like:</p>

<pre><code>Could not load file or assembly 'SomeAssembly, Version=1.2.9.1, Culture=neutral, PublicKeyToken=ad2d246d2bace800' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.
</code></pre>

<p>Or even exceptions like</p>

<pre><code>Object (of type 'SomeGenerator') is not of type 'SomeGenerator'.
</code></pre>

<p>You either have to write your plug-in code so that it is totally independent (i.e., has no dependencies), or you need to resort to a heap of <code>&lt;bindingRedirect&gt;</code> tags in your web.config.</p>

<p>Also, with one assembly per format, you can end up with a huge proliferation of assemblies. If you have 50 different formats, that would be 50 assemblies.</p>

<h4>New school - The Rosyln approach</h4>

<p>An alternative is to use the compiler-as-a-service features of <a href="http://msdn.microsoft.com/en-gb/vstudio/roslyn.aspx">Roslyn</a>.</p>

<p>Can we upload a modified <em>SomeGenerator.cs</em> and get it to reference the deployed assemblies and thereby avoid dll hell? With Roslyn we can do this.</p>

<p>If the compilation fails, we can immediately inform the user that the file is not compatible. If it succeeds, we can use it in lieu of the version that was originally deployed.</p>

<p>Also, you do <strong>not</strong> need separate assemblies for the plug-ins. Your production code contains, within it somewhere a class named <code>SomeGenerator</code>. At runtime, we are going to create an in-memory assembly which contains only a single class (still named <code>SomeGenerator</code>), but which can nevertheless reference any other class available to the original implementation. Then we will get the dependency injection container to &#8216;replace&#8217; the old generator with the new one.</p>

<h2>The plan</h2>

<ul>
<li>Build an ASP.NET MVC 5 web application. It will use an instance of <code>HelloWorldGenerator</code> to generate some output. (This is the <em>original implementation</em>).</li>
<li>Allow a replacement for the <code>HelloWorldGenerator</code> class to be uploaded into the application as raw C# code. (This is the <em>plug-in implementation</em>.)</li>
<li>Store the C# code in a database. If the application is restarted, the plug-in code will be reloaded.</li>
<li>When the output is next requested, compile the new C# class. Any dependencies will be instantiated by the IoC container. If there are any compilation errors, these will be displayed.</li>
<li>Show that the plug-in class is now being used and the output has changed. The originally shipped <code>HelloWorldGenerator</code> class has been replaced by our plug-in.</li>
<li>Delete the plug-in from the table and show the output has reverted to the default (the originally implementation code).</li>
</ul>


<p>Over next few posts I&#8217;ll guide you through building the application and demonstrate the runtime replacement of the generator class.</p>

<p>See <a href="http://ZeroSharp.github.com/replacing-a-class-at-runtime-using-ninject-and-roslyn-part-2/">Part 2</a> for screen shots of the working application and an overview of the basic project set up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting changes to config files within NuGet packages]]></title>
    <link href="http://ZeroSharp.github.com/persisting-changes-to-config-files-within-nuget-packages/"/>
    <updated>2014-08-13T06:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/persisting-changes-to-config-files-within-nuget-packages</id>
    <content type="html"><![CDATA[<p>Whenever NuGet updates or restores a NuGet package, the config files within it are overwritten. Here&#8217;s a method to make sure the changes are reapplied via a <a href="http://msdn.microsoft.com/en-us/library/dd465326.aspx">config transform</a> whenever the solution is built.</p>

<p>I&#8217;m using the NUnit.Runners NuGet packages. To get our coverage tool to play nicely, I need to replace <code>&lt;supportedRuntime "v2.0.50727"&gt;</code> with <code>&lt;supportedRuntime "v4.0.30319"&gt;</code> within the <em>NUnit-console-x86.exe.config</em>.</p>

<p>Normally, a config transform is for modifying the <em>web.config</em> or <em>app.config</em> files. Here, we need to modify a config file within the <em>packages</em> subdirectory.</p>

<p>In my <em>.csproj</em> file, I have added the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;PropertyGroup&gt;</span>
</span><span class='line'>   <span class="nt">&lt;NUnitRunnerDir&gt;</span>$(SolutionDir)packages\NUnit.Runners.2.6.3\tools\<span class="nt">&lt;/NUnitRunnerDir&gt;</span>
</span><span class='line'>  <span class="nt">&lt;PropertyGroup&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Default NUnit test runner requires a modification to the config file--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;UsingTask</span>
</span><span class='line'>    <span class="na">TaskName=</span><span class="s">&quot;TransformXml&quot;</span>
</span><span class='line'>    <span class="na">AssemblyFile=</span><span class="s">&quot;$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v12.0\Web\Microsoft.Web.Publishing.Tasks.dll&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">&quot;AfterBuild&quot;</span> <span class="na">Condition=</span><span class="s">&quot;exists(&#39;$(NUnitRunnerDir)NUnit-console-x86.exe.config&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TransformXml</span>
</span><span class='line'>        <span class="na">Source=</span><span class="s">&quot;$(NUnitRunnerDir)NUnit-console-x86.exe.config&quot;</span>
</span><span class='line'>        <span class="na">Destination=</span><span class="s">&quot;$(NUnitRunnerDir)NUnit-console-x86.exe.config&quot;</span>
</span><span class='line'>        <span class="na">Transform=</span><span class="s">&quot;$(SolutionDir)UnitTests\Transforms\NUnit-console-x86.exe.CLR4.config&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the transform file itself looks like this:</p>

<figure class='code'><figcaption><span>NUnit-console-x86.exe.CLR4.config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration</span> <span class="na">xmlns:xdt=</span><span class="s">&quot;http://schemas.microsoft.com/XML-Document-Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;startup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;supportedRuntime</span> <span class="na">version=</span><span class="s">&quot;v4.0.30319&quot;</span> <span class="na">xdt:Transform=</span><span class="s">&quot;Replace&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/startup&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, <a href="https://webconfigtransformationtester.apphb.com/">Web.config Transformation Tester</a> is a handy tool!</p>

<p>Now whenever I build the project, the <em>AfterBuild</em> event ensures the supportedRuntime version is set correctly.</p>
]]></content>
  </entry>
  
</feed>
