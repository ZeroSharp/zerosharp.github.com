<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-04-08T15:41:23+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we&#8217;ll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select &#8216;Create a new script&#8217;. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 2 - Selenium]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/"/>
    <updated>2013-03-28T16:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium</id>
    <content type="html"><![CDATA[<h1>Writing a Selenium User Test against MainDemo</h1>

<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
</ul>


<h2>Why not use DevExpress EasyTests?</h2>

<p>The DevExpress recommended method of writing functional tests is to use the EasyTest functionality of the expressAppFramework. This has several advantages over other functional testing approaches.</p>

<ul>
<li>It uses a domain specific language tailored for XAF making it easy to test views and actions</li>
<li>It makes it easy to interact with the DevExpress controls that are used within XAF</li>
<li>A single EasyTest can be run against both the ASP.NET and WinForms applications</li>
<li>EasyTests work against both the debug webserver and IIS</li>
</ul>


<p>However, one feature which is not (yet) available is the ability to use EasyTests for load testing.</p>

<h2>Modifications to the MainDemo</h2>

<p>The sample script I have written assumes the MainDemo is running with <em>Horizontal Navigation</em> rather than vertical. You can modify the script to add support for vertical navigation or you can change Global.asax.cs Application_Start as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>
</span><span class='line'><span class="gi">+    // Add the following line to default to horizontal layout</span>
</span><span class='line'><span class="gi">+    WebWindowTemplateHttpHandler.PreferredApplicationWindowTemplateType = DevExpress.ExpressApp.Web.Templates.TemplateType.Horizontal;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>The Selenium script</h2>

<p>Selenium is a powerful tool for automating browsers. It supports all of the major browsers and a Selenium test can be written in many different programming languages (C#, Java, Javascript, HTML, <em>etc.</em>) The load testing tool (which we will come to in part 3 of this series) uses Selenium scripts written in Javascript.</p>

<p>We will now create and verify a simple Selenium test. The test will open the browser, login to the MainDemo and cycle through all of the tabs before logging out. The script is extremely basic. For a more realistic load test, you want a combination of scripts running, some entering data, some triggering reports, etc.</p>

<p>Create a \scripts subdirectory and populate it with the following code:</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* global test */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for Neustar:</span>
</span><span class='line'><span class="c1">// replace the following with the public address of the application server,</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetHost</span> <span class="o">=</span> <span class="s2">&quot;http://zerosharp-maindemo.elasticbeanstalk.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">virtualShare</span> <span class="o">=</span> <span class="s2">&quot;MainDemo.Web_deploy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for debug webserver:</span>
</span><span class='line'><span class="c1">// (local script validator doesn&#39;t always work against localhost,</span>
</span><span class='line'><span class="c1">// so we use the excellent localtest.me instead.)</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me:58404&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for the build server or IIS:</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me/&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;MainDemo.Web&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thinkTimeInSeconds</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You an optionally set the simulated bandwidth for the script</span>
</span><span class='line'><span class="c1">// (max of 100KB/sec). A value of -1 means do not limit.</span>
</span><span class='line'><span class="c1">// E.g., </span>
</span><span class='line'><span class="c1">// var bandwidthLimit = 50 * 1024 * 8; // 50KB/sec</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bandwidthLimit</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="nx">test</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selenium</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getSelenium</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Support functions</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">think</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">test</span><span class="p">.</span><span class="nx">isValidation</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">test</span><span class="p">.</span><span class="nx">pause</span><span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">waitForCallbacks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForCondition</span><span class="p">(</span><span class="s2">&quot;(typeof selenium.browserbot.getUserWindow().xafHasPendingCallbacks === &#39;function&#39;) &amp;&amp; (selenium.browserbot.getUserWindow().xafHasPendingCallbacks() === false);&quot;</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogin</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Login&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">targetHost</span> <span class="o">+</span> <span class="nx">virtualShare</span> <span class="o">+</span> <span class="s2">&quot;/Default.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviUserName_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviPassword_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;Logon_PopupActions_Menu_DXI0_T&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogoff</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expectedSubstring</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Logoff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//li[@class=&#39;dxm-item&#39;]/div[@class=&#39;dxm-content dxm-hasText&#39;]//a[@class=&#39;dx dxalink&#39; and text()=&#39;Log Off&#39;]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expectedSubstring</span> <span class="o">=</span> <span class="s2">&quot;Logout.html&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="nx">maintabCaption</span><span class="p">,</span> <span class="nx">tabCaption</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// viewCaption is optional</span>
</span><span class='line'>    <span class="nx">viewCaption</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">viewCaption</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">tabCaption</span> <span class="o">:</span> <span class="nx">viewCaption</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - &quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">isVisible</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">initializetest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">bandwidthLimit</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="p">.</span><span class="nx">setSimulatedBps</span><span class="p">(</span><span class="nx">bandwidthLimit</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializetest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">stepLogin</span><span class="p">(</span><span class="s2">&quot;Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//stepNavigateToTab(&quot;Default&quot;, &quot;Contact&quot;);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Task&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Department&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Scheduler Event&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;My Details&quot;</span><span class="p">,</span> <span class="s2">&quot;User - Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Note&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Payment&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Position&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Resume&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Role&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Analysis&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Reports&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepLogoff</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">closeBrowser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endTransaction</span><span class="p">();</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Neustar</h2>

<p>In a future post we will create multiple test runners in the Amazon cloud using the <a href="https://home.wpm.neustar.biz/">Neustar web performance tool</a> (formerly BrowserMob). Neustar will gather statistics about each scripts reponse times and provide a load test report including details of any test failures.</p>

<p>For now we will verify locally that the Selenium script above works as expected.</p>

<h3>Installing the Neustar local script validator</h3>

<p>In order to verify that our script is supported by the Neustar framework, we need to install their <a href="http://static.wpm.neustar.biz/tools/local-validator.tar.gz">local script validator</a>. Download it and unzip it to a subdirectory of the MainDemo.</p>

<p>There are <a href="http://community.webmetrics.com/community/wpm/blog/2012/10/02/neustar-script-local-validator-user-guide-for-windows">instructions for setting up local script validation here</a>.</p>

<p>To run the script locally call the following:</p>

<pre><code>&gt; script-validator-4.8.81\bin\validator.bat CycleThroughTabs.js -keepbrowseronerror
</code></pre>

<p>I had some problems getting the NeuStar script validator to work in 64-bit Windows 8. The script validator instructions recommend FireFox 12 but I am using version 19. For the record I am using:</p>

<ul>
<li>DevExpress MainDemo 12.2.7</li>
<li>NeuStar localscriptvalidator 4.8.81</li>
<li>Mozilla FireFox 19</li>
<li>Java 7.0.90</li>
</ul>


<p>You need to modify your <code>C:\Users\&lt;Username&gt;\.wpm\config.properties</code> file as follows:</p>

<figure class='code'><figcaption><span>config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">FF</span><span class="o">=</span><span class="s">C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, for some reason, I could not get the local script validator to run against localhost. I kept getting the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARN 03/28 12:38:28 b.n.w.a.s.JavaScrip~ - Got script exception
</span><span class='line'>org.mozilla.javascript.WrappedException: Wrapped biz.neustar.webmetrics.agent.ap
</span><span class='line'>i.HttpErrorException: No valid HTTP Response received while navigating to URL 'h
</span><span class='line'>ttp://localhost:58404/Default.aspx' (CycleThroughTabs.js#50)</span></code></pre></td></tr></table></div></figure>


<p>The easiest solution was to change the localhost address in the javascript file to the excellent localhost alternative <a href="http://readme.localtest.me/">localtest.me</a>.</p>

<p>Now when I run the script using the local validator with</p>

<pre><code>&gt; validator cyclethroughtabs.js
</code></pre>

<p>I see Firefox startup after a few seconds and the script correctly cycles through all of the tabs and then exits.</p>

<p>We will use this scenario as the basis of a load test in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 1 - Deploying]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/"/>
    <updated>2013-03-22T11:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying</id>
    <content type="html"><![CDATA[<p>This is the first part of a tutorial about load testing XAF applications. See the <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">overview</a> for a bit of background. In this post we set up the target webserver.</p>

<p>You can target any machine which has a publicly available web address, but for this tutorial, I&#8217;m&#8217; deploying the MainDemo to the Amazon cloud, by following the instructions in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> and <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> of my previous series about Amazon Web Services.</p>

<p>I am using version 12.2.7 of the DevExpress XAF MainDemo. There are a couple of extra changes to make to the web.config.</p>

<ul>
<li>Set debug to false <code>&lt;compilation targetFramework="4.0" debug="false"&gt;</code> in the <code>&lt;compilation&gt;</code> section of <code>&lt;system.web&gt;</code></li>
<li>Switch to <em>Release</em> mode before deploying.</li>
</ul>


<p>There are a couple of differences compared to the tutorial:</p>

<ul>
<li>I chose a <em>Medium</em> instance instead of a <em>Micro</em> instance for EC2 (the web server) and deployed it against IIS 8.</li>
<li>For RDS (the database), I stuck with a <em>Micro</em> instance.</li>
</ul>


<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-001.png"></p>

<p>For the load test, it is also important to disable the automatic health checks performed by the load balancer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-002.png"></p>

<p>The reason for this is that we are trying to determine the breaking point of our application. If the elastic load balancer detects that a system is struggling, it might automatically flag it as unhealthy and replace it with a newly launched instance. While this behaviour might be desirable for a production system, it doesn&#8217;t make sense for a load test.</p>

<p>Make sure you can connect to your installation from a web browser before continuing. I chose to deploy to a Windows 2012 instance running IIS 8.0 (which was not available when I wrote my previous XAF AWS tutorial) and I had a little trouble with the URL. If I navigate to the application&#8217;s base URL (<em>http://zerosharp-maindemo.elasticbeanstalk.com/</em> in my case), then I get forwarding problems after logging in. Instead, I navigate to the full address <em>http://zerosharp-maindemo.elasticbeanstalk.com/MainDemo.Web_deploy/Default.aspx</em> and everything works. I&#8217;ll try to look into it later, but it&#8217;s not important for the load testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Overview]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-overview/"/>
    <updated>2013-03-12T18:20:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-overview</id>
    <content type="html"><![CDATA[<p>Over the next few posts, I will demonstrate how to load test XAF web applications.</p>

<h2>History</h2>

<p>Performance testing has traditionally been difficult and expensive. A few years ago, to do it well required a powerful piece of dedicated load testing software such as HP LoadRunner (typical cost back in 2007: USD 50,000-100,000 or more per year!). This software was capable of simulating multiple virtual users via the use of recorded scripts and providing detailed performance statistics. Usually the cost was increased further increased by the need for powerful hardware to be able to run the application.</p>

<p>In 2007 we were required by a big customer (a global bank) to provide load testing statistics for our expressApp Framework application. We could not afford anything as sophisticated as LoadRunner so we went with a cheaper alternative (NeoLoad, which was still several thousand per year). It was extremely painstaking work to produce a test. The approach was to record the http requests (as a stream of text values) and write a script to check the http response. Since there was no real browser involved, it was very difficult to determine if our test was really representative. Several machines in the office had to be dedicated to simulating virtual users. Nobody was allowed to use the internet for fear of skewing the results during a test. If an error occurred, it was almost impossible to determine what went wrong. We wrestled with it and managed to fulfill our requirements, but it was all a lot of effort for no real return.</p>

<p>Part of the problem was certainly that XAF is complex to test. The user interface is rich and makes use of complex controls. Most of these load testing tools work better when targetting a simple <code>&lt;INPUT type="button"&gt;</code> rather than an image of a button that sometimes is not even clickable until the mouse has hovered over it. DevExpress have made it easy to run tests via their EasyTests, but no load testing tool supports them yet. (They have informed me it&#8217;s in their plans&#8230;)</p>

<h2>Enter the cloud</h2>

<p><span class='pullquote-right' data-pullquote='The increased availability of cheap cloud-based virtualised machines has revolutionised load testing.'></p>

<p>The basic idea is this: instead of simulating users with specialised software, why not fire up a virtual machine and test with a real browser instance which is &#8216;remote controlled&#8217; via a script.</p>

<p>The increased availability of cheap cloud-based virtualised machines has revolutionised load testing. The rental of the virtualised machines is not free, but it is very cheap.  In about 2008, I started using the Amazon cloud to perform load tests. Our basic test costs us about USD 10.00 per run. We probably run this a dozen times a year, so our total cost is about USD 120.00 per year.
</span></p>

<p>We get better statistics than we ever got out of NeoLoad. We are confident that the test is realistic and we can compare with the actual performance of our production environments. We have been able to find and solve memory leak problems and various tricky multiuser problems with these tests.</p>

<p>Load testing is still a complex business. There are a lot of pieces to put together, but with the cloud, each piece is relatively simple and cheap.</p>

<h2>The solution</h2>

<ul>
<li>In Part 1, we install the DevExpress MainDemo on an Amazon EC2 instance.</li>
<li>In Part 2, we use Selenium to write a script which will run on the client machines to control a real browser instance.</li>
<li>In Part 3, we create a NeuStar Web Performance test and validate the script.</li>
<li>In Part 4, we launch a performance test and monitor the server.</li>
<li>In Part 5, we analyse the results of the clients.</li>
</ul>


<p>If you follow all the steps, expect to pay a handful of dollars in Amazon EC2 costs and a few more in Neustar costs. You could alternatively skip step 1 and target one of your own development machines instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to recursively change file ownership]]></title>
    <link href="http://ZeroSharp.github.com/how-to-recursively-change-file-ownership/"/>
    <updated>2013-02-28T17:40:00+00:00</updated>
    <id>http://ZeroSharp.github.com/how-to-recursively-change-file-ownership</id>
    <content type="html"><![CDATA[<p>I recently ran into some file ownership trouble after cloning a bitbucket repository.</p>

<p>The following script saved my bacon.</p>

<figure class='code'><figcaption><span>FixOwnership.ps1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="c"># This script recursively fixes the ownership on the files in the </span>
</span><span class='line'><span class="c"># current and subdirectories.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$acct1</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Principal</span><span class="p">.</span><span class="n">NTAccount</span><span class="p">(</span><span class="s1">&#39;Administrators&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nv">$profilefolder</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="p">.</span>
</span><span class='line'><span class="nv">$acl1</span> <span class="p">=</span> <span class="nv">$profilefolder</span><span class="p">.</span><span class="n">GetAccessControl</span><span class="p">()</span>
</span><span class='line'><span class="nv">$acl1</span><span class="p">.</span><span class="n">SetOwner</span><span class="p">(</span><span class="nv">$acct1</span><span class="p">)</span>
</span><span class='line'><span class="n">dir</span> <span class="n">-r</span> <span class="p">.</span> <span class="p">|</span> <span class="nb">set-acl</span> <span class="n">-aclobject</span> <span class="nv">$acl1</span>
</span><span class='line'><span class="n">pause</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colourful git command line]]></title>
    <link href="http://ZeroSharp.github.com/colourful-git-command-line/"/>
    <updated>2013-02-14T05:10:00+00:00</updated>
    <id>http://ZeroSharp.github.com/colourful-git-command-line</id>
    <content type="html"><![CDATA[<p>For Valentine&#8217;s Day, why not make your git command line a little more colourful.</p>

<pre><code>git config --global color.ui true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A C# Developer's Adventures in iOS - Integrating Git and MonoDevelop]]></title>
    <link href="http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-integrating-git-and-monodevelop/"/>
    <updated>2013-02-08T14:52:00+00:00</updated>
    <id>http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-integrating-git-and-monodevelop</id>
    <content type="html"><![CDATA[<p>This is the second post in a series about iOS development from the perspective of a C# developer.</p>

<p>In the <a href="http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-getting-started/">previous post in the series</a> we got started with MonoTouch and installed MonoDevelop and XCode. In this post, we&#8217;ll look at how to set up version control for an existing MonoTouch solution.</p>

<h2>Version Control</h2>

<p>I didn&#8217;t have enough time <a href="http://ZeroSharp.github.com/how-i-went-from-c-number-developer-to-iphone-developer-in-a-weekend/">at the hackathon</a> to learn how to set up version control for MonoDevelop on a Mac. So let&#8217;s fix that straight away.</p>

<h3>Git</h3>

<p>I&#8217;m much more familiar with Mercurial, and while it&#8217;s possible to get TortoiseHg to run on a Mac, it seems that the Mac world prefers Git. MonoDevelop has Git integrated which I like very much so I&#8217;ll go with Git for now. I can always switch later.</p>

<h3>Ignore files</h3>

<p>Open a terminal and navigate to the root of your existing source code folder.</p>

<pre><code>$ cd Projects/Babingo # replace with /path/to/your/repo
</code></pre>

<p>You need a .gitignore file to avoid version controlling compiled sources and user settings unnecessarily.</p>

<p>Create a new file .gitignore as follows. You can type <code>nano .gitignore</code> if you don&#8217;t have a favourite text editor.</p>

<figure class='code'><figcaption><span>.gitignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># OSX specific
</span><span class='line'>.DS_Store
</span><span class='line'>*.lock
</span><span class='line'>*.swp
</span><span class='line'>*.lock
</span><span class='line'>
</span><span class='line'># Build folders
</span><span class='line'>[Bb]in/
</span><span class='line'>[Oo]bj/
</span><span class='line'>
</span><span class='line'># User specific
</span><span class='line'>*.userprefs
</span><span class='line'>*.usertasks
</span><span class='line'>
</span><span class='line'># Mono project files
</span><span class='line'>*~
</span><span class='line'>*.pidb
</span><span class='line'>*.resources
</span><span class='line'>test-results/</span></code></pre></td></tr></table></div></figure>


<h3>Initial commit</h3>

<p>Now initialise a repository for your existing source code and commit it.</p>

<pre><code>$ git init
$ git add .
$ git commit -m "Initial commit."
</code></pre>

<h3>BitBucket</h3>

<p>Next create a private repository on BitBucket.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-001.png"></p>

<p>You will need the address for your repository from the BitBucket page circled in red below.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-003.png"></p>

<p>Then, from the terminal, push the code to BitBucket. Replace the Url below with the address of your your own repository.</p>

<pre><code>$ git remote add origin https://shamp00@bitbucket.org/shamp00/babingo.git     
$ git push -u origin --all
</code></pre>

<h3>Integration with MonoDevelop</h3>

<p>Open your solution in MonoDevelop and select the <code>Checkout...</code> option from the <code>Version Control</code> menu.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-002.png"></p>

<p>Select <code>Git</code> as the type of repository and put the address to your git repository in the <code>Url</code> field. The rest of the fields are populated automatically. You need to set the <code>Target Directory</code> to the location of your local repository including the trailing slash.</p>

<p>When you click Ok, you will be prompted for your BitBucket credentials.</p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-004.png" width="379" height="92"></p>

<p>That&#8217;s it. Now Git is integrated into your MonoDevelop environment. For instance, you can right-click in the editor to view the diff or the log of the current file, push changes, commit messages locally, etc.</p>

<p>Note that instead of BitBucket, it would have been just as straightforward to host the repository on GitHub instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clone your Octopress to blog from two places]]></title>
    <link href="http://ZeroSharp.github.com/clone-your-octopress-to-blog-from-two-places/"/>
    <updated>2013-02-01T11:59:00+00:00</updated>
    <id>http://ZeroSharp.github.com/clone-your-octopress-to-blog-from-two-places</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://ZeroSharp.github.com/images/blog/clone-your-octopress-001.png"></p>

<p>This post covers how recreate a local repository of your Octopress blog. Perhaps you&#8217;ve accidentally lost it, or perhaps you would like to be able to blog from two different places. Recently <a href="http://ZeroSharp.github.com/the-best-pc-laptop-is-a-mac/">I bought a new computer</a> and I wanted to be able to blog from both my desktop and my laptop.</p>

<h3>How Octopress works</h3>

<p>Octopress repositories have two branches, <code>source</code> and <code>master</code>. The <code>source</code> branch contains the files that are used to generate the blog and the <code>master</code> contains the blog itself.</p>

<p>When the local folders are initially configured according to the <a href="http://octopress.org/docs/setup/">Octopress Setup Guide</a>, the <code>master</code> branch is stored in a subfolder named &#8216;_deploy&#8217;. Since the folder name begins with an underscore, it is ignored when you <code>git push origin source</code>. Instead, the <code>master</code> branch (which contains your blog posts) gets updated when you <code>rake deploy</code>.</p>

<h2>Recreating a local Octopress repository</h2>

<p>To recreate the local directory structure of an existing Octopress blog, follow these instructions.</p>

<h3>Clone your blog to the new machine</h3>

<p>First you need to clone the <code>source</code> branch to the local octopress folder.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.com.git octopress
</code></pre>

<p>Then clone the <code>master</code> branch to the _deploy subfolder.</p>

<pre><code>$ cd octopress
$ git clone git@github.com:username/username.github.com.git _deploy 
</code></pre>

<p>Then run the rake installation to configure everything</p>

<pre><code>$ gem install bundler
$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
$ bundle install
$ rake setup_github_pages
</code></pre>

<p>It will prompt you for your repository URL.</p>

<pre><code>Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
</code></pre>

<p>That&#8217;s you setup with a new local copy of your Octopress blog.</p>

<h3>Pushing changes from two different machines</h3>

<p>If you want to blog from more than one computer, you need to make sure that you push everything before switching computers. From the first machine do the following whenever you&#8217;ve made changes:</p>

<pre><code>$ rake generate
$ git add .
$ git commit -am "Some comment here." 
$ git push origin source  # update the remote source branch 
$ rake deploy             # update the remote master branch
</code></pre>

<p>Then on the other machine, you need to pull those changes.</p>

<pre><code>$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></pre>

<p>Of course, it might be easier to deploy everything from a thumb drive instead&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Ruby with Homebrew and rbenv on Mac OS X Mountain Lion]]></title>
    <link href="http://ZeroSharp.github.com/installing-ruby-with-homebrew-and-rbenv-on-mac-os-x-mountain-lion/"/>
    <updated>2013-01-31T17:38:00+00:00</updated>
    <id>http://ZeroSharp.github.com/installing-ruby-with-homebrew-and-rbenv-on-mac-os-x-mountain-lion</id>
    <content type="html"><![CDATA[<h2>Install Ruby with rbenv</h2>

<p>I decided to setup Octopress on my Mac so that I can publish blog posts from either Windows or MacOS. I&#8217;m on OS X 10.8.2.</p>

<p>I tried to follow the <a href="http://octopress.org/docs/setup/rbenv/">Octopress instructions</a> for installing Ruby but ran into a few problems.</p>

<h3>Install Homebrew</h3>

<p><a href="http://mxcl.github.com/homebrew/">Homebrew</a> is a package manager for OS X. Open Terminal and install Homebrew with:</p>

<pre><code>$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>Once the installation is successful, you can run the following command to check your environment.</p>

<pre><code>$ brew doctor
</code></pre>

<p>Apparently, you should see:</p>

<pre><code>Your system is raring to brew
</code></pre>

<p>But instead I had 3 warnings.</p>

<pre>
<span STYLE="color:red">Warning:</span> /usr/bin occurs before /usr/local/bin
This means that system-provided programs will be used instead of those
provided by Homebrew. The following tools exist at both paths:

    gcov-4.2

Consider amending your PATH so that /usr/local/bin
occurs before /usr/bin in your PATH.
</pre>


<p>This one can be fixed by modifying your <code>.profile</code> file. Create it if it doesn&#8217;t already exist. Use <code>nano ~/.profile</code> if you don&#8217;t have a preferred editor.</p>

<figure class='code'><figcaption><span>.profile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Fix $PATH for homebrew</span>
</span><span class='line'><span class="nv">homebrew</span><span class="o">=</span>/usr/local/bin:/usr/local/sbin
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$homebrew</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>Google tells me the other two warnings are related to Mono being installed and can be ignored.</p>

<pre>
<span STYLE="color:red">Warning:</span> /Library/Frameworks/Mono.framework detected
This can be picked up by CMake's build system and likely cause the build to
fail. You may need to move this file out of the way to compile CMake.

<span STYLE="color:red">Warning:</span> You have a non-Homebrew 'pkg-config' in your PATH:
  /usr/bin/pkg-config => /Library/Frameworks/Mono.framework/Versions/2.10.9/bin/pkg-config

This was most likely created by the Mono installer. `./configure` may
have problems finding brew-installed packages using this other pkg-config.
</pre>


<p>Ploughing on&#8230;</p>

<h2>Install rbenv</h2>

<p>Rbenv handles the installation of multiple Ruby environments.</p>

<pre><code>$ brew update
$ brew install rbenv
$ brew install ruby-build
</code></pre>

<h2>Install gcc</h2>

<p>If I try to install Ruby immediately, I get</p>

<pre>
<span STYLE="color:red">ERROR:</span> This package must be compiled with GCC, but ruby-build
couldn't find a suitable `gcc` executable on your system.
Please install GCC and try again.
...
</pre>


<p>XCode used to ship with a compatible gcc, but no longer does. We can install it with Homebrew.</p>

<pre><code>$ brew update
$ brew tap homebrew/dupes
$ brew install autoconf automake apple-gcc42
</code></pre>

<p>The new gcc will coexist happily alongside the default one.</p>

<h2>Install Ruby 1.9.3</h2>

<p>Now we can install Ruby.</p>

<pre><code>$ rbenv install 1.9.3-p194
$ rbenv rehash
</code></pre>

<p>Next run</p>

<pre><code>$ ruby --version
</code></pre>

<p>Hmm&#8230; I get</p>

<pre><code>ruby 1.8.7 (2012-02-08 patchlevel 358) [universal-darwin12.0]
</code></pre>

<p>Shouldn&#8217;t it say ruby 1.9.3? It turns out you need to add the following to the end of your <code>.profile</code>.</p>

<figure class='code'><figcaption><span>.profile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Initialize rbenv</span>
</span><span class='line'><span class="k">if </span>which rbenv &gt; /dev/null; <span class="k">then </span><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>; <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now quit and restart Terminal.</p>

<pre><code>$ rbenv global 1.9.3-p194
$ ruby --version
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin12.2.1]
</code></pre>

<p>Ruby 1.9.3 is installed correctly. If I quit and restart Terminal, <code>ruby --version</code> is still 1.9.3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A C# Developer's Adventures in iOS - Getting Started]]></title>
    <link href="http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-getting-started/"/>
    <updated>2013-01-30T11:18:00+00:00</updated>
    <id>http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-getting-started</id>
    <content type="html"><![CDATA[<h2>First steps in iPhone development</h2>

<p>This is the first in a series of posts about developing an iOS application from the perspective of a Windows C# developer.</p>

<h3>Startup Weekend</h3>

<p>On a recent month-long trip to South America, I took part in the <a href="http://buenosaires.startupweekend.org/">Buenos Aires Startup Weekend</a> hackathon and my team came second!](/how-i-went-from-c-number-developer-to-iphone-developer-in-a-weekend). The application we built is a treasure hunt game for tourists which helps them discover Buenos Aires. At the beginning of the weekend I knew nothing about mobile development. It was the first time I developed software using a Mac.</p>

<p>First, let&#8217;s look at the basic requirements for the environment.</p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-getting-started-001.png" width="450"></p>

<h3>Xamarin MonoTouch</h3>

<p><a href="http://xamarin.com/monotouch">MonoTouch</a> is the easiest approach for C# developers. It allowed me to write a basic native iPhone app in a weekend with no prior mobile development experience. I&#8217;d never used MonoDevelop or XCode either.</p>

<p>MonoTouch is a software development kit for MacOS that cleverly enables you to use C# and the common .NET libraries (via Mono) along with bindings for the <a href="https://developer.apple.com/technologies/ios/cocoa-touch.html">Apple Cocoa Touch</a> framework to create native applications for iPhone, iPad and iPod. A lot of the tools are the same as for Objective-C developers: you use the iPhone Simulator and the XCode Interface Builder.</p>

<p>If you are a C# developer still wondering whether to learn Objective-C, there is <a href="http://stackoverflow.com/a/1634592/1077279">a magnificent StackOverflow answer</a> comparing MonoTouch and Objective-C.</p>

<h3>Costs</h3>

<p>There are some costs associated with becoming a MonoTouch iOS developer.</p>

<p>You need a Mac. I&#8217;m using a 15&#8221; MacBook Pro. I have it configured for dual boot, but I&#8217;m using the MacOS side for this project.</p>

<p>You will need to sign up as an iOS developer with Apple. This costs <strong>$99</strong> per year. More information about <a href="https://developer.apple.com/programs/">Apple developer programs on their site</a>.</p>

<p>You will need Xamarin MonoTouch which currently costs <strong>$399</strong> for a one year single seat license for a single developer. More information on pricing at the <a href="https://store.xamarin.com/">Xamarin store</a>.</p>

<h3>Setting up the environment</h3>

<p>Xamarin have an <a href="http://docs.xamarin.com/ios/Guides/Getting_Started/Installation">excellent installation guide</a> which guides you through installing both XCode and MonoTouch.</p>

<h3>Hello World</h3>

<p>The next step is to create your first iOS application running in the iPhone simulator. Go through the samples in the <a href="http://docs.xamarin.com/ios/guides/getting_started">MonoTouch getting started guide</a>.</p>

<h3>Next up</h3>

<p>Over the next few weeks I&#8217;m aiming to finish the app I built for Startup Weekend and I&#8217;ll be sharing what I learn along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My amateur git skills have lead to an RSS deluge]]></title>
    <link href="http://ZeroSharp.github.com/my-amateur-git-skills-have-lead-to-an-rss-deluge/"/>
    <updated>2013-01-29T11:31:00+00:00</updated>
    <id>http://ZeroSharp.github.com/my-amateur-git-skills-have-lead-to-an-rss-deluge</id>
    <content type="html"><![CDATA[<p>I was trying to upgrade to the latest Octopress version but it seems I did something with the atom.xml file and some of you got every single post as &#8216;new&#8217; in your RSS readers. Not sure what I did, but sorry for any extra mouse clicks. All working now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Graph Search pwns your privacy]]></title>
    <link href="http://ZeroSharp.github.com/facebook-graph-search-pwns-your-privacy/"/>
    <updated>2013-01-24T11:10:00+00:00</updated>
    <id>http://ZeroSharp.github.com/facebook-graph-search-pwns-your-privacy</id>
    <content type="html"><![CDATA[<p>Facebook&#8217;s new Graph Search allows you to easily see anybody&#8217;s photos.</p>

<p>First, search for someone who is not a friend. Most often, if you navigate to their photos, you see something like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/facebook-graph-search-001.png"></p>

<p>You can&#8217;t see any photos because their privacy settings are not set to &#8216;Public&#8217;. It&#8217;s what you&#8217;d expect.</p>

<h4>Use Graph Search to bypass privacy</h4>

<p>If you put <em>Photos of &lt;name&gt;</em> or <em>Photos by &lt;name&gt;</em> into the new Facebook graph search <strong>you can view all their photos regardless of their privacy settings</strong>. This works even for friends who have put you on a &#8216;limited&#8217; profile.</p>

<p>Your boss/ex/grandma is probably checking out your private photos right now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image captions for Octopress]]></title>
    <link href="http://ZeroSharp.github.com/image-captions-for-octopress/"/>
    <updated>2013-01-23T11:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/image-captions-for-octopress</id>
    <content type="html"><![CDATA[<p>I wanted to add captions to some of my images and came across <a href="https://github.com/imathis/octopress/issues/124">this forum thread</a>, from which I was able to piece together <a href="http://tedkulp.com/">Ted Kulp</a>&#8217;s slick solution.</p>

<p>The following markdown</p>

<pre><code> {% imgcap http://some.url.com/pic.jpg Leonhard Euler %} 
</code></pre>

<p>will render like this.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://upload.wikimedia.org/wikipedia/commons/d/d7/Leonhard_Euler.jpg' width='' height='' alt='Leonhard Euler' title='Leonhard Euler'><span class='caption-text'>Leonhard Euler</span></span></p>

<p>It works with <code>left</code> and <code>right</code> too.</p>

<h3>The changes</h3>

<p>First, create the image_caption_tag plugin and put it in the plugins subfolder.</p>

<figure class='code'><figcaption><span>plugins/image_caption_tag.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Title: Image tag with caption for Jekyll</span>
</span><span class='line'><span class="c1"># Description: Easily output images with captions</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CaptionImageTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>    <span class="vi">@img</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@class</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">markup</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">markup</span> <span class="o">=~</span> <span class="sr">/(\S.*\s+)?(https?:\/\/|\/)(\S+)(\s+\d+\s+\d+)?(\s+.+)?/i</span>
</span><span class='line'>        <span class="vi">@class</span> <span class="o">=</span> <span class="vg">$1</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="vi">@img</span> <span class="o">=</span> <span class="vg">$2</span> <span class="o">+</span> <span class="vg">$3</span>
</span><span class='line'>        <span class="k">if</span> <span class="vg">$5</span>
</span><span class='line'>          <span class="vi">@title</span> <span class="o">=</span> <span class="vg">$5</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">if</span> <span class="vg">$4</span> <span class="o">=~</span> <span class="sr">/\s*(\d+)\s+(\d+)/</span>
</span><span class='line'>          <span class="vi">@width</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>          <span class="vi">@height</span> <span class="o">=</span> <span class="vg">$2</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">output</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@img</span>
</span><span class='line'>        <span class="s2">&quot;&lt;span class=&#39;</span><span class="si">#{</span><span class="p">(</span><span class="s1">&#39;caption-wrapper &#39;</span> <span class="o">+</span> <span class="vi">@class</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="si">}</span><span class="s2">&#39;&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>          <span class="s2">&quot;&lt;img class=&#39;caption&#39; src=&#39;</span><span class="si">#{</span><span class="vi">@img</span><span class="si">}</span><span class="s2">&#39; width=&#39;</span><span class="si">#{</span><span class="vi">@width</span><span class="si">}</span><span class="s2">&#39; height=&#39;</span><span class="si">#{</span><span class="vi">@height</span><span class="si">}</span><span class="s2">&#39; alt=&#39;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&#39; title=&#39;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&#39;&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>          <span class="s2">&quot;&lt;span class=&#39;caption-text&#39;&gt;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&lt;/span&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;&lt;/span&gt;&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;Error processing input, expected syntax: &lt;img class=&quot;</span><span class="o">[</span><span class="k">class</span> <span class="nb">name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">]</span><span class="s2">&quot; src=&quot;</span><span class="o">/</span><span class="n">url</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">image</span><span class="s2">&quot; title=&quot;</span><span class="o">[</span><span class="n">width</span> <span class="n">height</span><span class="o">]</span> <span class="o">[</span><span class="n">title</span> <span class="n">text</span><span class="o">]</span><span class="s2">&quot; &gt;&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;imgcap&#39;</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">CaptionImageTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, modify the _utilities.scss file as follows.</p>

<figure class='code'><figcaption><span>sass/base/_utilities.scss  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>   border: $border;
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'><span class="gi">+@mixin reset-shadow-box() {</span>
</span><span class='line'><span class="gi">+  @include shadow-box(0px, 0px, 0px);</span>
</span><span class='line'><span class="gi">+}</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> @mixin selection($bg, $color: inherit, $text-shadow: none){
</span><span class='line'>   * {
</span><span class='line'>     &amp;::-moz-selection { background: $bg; color: $color; text-shadow: $text-shadow; }
</span></code></pre></td></tr></table></div></figure>


<p>Finally, apply the following changes to the _blog.scss file.</p>

<figure class='code'><figcaption><span>sass/partials/_blog.scss  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>   article {
</span><span class='line'>     font-size: 2.0em; font-style: italic;
</span><span class='line'>     line-height: 1.3em;
</span><span class='line'>   }
</span><span class='line'><span class="gd">-  img, video, .flash-video {</span>
</span><span class='line'><span class="gi">+  img, video, .flash-video, .caption-wrapper {</span>
</span><span class='line'>     @extend .flex-content;
</span><span class='line'>     @extend .basic-alignment;
</span><span class='line'>     @include shadow-box;
</span><span class='line'><span class="gi">+    &amp;.caption {</span>
</span><span class='line'><span class="gi">+      @include reset-shadow-box;</span>
</span><span class='line'><span class="gi">+    }</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'><span class="gi">+  .caption-wrapper {</span>
</span><span class='line'><span class="gi">+    display: inline-block;</span>
</span><span class='line'><span class="gi">+    margin-bottom: 10px;</span>
</span><span class='line'><span class="gi">+    .caption-text {</span>
</span><span class='line'><span class="gi">+      background: #fff;</span>
</span><span class='line'><span class="gi">+      text-align: center;</span>
</span><span class='line'><span class="gi">+      font-size: .8em;</span>
</span><span class='line'><span class="gi">+      color: #666;</span>
</span><span class='line'><span class="gi">+      display: block;</span>
</span><span class='line'><span class="gi">+    }</span>
</span><span class='line'>   }
</span><span class='line'>   video, .flash-video { margin: 0 auto 1.5em; }
</span><span class='line'>   video { display: block; width: 100%; }
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Regenerate your Octopress site and you can start using <code>imgcap</code> instead of <code>img</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress on Windows Again]]></title>
    <link href="http://ZeroSharp.github.com/setting-up-octopress-on-windows-again/"/>
    <updated>2013-01-17T11:20:00+00:00</updated>
    <id>http://ZeroSharp.github.com/setting-up-octopress-on-windows-again</id>
    <content type="html"><![CDATA[<p>My <a href="http://ZeroSharp.github.com/setting-up-octopress-on-windows/">very first blog post</a> was about setting up Octopress. The following is an updated version of those instructions for setting up Octopress with Windows, ruby 1.9.3, python 2.7.3.</p>

<p>This is quick guide to setting up <a href="http://octopress.org/">Octopress</a> to publish to GitHub pages. I&#8217;m using Windows 8 64-bit, but the instructions should work with other versions of Windows.</p>

<h3>Get with GitHub</h3>

<p>First, get an account on GitHub and follow the excellent instructions for Windows here.  <a href="http://help.github.com/win-set-up-git/">here</a>.</p>

<p>Once you are set up with GitHub, get <a href="https://github.com/scottmuc/yari">yari</a> by opening a command prompt:</p>

<p>Then create a directory for all your github projects.  You could put this anywhere, e.g., <code>%USERPROFILE%\github</code>.  I chose to create a directory <code>C:\projects\github\</code>.</p>

<h3>Installing Octopress</h3>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/octopress_logo.png"></p>

<h4>Use yari instead of RVM/rbenv</h4>

<p>Scott Muc has written <a href="https://github.com/scottmuc/yari">yari</a> which lets you switch between Windows Ruby versions.  Get it with the following command.</p>

<pre><code>cd C:\projects\github\
git clone git://github.com/scottmuc/yari.git yari
</code></pre>

<p>Once this has completed you can setup the required Ruby environment with the command:</p>

<pre><code>yari 1.9.3
</code></pre>

<p>Then follow the rest of the instructions from <a href="http://octopress.org/docs/setup/">the Octopress setup instructions</a>.</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
ruby --version  # Should report Ruby 1.9.3 thanks to yari
</code></pre>

<p>Next install dependencies</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>Install the default Octopress theme.</p>

<pre><code>rake install
</code></pre>

<h3>Deploying to GitHub</h3>

<p>The instructions are <a href="http://octopress.org/docs/deploying/github/">here</a>.  The only difficulty I had was working out which URL to use after:</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>This will ask you for your Github Pages repository url, but it is not clear that this is the SSH one, e.g., <code>git@github.com:ZeroSharp/zerosharp.github.com.git</code>.  You can find it near the top of <a href="https://github.com/ZeroSharp/zerosharp.github.com">the repository page</a>.</p>

<h3>Configuring your blog</h3>

<p>Follow the instructions <a href="http://octopress.org/docs/configuring/">here</a> to configure your blog.</p>

<h4>Markdown</h4>

<p>It is quite difficult to find good help on the markdown syntax other than for the codeblocks section.  For instance, it is not clear how to generate a codeblock with no line numbers, like this one:</p>

<pre><code>How do I output a codeblock with no line numbers?
</code></pre>

<p>It turns out it either requires a <code>&lt;pre&gt;</code> tag instead of a <code>{ codeblock }</code> tag, or alternatively, start the line with four spaces.  The official syntax is <a href="http://daringfireball.net/projects/markdown/syntax">here</a>, but I also found <a href="http://warpedvisions.org/projects/markdown-cheat-sheet/">this cheat sheet</a>.</p>

<h4>Fonts and Styles</h4>

<p>See <a href="http://blog.bigdinosaur.org/changing-octopresss-header/">Lee&#8217;s Bigdinosaur blog</a>.</p>

<h4>Problem with CodeBlocks</h4>

<p>I had a problem with codeblocks which seems to be specific to Windows.  It seems that whenever you include a <code>lang</code> parameter in a <code>codeblock</code>, you get:</p>

<pre><code>Liquid error: No such file or directory - python2.7 -c “import sys; print sys.executable”
</code></pre>

<p>There are two issues:</p>

<ul>
<li>Syntax highlighting requires Python which is not automatically installed.</li>
<li>There is a problem with pythonexec.rb which does not seem to support Windows Python installations very well.</li>
</ul>


<p>Luckily we can fix them both.  Install <a href="http://www.python.org/getit/releases/2.7.3/">Python 2.7.3</a>.  Actually I used <a href="http://ninite.com/">ninite.com</a> to install it.</p>

<p>Then modify the pythonrubyexec.rb which is in the depths of the yari subdirectory.  Try here: <code>.\yari\ruby-1.9.3-p194-i386-mingw32\lib\ruby\gems\1.9.3\gems\rubypython-0.5.3\lib\rubypython\pythonexec.rb</code></p>

<p>At the top of pythonexec.rb, modify the file as follows:</p>

<figure class='code'><figcaption><span>pythonexec.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>class RubyPython::PythonExec
</span><span class='line'>  def initialize(python_executable)
</span><span class='line'>    @python = python_executable || &quot;python&quot;
</span><span class='line'>
</span><span class='line'><span class="gi">+    if (@python.include? &#39;python2.7&#39;)</span>
</span><span class='line'><span class="gi">+      @python = &quot;python&quot;</span>
</span><span class='line'><span class="gi">+    end</span>
</span><span class='line'>
</span><span class='line'>    @python = %x(#{@python} -c &quot;import sys; print sys.executable&quot;).chomp
</span><span class='line'>
</span><span class='line'>    @version = run_command &quot;import sys; print &#39;%d.%d&#39; % sys.version_info[:2]&quot;
</span><span class='line'>
</span><span class='line'><span class="gd">-    @dirname = File.dirname(@python)</span>
</span><span class='line'><span class="gi">+    @dirname = &quot;C:/Python27&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better handling of Decimals in the XAF audit trail]]></title>
    <link href="http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail/"/>
    <updated>2013-01-15T10:29:00+00:00</updated>
    <id>http://ZeroSharp.github.com/better-handling-of-decimals-in-the-xaf-audit-trail</id>
    <content type="html"><![CDATA[<p>The following screenshot shows the detail view of an object change from the DevExpress XAF Audit Trail. The <code>DecimalValue</code> property was changed from 123.45 to 543.22.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-001.jpg"></p>

<p>Why is the <code>OldValue</code> property is displayed with two trailing zeros? The corresponding property is defined as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DefaultClassOptions]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="n">XPObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyClass</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">decimal</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'><span class="na">    [ModelDefault(&quot;DisplayFormat&quot;, &quot;{0:n2}&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">decimal</span> <span class="n">DecimalValue</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_DecimalValue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">SetPropertyValue</span><span class="p">(</span><span class="s">&quot;DecimalValue&quot;</span><span class="p">,</span> <span class="k">ref</span> <span class="n">_DecimalValue</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">XPCollection</span><span class="p">&lt;</span><span class="n">AuditDataItemPersistent</span><span class="p">&gt;</span> <span class="n">ChangeHistory</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_ChangeHistory</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_ChangeHistory</span> <span class="p">=</span> <span class="n">AuditedObjectWeakReference</span><span class="p">.</span><span class="n">GetAuditTrail</span><span class="p">(</span><span class="n">Session</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_ChangeHistory</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Explanation and fix</h3>

<p>A C# <code>decimal</code> is a type which represents a number&#8217;s value <em>and its precision</em>. It actually stores the number of trailing zeros along with the value. For the <code>NewValue</code>, it has stored the decimal value as the user entered it - with no trailing zeros. Howevever, for the <code>OldValue</code>, it has retrieved the value from the database and used the SQL column definition to determine the precision.</p>

<p>The default SQL column type that XPO column type for properties of type <code>decimal</code> is the <code>money</code> type (<a href="http://msdn.microsoft.com/en-us/library/aa933242.aspx">see the MSDN documentation</a>) which stores 4 decimal places of precision. If we override this with, say, a <code>DECIMAL(28, 13)</code>, the audit trail would show 13 decimal places of precision.</p>

<p>From the user&#8217;s perspective, this looks a little confusing, so let&#8217;s fix it.</p>

<p>During the initialization of your application (in Application_Start for a web application), add an event to the <code>AuditTrailService</code> as follows.</p>

<pre><code>AuditTrailConfig.Initialize();
</code></pre>

<p>and then declare the <code>AuditTrailConfig</code> helper class as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">AuditTrailConfig</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AuditTrailService</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">SaveAuditTrailData</span> <span class="p">+=</span> <span class="n">Instance_SaveAuditTrailData</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Instance_SaveAuditTrailData</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NormalizeOldValuesDecimalPrecision</span><span class="p">(</span><span class="n">SaveAuditTrailDataEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">decimalAuditTrailDataItems</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">AuditTrailDataItems</span>
</span><span class='line'>                                          <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">OldValue</span> <span class="k">is</span> <span class="kt">decimal</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">AuditDataItem</span> <span class="n">auditTrailItem</span> <span class="k">in</span> <span class="n">decimalAuditTrailDataItems</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// remove any trailing zeros from OldValue</span>
</span><span class='line'>            <span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span> <span class="p">=</span> <span class="p">((</span><span class="kt">decimal</span><span class="p">)</span><span class="n">auditTrailItem</span><span class="p">.</span><span class="n">OldValue</span><span class="p">).</span><span class="n">Normalize</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Normalize()</code> method is an extension method. See the <a href="http://ZeroSharp.github.com/how-to-remove-the-trailing-zeros-of-precision-from-a-c-number-decimal/">trick in my last post</a> for more information.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DecimalExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">decimal</span> <span class="nf">Normalize</span><span class="p">(</span><span class="k">this</span> <span class="kt">decimal</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">value</span> <span class="p">/</span> <span class="m">1.000000000000000000000000000000000</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the same change would be logged as follows.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/audit-trail-002.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to remove the trailing zeros of precision from a C# Decimal]]></title>
    <link href="http://ZeroSharp.github.com/how-to-remove-the-trailing-zeros-of-precision-from-a-c-number-decimal/"/>
    <updated>2013-01-09T17:45:00+00:00</updated>
    <id>http://ZeroSharp.github.com/how-to-remove-the-trailing-zeros-of-precision-from-a-c-number-decimal</id>
    <content type="html"><![CDATA[<p>You may know that the C# <code>Decimal</code> type remembers any trailing zeros. So for instance:</p>

<pre><code>Console.WriteLine(123.45m);
Console.WriteLine(123.45000m);
Console.WriteLine(123.4500000m);
</code></pre>

<p>results in</p>

<pre><code>123.45
123.45000
123.4500000
</code></pre>

<p>This is because the <code>Decimal</code> type is designed for representing a number including its accuracy.</p>

<p>It is tricky to find a good way of controlling this accuracy. If I have <code>x = 123.45000</code>, how can I easily remove the trailing zeros so that <code>x.ToString()</code> outputs <code>123.45</code>?</p>

<p>For a while it looked like I&#8217;d have to perform some <a href="http://stackoverflow.com/a/4298787/1077279">Jon Skeet wizardry</a>, but there is a simpler solution. The following extension method will remove all the trailing zeros.</p>

<pre><code>public static class DecimalExtensions
{
    public static Decimal Normalize(this Decimal value)
    {
        return value / 1.000000000000000000000000000000000m;
    }
}
</code></pre>

<p>And if you need an exact number of trailing zeros, you can first <code>Normalize()</code> and then multiply.</p>

<pre><code>Console.WriteLine(123.45m.Normalize() * 1.000m); 
</code></pre>

<p>will output the following.</p>

<pre><code>123.45000
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I went from C# Developer to iPhone Developer in a Weekend]]></title>
    <link href="http://ZeroSharp.github.com/how-i-went-from-c-number-developer-to-iphone-developer-in-a-weekend/"/>
    <updated>2013-01-04T10:35:00+00:00</updated>
    <id>http://ZeroSharp.github.com/how-i-went-from-c-number-developer-to-iphone-developer-in-a-weekend</id>
    <content type="html"><![CDATA[<p>Recently I took part in <a href="http://buenosaires.startupweekend.org/">Startup Weekend Buenos Aires</a>. It works just like most hackathons:</p>

<p><a href="http://buenosaires.startupweekend.org/2012/11/12/ganadores-swba2012/"><span class='caption-wrapper right'><img class='caption' src='http://ZeroSharp.github.com/images/blog/basw/BABingo-2puesto-SWBA2012.jpg' width='' height='' alt='New friends: Caro, Eze, Gus and me' title='New friends: Caro, Eze, Gus and me'><span class='caption-text'>New friends: Caro, Eze, Gus and me</span></span></a></p>

<ul>
<li>You give a one minute pitch on Friday evening.</li>
<li>Winners put together a team.</li>
<li>You work with your team on Saturday and Sunday to launch a product.</li>
<li>Demo for the judges.</li>
<li>Prizes. Beer. Sleep.</li>
</ul>


<p>On the Friday I spoke no Spanish and had no idea how to write an iPhone app. By Sunday I still spoke no Spanish, but <strong>I&#8217;d built my first app and it won second prize!</strong></p>

<p>How did I learn Objective-C in a weekend? I didn&#8217;t. I wrote it in C#.</p>

<p><span class='pullquote-right' data-pullquote='Monotouch makes mobile development really easy for C# programmers.'>
I downloaded <a href="http://xamarin.com/monotouch">Xamarin MonoTouch</a> onto my <a href="http://ZeroSharp.github.com/the-best-pc-laptop-is-a-mac/">MacBook Pro</a> and was following the &#8216;Hello World&#8217; tutorial within an hour. The MonoTouch <a href="http://docs.xamarin.com/iOS/Guides">documentation</a> is very clear and the <a href="http://docs2.xamarin.com/ios/samples">samples</a> are very useful. Very soon I had a multiple screen application built, including capturing an image from the camera.</p>

<p>Monotouch makes mobile development really easy for C# programmers. It&#8217;s also cross-platform so you can re-use big chunks of your code when you write the Android version.</p>

<p>Check out <a href="http://blog.xamarin.com/eight-reasons-c-sharp-is-the-best-language-for-mobile-development/">this recent blog post from the guys at Xamarin</a>.
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 5]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/"/>
    <updated>2012-12-05T11:03:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing</id>
    <content type="html"><![CDATA[<h2>Part 5: Load balancing</h2>

<p>This is the final post in this 5 part series about deploying XAF to the Amazon cloud. The other parts are:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1 - Creating a database in RDS</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2 - Deploying to ElasticBeanstalk</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3 - Troubleshooting</a></li>
<li><a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/">Part 4 - Incremental Deployment</a></li>
</ul>


<p>This part covers load balancing and autoscaling.</p>

<h3>Load balancing</h3>

<p>In order to enable load balancing with DevExpress XAF applications, you must activate client affinity (sticky sessions) which you can do in the <strong>Load Balancer tab</strong>.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-2.jpg" title="'figure 19'" ></p>

<p>This is because XAF relies http session variables (notably the <code>WebApplication</code>). With sticky sessions enabled, when a user first hits the Elastic Load Balancer, they are assigned a random server but all subsequent requests are routed to the same server instance.</p>

<h2>Autoscaling</h2>

<h3>Adding Capacity (Works)</h3>

<p>Switch to the <strong>Auto Scaling</strong> tab of the Elastic Beanstalk instance.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/aws-autoscaling-1.jpg" title="'figure 19'" ></p>

<p>The options for autoscaling are extensive and there is plenty information on the <a href="http://aws.amazon.com/autoscaling">Amazon website</a>. In the above screenshot we have the Elastic Load Balancer configured so that it will initially deploy 1 server (the Minimum Instance Count), but whenever the NetworkOut measurement of 600,000 bytes over a 5 minute interval, a new server launch is triggered up to a maximum of 4 servers. Adding capacity works fine with XAF applications.</p>

<h3>Removing Capacity (Fails)</h3>

<p>The configuration above also shows that if the NetworkOut drops to below 200,000 bytes over a period of 5 minutes then the number of servers should decrease. <strong>This will NOT work</strong>.</p>

<p>The problem is that the Elastic Load Balancer will terminate the surplus server immediately (the equivalent of a <code>shutdown -s</code>). Any users connected to that server will immediately lose their session and will probably receive an ugly error.</p>

<p>One workaround is to allow scaling out but to disable scaling in. To do this, set the &#8216;Lower Threshold&#8217; to zero.</p>

<h3>Possible Improvements</h3>

<p>There are a couple of potential longer term solutions to the problem of dropped sessions when scaling in.</p>

<p>DevExpress could make the classes they use in the session variables serializable (e.g., <code>WebApplication</code>). When this is the case, the application can be configured to store the session variables to a persistent data store (SQL Server for instance) instead of in the session and then we could configure autoscaling to work correctly. There is <a href="http://www.devexpress.com/Support/Center/Question/Details/Q426045">an item in the Support Center in this regard</a> and <a href="http://www.devexpress.com/Support/Center/p/S36497.aspx">another one here</a>.</p>

<p>Another solution would be if Amazon provided a new option to handle a server termination in a less brutal fashion. That is, stop routing new users to the surplus server but continue to server existing users until their sessions have all terminated. This approach is discussed in <a href="https://forums.aws.amazon.com/thread.jspa?threadID=61278">this AWS forum thread</a>.</p>

<h2>Conclusions</h2>

<p>The load balancing features of AWS work fine with XAF applications, but the benefits of autoscaling are lost because there is currently no effective method of removing capacity without knocking out existing sessions.</p>

<h2>What next</h2>

<p>In a future series, I will demonstrate how to load test XAF applications cheaply and effectively by making use of Amazon Web Services. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy XAF ASP.NET Applications to Amazon Web Services: Part 4]]></title>
    <link href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment/"/>
    <updated>2012-11-05T14:16:00+00:00</updated>
    <id>http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-4-incremental-deployment</id>
    <content type="html"><![CDATA[<h2>Part 4: Incremental Deployment</h2>

<p>This is the fourth post in a series about deploying ASP.NET applications to the Amazon cloud. In the first three posts covered deploying the XAF ASP.NET MainDemo to the Amazon cloud (<a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-3-troubleshooting-via-remote-desktop/">Part 3</a>).</p>

<p>When we deployed to the Elastic Beanstalk in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a>, we chose <em>not</em> to enable incremental deployment.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-2.jpg" title="'figure 11'" ></p>

<p>I want to explain this decision further.</p>

<p>If you choose not to deploy incrementally your deployment will take longer because the entire web deployment package needs to be uploaded every time you re-publish which takes about 4-5 minutes on my connection. The incremental deployment option creates a git repository in the target environment so that only the modified files are re-deployed. If you are frequently making changes and redploying, you can save considerable time. A re-deployment takes only a few seconds.</p>

<p>However, if you try to deploy from the default MainDemo location with incremental deployment enabled, you will probably get the following error</p>

<pre><code>Commencing deployment for project MainDemo.Web
...building deployment package obj\Release\Package\Archive...
...deployment package created at C:\Users\Public\Documents\DXperience 12.1 Demos\eXpressApp Framework\MainDemo\CS\MainDemo.Web\obj\Release\Package\Archive
...build of project archive completed succesfully
...starting deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo'
...starting incremental deployment to environment 'zerosharp-maindemo'
Deployment to AWS Elastic Beanstalk failed with exception: Exception caught during execution of add command,
Inner Exception Message: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
...
Deployment to AWS Elastic Beanstalk environment 'zerosharp-maindemo' did not complete successfully
</code></pre>

<p>The problem is with the NGit libraries that the AWS Toolkit uses. Presumably a fix will emerge, but the simplest workaround is to move the application to a shorter path. Then you can enable incremental deployment when you publish:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/aws/launch-aws-beanstalk-incremental-2.jpg" title="'figure 21'" ></p>

<p>Note that you can toggle incremental deployment whenever you publish, so you&#8217;re not locked in either way.</p>

<h2>Next up</h2>

<p>In the <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-5-load-balancing/">next post</a> we will enable load balancing (which is easy) and discuss the problems with autoscaling XAF applications (which is not).</p>
]]></content>
  </entry>
  
</feed>
