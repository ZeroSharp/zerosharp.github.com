<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeroSharp]]></title>
  <link href="http://ZeroSharp.github.com/atom.xml" rel="self"/>
  <link href="http://ZeroSharp.github.com/"/>
  <updated>2013-09-09T08:01:39+01:00</updated>
  <id>http://ZeroSharp.github.com/</id>
  <author>
    <name><![CDATA[Robert Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Always run Visual Studio as an Administrator]]></title>
    <link href="http://ZeroSharp.github.com/always-run-visual-studio-as-an-administrator/"/>
    <updated>2013-09-09T07:49:00+01:00</updated>
    <id>http://ZeroSharp.github.com/always-run-visual-studio-as-an-administrator</id>
    <content type="html"><![CDATA[<p>I always run Visual Studio as an administrator. There are various reasons why this is necessary including:</p>

<ul>
<li>using IIS with a web application</li>
<li>running web UI tests</li>
<li>profiling</li>
</ul>


<p>In fact there&#8217;s a list <a href="http://msdn.microsoft.com/en-us/library/vstudio/jj662724.aspx">on MSDN</a> of all the actions you require administrator permissions.</p>

<p>Here is a way to make sure Visual Studio always opens with elevated privileges, even if you double click on a <em>.sln</em> file. (I&#8217;m running Windows 8.)</p>

<ul>
<li>Right-click <em>devenv.exe</em></li>
<li>Select <em>Troubleshoot program</em></li>
<li>Check <em>The program requires additional permissions</em></li>
<li>Click <em>Next</em></li>
<li>Click <em>Test the program&#8230;</em></li>
<li>Wait for the program to launch</li>
<li>Click <em>Next</em></li>
<li>Select <em>Yes, save these settings for this program</em></li>
<li>Click <em>Close</em></li>
</ul>


<p>If you have multiple versions of Visual Studio installed, you should repeat the operation for all of the following.</p>

<table>
<thead>
<tr>
<th>Program </th>
<th> &nbsp;Default location</th>
</tr>
</thead>
<tbody>
<tr>
<td>&nbsp;Visual Studio 2008&nbsp; </td>
<td> &nbsp;<em>C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe</em> &nbsp;</td>
</tr>
<tr>
<td>&nbsp;Visual Studio 2010&nbsp; </td>
<td> &nbsp;<em>C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\devenv.exe</em> &nbsp; </td>
</tr>
<tr>
<td>&nbsp;Visual Studio 2012&nbsp; </td>
<td> &nbsp;<em>C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\devenv.exe</em> &nbsp;</td>
</tr>
<tr>
<td>&nbsp;VSLauncher.exe&nbsp; </td>
<td> &nbsp;<em>C:\Program Files (x86)\Common Files\Microsoft Shared\MSEnv\VSLauncher.exe</em> &nbsp;</td>
</tr>
</tbody>
</table>


<p>&nbsp;</p>

<p>That&#8217;s it. Now Visual Studio always opens with administrator privileges.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Visual Studio update links when running as Administrator]]></title>
    <link href="http://ZeroSharp.github.com/fix-visual-studio-update-links-when-running-as-administrator/"/>
    <updated>2013-09-02T09:58:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fix-visual-studio-update-links-when-running-as-administrator</id>
    <content type="html"><![CDATA[<p>This post is about fixing an annoyance whereby Visual Studio refuses to update extensions when running as an administrator.</p>

<p>I always had a problem when an update to an extension or tool tried to open the browser. For instance, I would see this notification in the system tray.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/visual-studio-updates-001.png"></p>

<p>And then when I went to <em>Tools/Extensions and Updates&#8230;</em> in Visual Studio, I&#8217;d get to something like this:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/visual-studio-updates-002.png"></p>

<p>But the <em>Update</em> button was not responding to any clicks. The only workaround I found was to restart Visual Studio under my normal user account and then the button would work.</p>

<h2>The fix at last</h2>

<p>It turns out the problem rather specific. It only occurs when you run VS2012 as an administrator and you have Google Chrome set as your default browser. The problem is that older versions of Google Chrome failed to register themselves as the default browser for administrator users. You can confirm this by doing the following from an admin command prompt:</p>

<pre><code>start http://blog.zerosharp.com
</code></pre>

<p>You&#8217;ll get a message saying <em>Class not registered</em>.</p>

<p>Unfortunately, updating to newer installations of Chrome does not fix the problem. You need to uninstall and reinstall. (This sounds like a lot of hassle, but if you are using Chrome sync it is very easy and only takes about a minute).</p>

<ul>
<li>Uninstall Chrome by going to <em>Control Panel/Uninstall a program</em>. * Open IE and download Chrome.</li>
<li>During the installation process it will ask you to enable sync.</li>
<li>A few seconds later everything should be back as at it was.</li>
</ul>


<p>But better, because the <em>Update</em> button in Visual Studio now works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniProfiler with DevExpress XAF]]></title>
    <link href="http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf/"/>
    <updated>2013-08-27T09:14:00+01:00</updated>
    <id>http://ZeroSharp.github.com/miniprofiler-with-devexpress-xaf</id>
    <content type="html"><![CDATA[<p>In this post I will demonstrate how to add <a href="http://miniprofiler.com/">MiniProfiler</a> to the XAF MainDemo web application.</p>

<p>MiniProfiler is a simple fast profiler with a pretty user interface. It is fast because it only profiles code that you have explicitly decorated with the <code>MiniProfiler.Step()</code> method. It was designed by the team at <a href="http://stackoverflow.com/">StackOverflow</a>.</p>

<p>First, add the MiniProfiler NuGet package to the MainDemo.Web project. Then add a placeholder to <em>default.aspx</em> just before the last <code>&lt;body&gt;</code> tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- MiniProfiler --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Include jquery here to avoid a bug in MiniProfiler. --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;asp:PlaceHolder</span> <span class="na">ID=</span><span class="s">&quot;mp&quot;</span> <span class="na">runat=</span><span class="s">&quot;server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= StackExchange.Profiling.MiniProfiler.RenderIncludes() %&gt;
</span><span class='line'><span class="nt">&lt;/asp:PlaceHolder&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(MiniProfiler uses jQuery, but it does not usually require XAF to include it since it will automatically retrieve it if missing. Unfortunately there is currently <a href="http://community.miniprofiler.com/permalinks/149/jquery-is-undefined">a bug</a> which causes a &#8217;<em>jQuery is undefined</em>&#8217; javascript error when initially launching the application. The easiest workaround I found is to explicitly include jQuery before calling <code>RenderIncludes()</code>. Hopefully this will be fixed in a future version of MiniProfiler.)</p>

<p>In <em>global.asax.cs</em> add the following to the <code>Application_Start</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e) {
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'><span class="gi">+   MiniProfilerHelper.RegisterPathsToIgnore();</span>
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>    // etc...
</span></code></pre></td></tr></table></div></figure>


<p>and modify <code>BeginRequest</code> and <code>EndRequest</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_BeginRequest(object sender, EventArgs e) {
</span><span class='line'><span class="gi">+   if (MiniProfilerHelper.IsEnabled())</span>
</span><span class='line'><span class="gi">+   {</span>
</span><span class='line'><span class="gi">+       MiniProfiler.Start();</span>
</span><span class='line'><span class="gi">+   }</span>
</span><span class='line'>    string filePath = HttpContext.Current.Request.PhysicalPath;
</span><span class='line'>    if(!string.IsNullOrEmpty(filePath)
</span><span class='line'>        &amp;&amp; (filePath.IndexOf(&quot;Images&quot;) &gt;= 0) &amp;&amp; !System.IO.File.Exists(filePath)) {
</span><span class='line'>        HttpContext.Current.Response.End();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>protected void Application_EndRequest(Object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'><span class="gi">+   if (MiniProfilerHelper.IsEnabled())</span>
</span><span class='line'><span class="gi">+       MiniProfiler.Stop();</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now we implement a helper class which determines whether profiling is enabled and which URLs to profile. We can use a variety of methods, the cookie probably being the most versatile one, but for the moment, the <code>IsEnabled()</code> function always returns true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MiniProfilerHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsEnabled</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// While we are testing let&#39;s always return true</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We should not profile if we are EasyTesting</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">TestScriptsManager</span><span class="p">.</span><span class="n">EasyTestEnabled</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We could choose to profile only local requests</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">IsLocal</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Or based on a cookie</span>
</span><span class='line'>        <span class="n">HttpCookie</span> <span class="n">miniProfileCookie</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&quot;MainDemoMiniProfiler&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">miniProfileCookie</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">miniProfileCookie</span><span class="p">.</span><span class="n">Value</span> <span class="p">!=</span> <span class="s">&quot;0&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Optionally ignore some paths to prevent the output being too busy.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterPathsToIgnore</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">NetSecuritySettings</span><span class="p">.</span><span class="n">IsProfilingAllowed</span><span class="p">())</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="n">ignoredByMiniProfiler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">IgnoredPaths</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// these are a substring search so wildcards are not supported</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;SessionKeepAliveReconnect.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;TemplateScripts.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;EasyTestJavaScripts.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;MoveFooter.js&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;ImageResource.axd&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">IgnoredPaths</span> <span class="p">=</span> <span class="n">ignoredByMiniProfiler</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done. Now whenever you run the web application, you get timing statistics for the loading of the assets. They appear as little clickable &#8216;chiclets&#8217; in the top left of the browser page.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-1.png"></p>

<p>However, the real strength of MiniProfiler comes with the ability to add your own profiling steps. Let&#8217;s say we want to know exactly what percentage of the load takes place in the <code>OnLoad</code> event. Then we add the following to <em>default.aspx.cs</em> in order to add a &#8216;step&#8217; to the MiniProfiler breakdown.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnLoad</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">profiler</span> <span class="p">=</span> <span class="n">MiniProfiler</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span> <span class="c1">// it&#39;s ok for this to be null</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">Step</span><span class="p">(</span><span class="s">&quot;ASP.NET: Page_Load(Default)&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">base</span><span class="p">.</span><span class="n">OnLoad</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the output is a good deal richer. Also, note that if the MiniProfiler assembly is missing from the web application&#8217;s <em>bin</em> directory, the profiling is ignored completely without error.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-2.png"></p>

<p>As another example, let&#8217;s profile the <em>FindBySubject</em> controller action.</p>

<p>Add the MiniProfiler NuGet package to the MainDemo.Module project. Then modify the FindBySubjectController.cs as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>private void FindBySubjectAction_Execute(object sender, ParametrizedActionExecuteEventArgs e)
</span><span class='line'>{
</span><span class='line'><span class="gi">+   var profiler = MiniProfiler.Current;</span>
</span><span class='line'><span class="gi">+   using (profiler.Step(&quot;FindBySubject&quot;)) // doesn&#39;t matter if profiler is null</span>
</span><span class='line'><span class="gi">+   {</span>
</span><span class='line'>        IObjectSpace objectSpace = Application.CreateObjectSpace();
</span><span class='line'>        string paramValue = e.ParameterCurrentValue as string;
</span><span class='line'>        if (!string.IsNullOrEmpty(paramValue))
</span><span class='line'>        {
</span><span class='line'>            paramValue = &quot;%&quot; + paramValue + &quot;%&quot;;
</span><span class='line'>        }
</span><span class='line'>        object obj = objectSpace.FindObject(((ListView)View).ObjectTypeInfo.Type,
</span><span class='line'>            new BinaryOperator(&quot;Subject&quot;, paramValue, BinaryOperatorType.Like));
</span><span class='line'>        if (obj != null)
</span><span class='line'>        {
</span><span class='line'>            e.ShowViewParameters.CreatedView = Application.CreateDetailView(objectSpace, obj);
</span><span class='line'>        }
</span><span class='line'><span class="gi">+   }</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/xaf-miniprofiler-3.png"></p>

<p>Now navigate to the <em>Tasks</em> list view and enter some text where it says &#8216;Type Subject&#8230;&#8217;. You should see a new chiclet appear which contains the timing details as shown here.</p>

<p>MiniProfiler is a great tool for providing helpful profiling benchmarks, even in production. It&#8217;s often difficult to measure when a remote user complains to support that the site seems slow. How slow is slow? In a production environment, you can turn on MiniProfiler for the user (by setting a cookie for instance) and then ask them to share their profiling information for some basic operations. This information can be invaluable in determining where the fault lies.</p>

<p>You can play around with <a href="https://github.com/ZeroSharp/Xaf_MainDemo_MiniProfiler">the sample solution</a> up on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Implementation]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation/"/>
    <updated>2013-08-14T11:03:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-implementation</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro">last post</a>, I&#8217;ll demonstrate how to create a fluent interface so that you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">InTransaction</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Developer&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">ThatHave</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">NoPhoto</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksInProgress</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksWith</span><span class="p">(</span><span class="n">Priority</span><span class="p">.</span><span class="n">High</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, let&#8217;s look at the &#8216;beginning&#8217; of the fluent interface: the <code>Query()</code> extension method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">QueryExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueries</span> <span class="nf">Query</span><span class="p">(</span><span class="k">this</span> <span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">session</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If we&#39;re using XAF, do the same for ObjectSpace as well</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueries</span> <span class="nf">Query</span><span class="p">(</span><span class="k">this</span> <span class="n">IObjectSpace</span> <span class="n">objectSpace</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">xpObjectSpace</span> <span class="p">=</span> <span class="n">objectSpace</span> <span class="k">as</span> <span class="n">XPObjectSpace</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">session</span> <span class="p">=</span> <span class="n">xpObjectSpace</span><span class="p">.</span><span class="n">Session</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">session</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does the <code>Queries()</code> class look like?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IQueries</span> <span class="n">InTransaction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="n">Contacts</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// One for each queryable object type, e.g.,</span>
</span><span class='line'>    <span class="c1">// IDepartmentQueries Departments { get; }       </span>
</span><span class='line'>    <span class="c1">// ITaskQueries Tasks { get; }</span>
</span><span class='line'>    <span class="c1">// etc.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Queries</span> <span class="p">:</span> <span class="n">IQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_Session</span> <span class="p">=</span> <span class="n">session</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Session</span> <span class="n">_Session</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">bool</span> <span class="n">_InTransaction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IQueries</span> <span class="n">InTransaction</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_InTransaction</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IContactQueries</span> <span class="n">_Contacts</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="n">Contacts</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_Contacts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="n">_Contacts</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContactQueries</span><span class="p">(</span><span class="n">_Session</span><span class="p">,</span> <span class="n">_InTransaction</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_Contacts</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we ignore the <code>InTransaction</code> property, it is just a container for the <code>IContactQueries</code>. In your application, you would have a similar property for each queryable object type. A new <code>ContactQueries</code> instance is created on demand taking into account the whether the <code>InTransaction</code> property was visited earlier in the syntax.</p>

<p>Now, let&#8217;s look at the base classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IFluentInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Queries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Queries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_Session</span> <span class="p">=</span> <span class="n">session</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XPQuery</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">session</span><span class="p">,</span> <span class="n">inTransaction</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Session</span> <span class="n">_Session</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Query</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">GetEnumerator</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So <code>Queries&lt;T&gt;</code> wraps an <code>XPQuery&lt;T&gt;</code>.</p>

<p>Side note: the inclusion of <code>IFluentInterface</code> is a clever trick to improve Intellisense by hiding the <code>System.Object</code> members such as <code>ToString()</code>. See <a href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/">Daniel Cazzulino&#8217;s blog post</a>.</p>

<p>And now we can implement the <code>Contact</code> generic as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IContactQueries</span> <span class="p">:</span> <span class="n">IQueries</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="nf">ByDepartmentTitle</span><span class="p">(</span><span class="kt">string</span> <span class="n">departmentTitle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IContactQueries</span> <span class="nf">ByPosition</span><span class="p">(</span><span class="kt">string</span> <span class="n">position</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Contact</span> <span class="nf">ByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ContactQueries</span> <span class="p">:</span> <span class="n">Queries</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;,</span> <span class="n">IContactQueries</span><span class="p">,</span> <span class="n">IContactThatHaveQueries</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ContactQueries</span><span class="p">(</span><span class="n">Session</span> <span class="n">session</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">inTransaction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="nf">ByDepartmentTitle</span><span class="p">(</span><span class="kt">string</span> <span class="n">department</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="n">Query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Department</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="n">department</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IContactQueries</span> <span class="nf">ByPosition</span><span class="p">(</span><span class="kt">string</span> <span class="n">position</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Query</span> <span class="p">=</span> <span class="n">Query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Position</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="n">position</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Contact</span> <span class="nf">ByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Query</span><span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Email</span> <span class="p">==</span> <span class="n">email</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>There we go. Now we can use our fluent interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">contacts</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">Query</span><span class="p">().</span><span class="n">Contacts</span><span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Manager&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much more readable. Also more maintainable because all queries are in one place and make use of good old LINQ. It&#8217;s also easier to test the queries because they are independent of the calling code.</p>

<p>See <a href="https://github.com/ZeroSharp/Xaf_MainDemo_FluentQueries">a sample implementation</a> built against the DevExpress XAF MainDemo on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent queries with DevExpress XPO - Intro]]></title>
    <link href="http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro/"/>
    <updated>2013-08-12T17:54:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fluent-queries-with-devexpress-xpo-intro</id>
    <content type="html"><![CDATA[<p>There are <a href="http://documentation.devexpress.com/#xaf/CustomDocument3052">many ways to perform queries with XPO</a>.</p>

<p>You can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">BinaryOperator</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span> <span class="s">&quot;Elvis&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>or this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="n">CriteriaOperator</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;Name = &#39;Elvis&#39;&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way to use the <a href="http://documentation.devexpress.com/#XPO/CustomDocument2537">simplified criteria syntax</a>, and with the <a href="https://code.google.com/p/dxcorecommunityplugins/wiki/XPO_EasyFields">Xpo_EasyFields CodeRush plugin</a>. Then you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span><span class="n">Customer</span><span class="p">.</span><span class="n">Fields</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Elvis&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each of the above, you can optionally query within the transaction by passing in the <code>PersistentCriteriaEvaluationBehavior.InTransaction</code> parameter.</p>

<p>Or we can use LINQ via <code>XPQuery&lt;T&gt;.TransformExpression()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Session</span><span class="p">.</span><span class="n">FindObject</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;(</span>
</span><span class='line'>    <span class="n">XPQuery</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">&gt;.</span><span class="n">TransformExpression</span><span class="p">(</span><span class="n">Session</span><span class="p">,</span> <span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Elvis&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of these methods are powerful, but the power comes at a cost. The syntax is neither elegant nor particularly clear and as a result it is not very practical to maintain or test.</p>

<h2>A Fluent Interface for XPO</h2>

<p>How about if we could do the following?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">ByName</span><span class="p">(</span><span class="s">&quot;Elvis&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, for a more elaborate example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">Session</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">Query</span><span class="p">()</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">InTransaction</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Contacts</span>
</span><span class='line'>                      <span class="p">.</span><span class="n">ByPosition</span><span class="p">(</span><span class="s">&quot;Developer&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">ThatHave</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">NoPhoto</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksInProgress</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">And</span>
</span><span class='line'>                          <span class="p">.</span><span class="n">TasksWith</span><span class="p">(</span><span class="n">Priority</span><span class="p">.</span><span class="n">High</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the next post I&#8217;ll show how to put the fluent interface code together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing the RSS subscription icon from Octopress]]></title>
    <link href="http://ZeroSharp.github.com/removing-the-rss-subscription-icon-from-octopress/"/>
    <updated>2013-07-09T09:13:00+01:00</updated>
    <id>http://ZeroSharp.github.com/removing-the-rss-subscription-icon-from-octopress</id>
    <content type="html"><![CDATA[<p>A <a href="https://twitter.com/tlaynes">fellow Octopress blogger</a> recently asked how I removed the RSS subscription icon from the Octopress navigation bar.</p>

<p>First, create a new site variable <code>show_feeds</code> by adding a line to the <em>_config.yml</em> file which is in the root folder of the Octopress source.</p>

<figure class='code'><figcaption><span>_config.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>  # RSS / Email (optional) subscription links (change if using something like Feedburner)
</span><span class='line'><span class="gi">+ show_feeds: false</span>
</span><span class='line'>  subscribe_rss: http://feeds.feedburner.com/zerosharp
</span><span class='line'>  subscribe_email:
</span><span class='line'>  # RSS feeds can list your email address if you like
</span><span class='line'>  email:
</span></code></pre></td></tr></table></div></figure>


<p>Then modify the <em>source/_includes/navigation.html</em> as follows</p>

<figure class='code'><figcaption><span>navigation.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ {% if site.show_feeds %}</span>
</span><span class='line'>  &lt;ul class=&quot;subscription&quot; data-subscription=&quot;rss&quot;&gt;
</span><span class='line'>    &lt;li&gt;&lt;a href=&quot;http://feeds.feedburner.com/zerosharp&quot; rel=&quot;subscribe-rss&quot; title=&quot;subscribe via RSS&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>    {% if site.subscribe_email %}
</span><span class='line'>      &lt;li&gt;&lt;a href=&quot;&quot; rel=&quot;subscribe-email&quot; title=&quot;subscribe via email&quot;&gt;Email&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>    {% endif %}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'><span class="gi">+ {% endif %}</span>
</span><span class='line'>  {% if site.simple_search %}
</span><span class='line'>  &lt;form action=&quot;http://google.com/search&quot; method=&quot;get&quot;&gt;
</span><span class='line'>    &lt;fieldset role=&quot;search&quot;&gt;
</span><span class='line'>      &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:ZeroSharp.github.com&quot; /&gt;
</span><span class='line'>      &lt;input class=&quot;search&quot; type=&quot;text&quot; name=&quot;q&quot; results=&quot;0&quot; placeholder=&quot;Search&quot;/&gt;
</span><span class='line'>    &lt;/fieldset&gt;
</span><span class='line'>  &lt;/form&gt;
</span><span class='line'>  {% endif %}
</span><span class='line'>  {% include custom/navigation.html %}
</span></code></pre></td></tr></table></div></figure>


<p>Then you can toggle the visibility of the feed icon by changing the <code>show_feeds</code> setting in the <code>_config.yml</code> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 2]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2/"/>
    <updated>2013-05-28T11:51:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-2</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily.'>
Good news. The conversion is now two-way. Get the source code <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">from GitHub</a>. Make sure you have built MainDemo.Reports project.</p>

<p>You will find there are now two T4 transforms in the project. <em>RepxToCSharp.tt</em> is covered in the <a href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1">Part 1</a>. It searches for any <em>.repx</em> files in the solution and converts the scripts into compilable C#.</p>

<p>The second transform is new. <em>CSharpToRepx.tt</em> copies any changes to the script part back into the original <em>.repx</em> files. Again, there are performance optimisations via checksums to prevent overwriting unchanged files.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)
</span><span class='line'>
</span><span class='line'>Summary of C# transformation
</span><span class='line'>============================
</span><span class='line'>Total C# files found                                        :  2
</span><span class='line'>  Total reports injected                                    :  1
</span><span class='line'>  Total reports missing                                     :  0
</span><span class='line'>  Total reports skipped because unchanged                   :  1
</span><span class='line'>
</span><span class='line'>Time elapsed: 00:00:02.3483264
</span></code></pre></td></tr></table></div></figure>


<p>Repx files with embedded scripts are now much more maintainable. You can correct syntax errors, refactor, version control, merge versions easily. You could even write unit tests against the code in the scripts.</p>

<p></span></p>

<p>Currently the easiest way of running these scripts is to open them and save them with <code>Ctrl+S</code>. This is because T4 templates were originally designed as a Visual Studio tool.</p>

<p>In the future I&#8217;m hoping to improve the integration further. There are ways of including the transformations into the build instead, most of which are covered in <a href="http://www.olegsych.com/2010/04/understanding-t4-msbuild-integration">a blog post by Mr T4, Oleg Sych</a>. I like the idea of it being a NuGet package that can be easily added to any XAF project, but there&#8217;s a but I&#8217;ll need some more time to work out how best to achieve this.</p>

<h2>Basic usage summary</h2>

<p>Until then, here are some basic usage instructions.</p>

<ul>
<li>Add the T4 Toolbox extension to Visual Studio</li>
<li>Add a copy of the MainDemo.Reports project to your own solution</li>
<li>Make sure you build it before running the transforms</li>
<li>Open <em>RepxToCSharp.tt</em> in Visual Studio.</li>
<li>Save it with <code>Ctrl+S</code> to run the transform. It will search all the folders in your Solution for <em>.repx</em> files and add corresponding C# classes.</li>
<li>Make any changes you like to the script section (anything outside of <code>// -- Start of embedded scripts --</code> and <code>// -- End of embedded scripts --</code>) will be ignored.</li>
<li>Open <em>CSharpToRepx.tt</em> and run it with <code>Ctrl+S</code>. The changes will be saved back to the corresponding <em>.repx</em>.</li>
</ul>


<h2>Even more power?</h2>

<p>You may notice that if you reload the MainDemo.Reports project, you can now see <code>View in Designer</code> in the context menu when you right-click on the <em>.repx.cs</em> file.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-003.png"></p>

<p>Let&#8217;s click it and see what happens. It opens directly in Visual Studio (like an <code>XtraReport</code>).</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-004.png"></p>

<p>Now, this is all highly experimental. You can see there are some warnings&#8230; Also, there is no connection with XPO, so the <em>Preview</em> is always empty.</p>

<p>That said, it doesn&#8217;t seem like too much of a stretch to eventually allow far more Visual Studio integration for XAF reports&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making XAF reports even better - Part 1]]></title>
    <link href="http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1/"/>
    <updated>2013-05-21T14:38:00+01:00</updated>
    <id>http://ZeroSharp.github.com/making-xaf-reports-even-better-part-1</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='The aim of these posts is to provide a two-way conversion process between .repx and C# files.'>
The ability to create reports using a report writer is a very powerful feature of <a href="http://www.devexpress.com/Products/NET/Application_Framework/">DevExpress XAF</a>, but there are some limitations which are particularly cumbersome to deal with in complex project.</p>

<p>One of the projects I work on has over 100 reports in it. Even though we make use of unit tests to ensure they are not broken, the maintenance of the code in the embedded scripts is particularly difficult to manage.</p>

<ul>
<li>XafReports are <em>.repx</em> files which are usually loaded into the report table during the database update routine. They are a subclass of XtraReports which with some added restrictions.</li>
<li>Any scripts are stored as a string or serialized to a <em>resources</em> property.</li>
<li>The report writer is available only in the Windows Forms application. This must be used whenever a change is made to a report. The modified report must be exported as a repx file and then added to the module as an embedded report. The procedure is <a href="http://documentation.devexpress.com/#Xaf/CustomDocument2786">described here</a>.</li>
</ul>


<p>These aspects of XAF reports give rise to several development headaches.</p>

<ul>
<li>While script syntax can be checked within the report writer at design time (via the Validate button in the scripts tab), the script code is still brittle.</li>
<li>Errors that result from Script syntax are sometimes only discovered at run time (you can write a unit test to check during build, but we really want to the compiler to tell us).</li>
<li>Refactoring any classes requires a considerable amount of work with the report writer in order to apply any changes to the code within the scripts.</li>
<li>There is no Intellisense in the report writer.</li>
<li>Version control diff comparisons and merging are impossible.</li>
</ul>


<p>The aim of these posts is to provide a two-way conversion process between .repx and C# files. In order to accomplish this we&#8217;ll be relying on Visual Studio&#8217;s excellent T4 templating engine.
</span></p>

<h2>Installing T4Toolbox</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 Text Transformation Toolkit</a> is a template based code generation framework which is included with Visual Studio. On top of this <a href="http://www.olegsych.com/">Oleg Sych</a> provides a Visual Studio extension called <a href="http://visualstudiogallery.msdn.microsoft.com/7f9bd62f-2505-4aa4-9378-ee7830371684">T4 Toolbox</a> which adds some additional features.</p>

<p>Install T4 Toolbox by selecting <strong>Tools/Extensions and Updates</strong> from Visual Studio and searching for it.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-001.png"></p>

<h2>The ReportSync MainDemo</h2>

<p>Next, download the modified MainDemo application from my <a href="https://github.com/ZeroSharp/Xaf_MainDemo_ReportSync">GitHub repository</a> and open it in Visual Studio.</p>

<p>First lets look at the embedded reports which I have modified slightly so that they include scripts. I added these scripts via the MainDemo.Win application.</p>

<p>Let&#8217;s look at the <em>ContactsGroupByPosition.repx</em> file. You will find that there is a section:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="s">&quot;\r\nprivate void xrLabel4_BeforePrint(object sender, System.Drawing.Printing.PrintE&quot;</span> <span class="p">+</span>
</span><span class='line'>    <span class="s">&quot;ventArgs e) {\r\n\txrLabel4.Text = xrLabel4.Text + \&quot; Test!\&quot;;\r\n}\r\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the script has been saved as a string. The other report, which has only slightly more complex script code looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">System</span><span class="p">.</span><span class="n">Resources</span><span class="p">.</span><span class="n">ResourceManager</span> <span class="n">resources</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_resources</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">string</span> <span class="n">resourceString</span> <span class="p">=</span> <span class="s">@&quot;zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPT.....5kIFtEdWVEYXRlXSA8PSAnQEN1cnJlbnREYXRlJwABEFRhc2tzU3RhdGVSZXBvcnQ=&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_resources</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DevExpress</span><span class="p">.</span><span class="n">XtraReports</span><span class="p">.</span><span class="n">Serialization</span><span class="p">.</span><span class="n">XRResourceManager</span><span class="p">(</span><span class="n">resourceString</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">_resources</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">ScriptsSource</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="s">&quot;$this.ScriptsSource&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the scripts are not even in plain text. They have been serialised to the <em>resources</em> property.</p>

<h2>The MainDemo.Reports assembly</h2>

<p>You will find a new assembly <strong>MainDemo.Reports</strong> which contains a T4 template <em>RepxToCSharp.tt</em>. This is a T4 template which will search for repx files and transform them into much more helpful plain C#.</p>

<p>The template will run every time it is saved. Currently, it depends on code within the MainDemo.Reports assembly, so make sure you have compiled it in Debug mode. Then open the <em>RepxToCSharp.tt</em> and press <code>Ctrl+S</code> to save (and run the T4 transformation).</p>

<h2>The output</h2>

<p>The template will generate two types of output. First, it generates the following report which you should find in <em>RepxToCSharp.txt</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(This is an automatically generated file which should be excluded from version control)
</span><span class='line'>
</span><span class='line'>Summary of repx transformation
</span><span class='line'>==============================
</span><span class='line'>Total repx files found                                      :  2
</span><span class='line'>  Total reports generated                                   :  2
</span><span class='line'>  Total reports skipped because unchanged                   :  0
</span><span class='line'>
</span><span class='line'>Time elapsed: 00:00:02.1762029
</span></code></pre></td></tr></table></div></figure>


<p>In addition, each repx will have been transformed into two correpsonding files. All the generated files are highlighted in yellow:</p>

<p><img src="http://ZeroSharp.github.com/images/blog/xaf-report-sync-002.png"></p>

<p>Now the scripts have been deserialized from the repx and put in a partial class and the remainder of the repx has been transformed into a corresponding <code>XafReport</code> descendant. See for instance, <em>ContactsGroupedByPosition.cs</em> (which stored its scripts as a string) is as follows:</p>

<figure class='code'><figcaption><span>ContactsGroupedByPosition.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_ContactsGroupedByPosition</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel4_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">xrLabel4</span><span class="p">.</span><span class="n">Text</span> <span class="p">+</span> <span class="s">&quot; Test!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <em>TasksStateReport.cs</em> is now like this</p>

<figure class='code'><figcaption><span>TasksStateReport.cs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">_TasksStateReport</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// -- Start of embedded scripts -- </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel1_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// This is a test</span>
</span><span class='line'>        <span class="n">xrLabel1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">xrLabel2_BeforePrint</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Printing</span><span class="p">.</span><span class="n">PrintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">xrLabel2</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">GetLabel2Text</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetLabel2Text</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Label 2!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// -- End of embedded scripts --    </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A note about performance</h2>

<p>The process of transforming the repx into C# is quite quick (a couple of seconds per <em>repx</em>), but when you have dozens of reports, it can quickly be tiresome. Therefore, there is a performance optimisation which checksums the repx and skips the transformation if it has not changed.</p>

<p>(In a future version, we will also use a similar checksum in the other direction to determine whether the scripts have been modified).</p>

<h2>Already much better</h2>

<p>Now we have much more useful source files. Versions can be compared easily. The compiler will immediately inform us of any problems with the scripts within our reports.</p>

<p>This is work in progress. Next up, I will be adding the &#8216;reverse&#8217;. That is, a new transformation template which looks for scripts which have changed and &#8216;injects&#8217; them back into the original <em>repx</em> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing an unmanaged code AppCrash]]></title>
    <link href="http://ZeroSharp.github.com/fixing-an-unmanaged-code-appcrash/"/>
    <updated>2013-04-29T16:21:00+01:00</updated>
    <id>http://ZeroSharp.github.com/fixing-an-unmanaged-code-appcrash</id>
    <content type="html"><![CDATA[<p>This post is the result of a recent bug hunt in which I came across a tricky bug, found a debugging switch I&#8217;d completely forgotten existed and learned a little about calling <code>extern</code> string functions from C#.</p>

<p>I love bug hunting. It&#8217;s like a murder mystery: you&#8217;ve got your suspects and you try to eliminate them one at a time until, as a famous bug hunter said:</p>

<blockquote><p>&#8230; when you have eliminated the impossible, whatever remains, however improbable, must be the truth.</p><footer><strong>Sherlock Holmes</strong> <cite>The Sign of Four</cite></footer></blockquote>


<p>Between about 1995 and 2006, I used a data library called Apollo almost every day. It was a bunch of C++ drivers for dBase files with some more advanced options for encryption and indexing and was a popular option for <a href="http://en.wikipedia.org/wiki/Clipper_(programming_language">Clipper</a>) programmers. I joined a software project which was based on Clipper and Apollo in 1995. Apollo went through many different incarnations SuccessWare, Luxent, Vista, ApolloDB. All of these companies were essentially providing wrappers for different languages (Delphi, .NET) but the core C++ drivers always remained more or less the same <a href="http://www.apollodb.com/products.asp">and it&#8217;s still going</a>.</p>

<p>Fast forward to 2013 and we have a legacy console utility for migrating data from the old format, which traverses the Apollo tables and converts the data to our model (DevExpress XPO objects). This code hardly ever changes, but when I converted all our core libraries to .NET 4.5., I found I had to jump in and fix it one last time.</p>

<p>When I tried to run the upgraded .NET 4.5 library I got a mysterious app crash.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/appcrash/app-crash-001.png"></p>

<p>The application would then close without any error message or stack trace. Nothing I did was allowing me catch any exception. None of the signatures, e.g., the <code>c0000374</code> exception code show up on Google. It shows up in the Windows event log, but apparently EventID 1000 is a very generic error message.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/appcrash/app-crash-002.png"></p>

<p>I had a suspicion the problem was something to do with the Apollo assembly and I also knew that Apollo was not all managed code. I stumbled over the <em>Enable native code debugging</em> in the project settings. I&#8217;ve never used this setting. (My next approach would have been to use tracing to try to pinpoint the location of the crash.)</p>

<p><img src="http://ZeroSharp.github.com/images/blog/appcrash/app-crash-003.png"></p>

<p>Visual Studio really impresses with its debugging capabilities. When we run again, we get a stack trace and an error message.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/appcrash/app-crash-004.png"></p>

<p>Well Google didn&#8217;t seem to have much to say about <em>&#8216;This may be due to a corruption of the heap&#8217;</em>. But the problem seems to do with <code>apolloTable.FieldName(i)</code>. With a decompiler I had a look at its definition.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">FieldName</span><span class="p">(</span><span class="kt">short</span> <span class="n">fieldNum</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ApolloAPI</span><span class="p">.</span><span class="n">sx_FieldName</span><span class="p">(</span><span class="n">fieldNum</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s find <code>ApolloAPI.sx_FieldName(fieldNum);</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DllImport(&quot;SDE7.dll&quot;, CharSet=CharSet.Ansi, ExactSpelling=true)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">string</span> <span class="nf">sx_FieldName</span><span class="p">(</span><span class="kt">short</span> <span class="n">uiFieldNum</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, knowing that SDE7.dll is written in C++, I guessed it might be having trouble with the return value being a <code>string</code>. The C++ memory management of the returned string might be getting in the way. <a href="http://stackoverflow.com/a/8242828/1077279">A bit of StackOverflow</a> gave me this trick: declare the return type as <code>IntPtr</code> and use <code>Marshal.PtrToStringAnsi()</code> to get a C# <code>string</code> from the pointer. (It seems that .NET 4.5 is stricter about marshalling than earlier frameworks. Perhaps someone can enlighten me why the error did not occur with .NET 4.0?) I wrote a new extension method for <code>ApolloTable</code> and changed the code to use <code>apolloTable.SafeFieldName(i)</code> instead.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">TApolloTableExtensions</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">        [DllImport(&quot;SDE7.dll&quot;, CharSet = CharSet.Ansi, ExactSpelling = true)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">sx_FieldName</span><span class="p">(</span><span class="kt">short</span> <span class="n">uiFieldNum</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">SafeFieldName</span><span class="p">(</span><span class="k">this</span> <span class="n">ApolloTable</span> <span class="n">apolloTable</span><span class="p">,</span> <span class="kt">short</span> <span class="n">fieldNum</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="c1">//...</span>
</span><span class='line'>            <span class="n">IntPtr</span> <span class="n">strPtr</span> <span class="p">=</span> <span class="n">sx_FieldName</span><span class="p">(</span><span class="n">fieldNum</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">PtrToStringAnsi</span><span class="p">(</span><span class="n">strPtr</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And bingo! The application now runs without error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Bonus - Simultaneous EasyTests]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/"/>
    <updated>2013-04-22T16:31:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests</id>
    <content type="html"><![CDATA[<p>In <a href="http://ZeroSharp.github.com/load-testing-xaf-overview">my recent series on load testing XAF</a>, I used a Selenium javascript test to run the client browser instances. This is a good and cheap method of validating the performance of XAF applications under production load.</p>

<p>However, if the load tests fail because of a concurrency bug or a performance bottleneck, it can still be difficult to analyse and solve. For this, we need to be able to simulate load locally against the development environment.</p>

<p>In this post I will demonstrate how to run multiple simultaneous XAF EasyTests against a local server. As a load test, it is not very scientific, but it can be extremely useful as a debugging tool.</p>

<h2>The EasyTest script</h2>

<p>First, we will create a new EasyTest which will cycle through the existing navigation tabs. Open the XAF MainDemo and create a new EasyTest as follows.</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.ets  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#Application MainDemoWeb
</span><span class='line'>
</span><span class='line'>*FillForm
</span><span class='line'> User Name = Sam
</span><span class='line'> Password =
</span><span class='line'>*Action Log On
</span><span class='line'>
</span><span class='line'>*Action Navigation(Contact)
</span><span class='line'>*Action Navigation(Task)
</span><span class='line'>*Action Navigation(Department)
</span><span class='line'>*Action Navigation(Scheduler Event)
</span><span class='line'>*Action Navigation(My Details)
</span><span class='line'>*Action Navigation(Note)
</span><span class='line'>*Action Navigation(Payment)
</span><span class='line'>*Action Navigation(Position)
</span><span class='line'>*Action Navigation(Resume)
</span><span class='line'>*Action Navigation(Role)
</span><span class='line'>*Action Navigation(User)
</span><span class='line'>*Action Navigation(Reports.Analysis)
</span><span class='line'>*Action Navigation(Reports.Reports)
</span><span class='line'>*Action Log Off
</span></code></pre></td></tr></table></div></figure>


<p>(This test replicates the Selenium test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a> of my previous series on load testing with NeuStar and Amazon.) It is important to note that we are only testing the web application and that we do not include a <code>#DropDB</code> directive.</p>

<p>First, ensure that you can run this test with the default settings.</p>

<h2>The config file</h2>

<p>Now modify the config.xml file as follows:</p>

<figure class='code'><figcaption><span>Config.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;Options</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">TestRunTimeLimit=</span><span class="s">&quot;5&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Applications&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Web --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Application</span>
</span><span class='line'>      <span class="na">Name=</span><span class="s">&quot;MainDemoWeb&quot;</span>
</span><span class='line'>      <span class="na">Url=</span><span class="s">&quot;http://localhost:4030&quot;</span>
</span><span class='line'>      <span class="na">SingleWebDev=</span><span class="s">&quot;True&quot;</span>
</span><span class='line'>      <span class="na">WebBrowserType=</span><span class="s">&quot;Standalone&quot;</span>
</span><span class='line'>      <span class="na">PhysicalPath=</span><span class="s">&quot;[ConfigPath]\..\MainDemo.Web&quot;</span>
</span><span class='line'>      <span class="na">AdapterAssemblyName=</span><span class="s">&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- For IIS --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;Application</span>
</span><span class='line'><span class="c">      Name=&quot;MainDemoWeb&quot;</span>
</span><span class='line'><span class="c">      Url=&quot;http://localhost/MainDemo.Web/Default.aspx&quot;</span>
</span><span class='line'><span class="c">      PhysicalPath=&quot;&quot;</span>
</span><span class='line'><span class="c">      DontRestartIIS=&quot;True&quot;</span>
</span><span class='line'><span class="c">      DontRunWebDev=&quot;True&quot;</span>
</span><span class='line'><span class="c">      WebBrowserType=&quot;Standalone&quot;      </span>
</span><span class='line'><span class="c">      AdapterAssemblyName=&quot;DevExpress.ExpressApp.EasyTest.WebAdapter.v12.2, Version=12.2.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a&quot;/--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Applications&gt;</span>
</span><span class='line'><span class="nt">&lt;/Options&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few important things to note.</p>

<p>I have not shown the <em>Win</em> section here since we are not using it. Also, I am using XAF 12.2.8. You may need to change the version number in the <code>AdapterAssemblyName</code> attribute. I have increased the <code>TestRunTimeLimit</code> attribute from 3 to 5. Everything goes a little slower when there are multiple browsers and we need to make sure the test does not time out.</p>

<p>With the above config, the EasyTest will no longer run from within Visual Studio.</p>

<p>You can choose to run the simultaneous tests against the debug web server or IIS. Uncomment the relevant section. The interesting settings are:</p>

<ul>
<li><code>SingleWebDev="True"</code> which instructs the EasyTest runner to run all tests against the same instance of the development webserver. Without this, the webserver would be stopped and started for each test.</li>
<li><code>WebBrowserType="Standalone"</code> which causes each launched browser to be launched with its own session. (There are a few mentions of this setting in the support center, but it is not very well documented).</li>
<li><code>DontRestartIIS</code> and <code>DontRunWebDev</code> which are self-explanatory</li>
</ul>


<h2>The launch command</h2>

<p>Next, create the following batch file in the MainDemo.EasyTests subdirectory. ##</p>

<figure class='code'><figcaption><span>Launch.bat  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">:: Requires the Debug webserver to be running on port 49660</span>
</span><span class='line'><span class="c">:: Requires EasyTests to be enabled</span>
</span><span class='line'><span class="c">:: Requires NetDA to be running</span>
</span><span class='line'><span class="c">:: Requires admin rights</span>
</span><span class='line'><span class="c">:: Must be run from a command prompt</span>
</span><span class='line'><span class="c">::</span>
</span><span class='line'><span class="c">:: Usage: &gt; launch &lt;numberOfBrowsers&gt;</span>
</span><span class='line'><span class="c">:: e.g. : &gt; launch 21</span>
</span><span class='line'><span class="c">:: will launch 21 simultaneous browsers at 3 second intervals</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:DELETE_OUTPUT</span>
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.jpeg <span class="k">del</span> *.jpeg
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> *.html <span class="k">del</span> *.html
</span><span class='line'><span class="k">if</span> <span class="k">exist</span> TestsLog.xml <span class="k">del</span> TestsLog.xml
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_ADMIN</span>
</span><span class='line'>net session <span class="p">&gt;</span><span class="n">nul</span> <span class="m">2</span>&gt;&amp;<span class="m">1</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%ERRORLEVEL%</span> <span class="o">equ</span> <span class="m">0</span> <span class="k">goto</span> <span class="nl">CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative command window
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_CONSOLE</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%CMDCMDLINE%</span> <span class="p">|</span> <span class="n">find</span> <span class="n">/i</span> <span class="s2">&quot;/c&quot;</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">if</span> <span class="k">ERRORLEVEL</span> <span class="m">1</span> <span class="k">goto</span> <span class="nl">CHECK_PARAMS</span>
</span><span class='line'><span class="k">echo</span> Must be run from an administrative console (not Windows Explorer)
</span><span class='line'><span class="k">goto</span> <span class="nl">ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:CHECK_PARAMS</span>
</span><span class='line'><span class="k">IF</span> [<span class="nv">%1</span>]<span class="o">==</span>[] <span class="k">GOTO</span> <span class="nl">USAGE</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LAUNCH</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:LOOP</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%i%</span><span class="o">==</span><span class="nv">%1</span> <span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> i<span class="o">=</span><span class="nv">%i%</span>+<span class="m">1</span>
</span><span class='line'>start <span class="s2">&quot;x&quot;</span> <span class="s2">&quot;C:\Program Files (x86)\DevExpress\DXperience 12.2\Tools\eXpressAppFramework\EasyTest\TestExecutor.v12.2.exe&quot;</span> MainDemo_CycleThroughTabs.ets
</span><span class='line'><span class="c">:: Wait 3 seconds</span>
</span><span class='line'>ping <span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span>.<span class="m">1</span> -n <span class="m">1</span> -w <span class="m">3000</span> <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">goto</span> <span class="nl">LOOP</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:USAGE</span>
</span><span class='line'><span class="k">echo</span> Usage: <span class="nv">%0</span> numberOfBrowsers
</span><span class='line'><span class="k">echo</span> numberOfBrowsers must be an integer
</span><span class='line'><span class="k">goto</span> <span class="nl">OK</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:ERROR</span>
</span><span class='line'>
</span><span class='line'><span class="nl">:OK</span>
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to run your tests against the development webserver, you will need to make sure it is running before launching the batch file. The easiest way to do this is to run the application from within Visual Studio and then close the browser. You should still see the development webserver running in the task bar notification area. Against IIS, it is enough to ensure it is started.</p>

<p>Now, open an administrative command prompt. Note that you must run from an administrative console: it is not sufficient to &#8216;run as administrator&#8217; from Windows Explorer. Navigate to the EasyTest subdirectory where the Launch.bat file is located and launch a single test with the following command:</p>

<pre><code>launch.bat 1
</code></pre>

<p>You should see the test run without error. If this works, you can then launch 20 simultaneous test runs with 3 second intervals by running:</p>

<pre><code>launch.bat 20
</code></pre>

<h2>Conclusion</h2>

<p>As a load test, you do not get much useful information. Even if we managed to extract accurate data for client response times and throughput, the overhead of running the multiple browsers would skew the results too much. However, this approach is extremely useful for isolating concurrency and performance problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 5 - Analysis]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/"/>
    <updated>2013-04-14T07:37:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis</id>
    <content type="html"><![CDATA[<p>This is the final post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4: Launching the load test</a></li>
</ul>


<p>In this part, we analyse the results of the load test we ran in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 4</a>.</p>

<h2>Results</h2>

<p>The results of the test we ran are <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">here</a>. The graphs are interactive and give quite interesting data about the load tests. Feel free to have a look and play around with the results.</p>

<h2>The Performance Graphs</h2>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-006.png"></p>

<p>The above graph shows the basic information about the test. We can see there were 649 transactions (the Selenium script was run 649 times) and there were 17 errors.</p>

<p>You can see that the test managed to follow the planned scenario (the actual number of users follows the yellow line). You can also see information about the throughput in bytes during the test.</p>

<h2>The Script Performance Graphs</h2>

<p>Here we see information pertaining to the script we chose to run. Had we run multiple different scripts, we would be able to isolate each one.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-009.png"></p>

<p>It is clear that the transaction time rises quite slowly with the load until about 12:17 when there is a jump. More on that later.</p>

<p>First, I have removed the plot of the total transaction time, so that we can see more detail from the remaining steps. Two things seem to be clear: the response time for each individual step does not seem to be much affected by the load, but the login step rises gradually.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-010.png"></p>

<p>Now back to the spike at 12:17, if you look at the transaction data more closely (not shown here but available on the <a href="https://load.wpm.neustar.biz/load/test/share/e0f547d711624168bc7fa0a69ddd8283">NeuStar results page</a>, it looks like several transactions finished at the same time and that the jump coincides with several simultaneous logins.</p>

<p>So again, it seems that login is the &#8216;weakest link&#8217;, i.e., the most resource intensive step and the one that suffers the most under load.</p>

<h2>The Errors</h2>

<p>Lets look more closely at the errors.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-007.png"></p>

<p>The first type of error we can see from the screen-shot occurred at the login page. This error happened 6 times and was very similar to another error which occurred once. In fact, all 6 of these errors happened at the very end of the test. As such, they can be ignored, because it is likely that the load test was scaling down and interrupting sessions at this point.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-008.png"></p>

<p>One of the very nice features of NeuStar&#8217;s load testing solution is that you not only get a screenshot, but also a video which shows you exactly what the user experienced when an error occurs. By clicking on the second error, it looks like there may be a problem  when the system is under load. There were 6 errors and it is clear in the video that the errors occur when attempting to navigate away from the <em>Scheduler Event</em> view to the <em>My Details</em> view. The screen-shot gives us some useful information. DevExpress? Any ideas?</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-011.jpg"></p>

<p>There are a couple of other errors, but I think these are most likely a result of problems with the Selenium script rather than XAF. The AJAX update panels make it quite hard to detect when the page is fully ready and although we try to accommodate this with <code>selenium.waitForCondition()</code> my feeling is that the <code>click()</code> occurred before everything was properly wired up.</p>

<h2>Further tests</h2>

<p>This series has covered the process of load testing XAF applications in its entirety, but in some ways, it feels like only the beginning. There are many other configurations and tests which would be interesting.</p>

<p>For instance</p>

<ul>
<li>Reduce think time which is currently set to 3 seconds per step</li>
<li>Use a smaller/larger EC2 instance</li>
<li>Increase the number of virtual users</li>
<li>Try load balancing with sticky sessions</li>
<li>Experiment with/without compression (IIS or via the <code>web.config</code>)</li>
<li>Experiment with/without caching (both at the http level, and via the <a href="http://documentation.devexpress.com/#XPO/CustomDocument9892">cached data store</a></li>
</ul>


<p>There are also many ways of improving XAF performance that are not in the MainDemo. These include:</p>

<ul>
<li><a href="http://documentation.devexpress.com/#wpf/CustomDocument6279">Server mode</a> in all grids</li>
<li><a href="http://community.devexpress.com/blogs/xpo/archive/2006/03/27/session-management-and-caching.aspx">XPO Caching</a></li>
<li>Where possible, move any heavy operations to a separate asynchronous web service call</li>
</ul>


<p>We have implemented all of these in our production application.</p>

<h2>A note about concurrency</h2>

<p>In our experience, people tend to over estimate the number of concurrent users for their application. Our application has probably upwards of 5000 users defined, but we know from our logs that there have never been more than 80 simultaneously logged in. Also, even with 80 concurrent users, they have a much longer &#8216;think time&#8217; than 3 seconds on average.</p>

<p>For the production environment, we run at least one 25 user test for every major release and ensure the performance is at least as good as the previous release. We have occasionally run tests with up to 200 simultaneous users. The response time goes down to unacceptable levels (~30 seconds), but the application behaves. In production, the system is load balanced (with sticky sessions) and we know from previous experience that this is sufficient for our application.</p>

<h2>Conclusion</h2>

<p>This concludes my series on load testing. We&#8217;ve managed to get some very useful information with some very low-cost tools. The largest part of effort is the writing of the Selenium script which is certainly tricky. In the future I&#8217;d really like to harness the DevExpress EasyTests to replace the script but I haven&#8217;t yet found a way of doing this. Feel free to use my Selenium script as a starting point for testing your own XAF applications, and let us know of any interesting results!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 4 - Launching the load test]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/"/>
    <updated>2013-04-08T11:19:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3: Uploading and validating a script</a></li>
</ul>


<p>In this part, we will launch a 1 hour test with 25 virtual users using the <a href="http://home.wpm.neustar.biz/">NeuStar Web Performance Management</a> module.</p>

<h2>Schedule and launch a test</h2>

<p>From the script validation screen, click on <em>Schedule a load test with this script</em>. The defaults are good, but you can specify in detail how to run your load test. For instance, you can coordinate multiple Selenium scripts to simulate different types of activity on your site.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-005.png"></p>

<p>Notice that the load test cost for 25 users for an hour will be only $3.75.</p>

<p>When you click <code>Launch</code>, Neustar takes 7 or 8 minutes to provision the Amazon machines and stage the test, after which you will get realtime detail information about response times, bandwidth and errors.</p>

<p>In the next post we&#8217;ll analyse the results of this test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 3 - Uploading and Validating the Virtual User Script]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/"/>
    <updated>2013-04-03T16:39:00+01:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script</id>
    <content type="html"><![CDATA[<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2: Selenium</a></li>
</ul>


<p>In this part, we will load test the application we set up in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, using the Selenium load test we created in <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>.</p>

<h2>Neustar Web Performance Management</h2>

<p>NeuStar (formerly BrowserMob) are a company specialised in web application performance monitoring. We are interested in their <a href="https://home.wpm.neustar.biz/">web performance module</a>. It is free to create an account. To run a test with less than 25 virtual users costs only $0.15 per virtual user. Tests with more than 25 users (up to 5000) require an additional paid plan.</p>

<h2>Create a script</h2>

<p>In order to run a load test, we first need to create the script and validate it. Go to the <a href="https://script.wpm.neustar.biz/">scripting</a> page and select &#8216;Create a new script&#8217;. Then cut and paste the <a href="https://gist.github.com/shamp00/5302223">Selenium code for <code>MainDemo_CycleThroughTabs.js</code></a> from the <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">previous post</a>.</p>

<p>Now change the <code>targetHost</code> variable near the top of the file to point to the location of your MainDemo installation. You can then validate the script. This will actually run through the Selenium test on a newly provisioned Amazon instance to ensure that it passes.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-004.png"></p>

<p>If you get a green icon, you can proceed with setting up a load test, otherwise you can see what went wrong in a video of the user session.</p>

<p>In the next post we will configure and launch the load test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 2 - Selenium]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/"/>
    <updated>2013-03-28T16:56:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium</id>
    <content type="html"><![CDATA[<h1>Writing a Selenium User Test against MainDemo</h1>

<p>This is another post in a series about load testing XAF applications.  Previously in the series:</p>

<ul>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">Load Testing XAF: Overview</a></li>
<li><a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1: Deploying the target webserver</a></li>
</ul>


<h2>Why not use DevExpress EasyTests?</h2>

<p>The DevExpress recommended method of writing functional tests is to use the EasyTest functionality of the expressAppFramework. This has several advantages over other functional testing approaches.</p>

<ul>
<li>It uses a domain specific language tailored for XAF making it easy to test views and actions</li>
<li>It makes it easy to interact with the DevExpress controls that are used within XAF</li>
<li>A single EasyTest can be run against both the ASP.NET and WinForms applications</li>
<li>EasyTests work against both the debug webserver and IIS</li>
</ul>


<p>However, one feature which is not (yet) available is the ability to use EasyTests for load testing.</p>

<p><strong>UPDATE</strong>: See my <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests">more recent post</a> on how run multiple simultaneous EasyTests.</p>

<h2>Modifications to the MainDemo</h2>

<p>The sample script I have written assumes the MainDemo is running with <em>Horizontal Navigation</em> rather than vertical. You can modify the script to add support for vertical navigation or you can change Global.asax.cs Application_Start as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>protected void Application_Start(object sender, EventArgs e)
</span><span class='line'>{
</span><span class='line'>    RenderHelper.RenderMode = DevExpress.Web.ASPxClasses.ControlRenderMode.Lightweight;
</span><span class='line'>    ASPxWebControl.CallbackError += new EventHandler(Application_Error);
</span><span class='line'>
</span><span class='line'><span class="gi">+    // Add the following line to default to horizontal layout</span>
</span><span class='line'><span class="gi">+    WebWindowTemplateHttpHandler.PreferredApplicationWindowTemplateType = DevExpress.ExpressApp.Web.Templates.TemplateType.Horizontal;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>The Selenium script</h2>

<p>Selenium is a powerful tool for automating browsers. It supports all of the major browsers and a Selenium test can be written in many different programming languages (C#, Java, Javascript, HTML, <em>etc.</em>) The load testing tool (which we will come to in part 3 of this series) uses Selenium scripts written in Javascript.</p>

<p>We will now create and verify a simple Selenium test. The test will open the browser, login to the MainDemo and cycle through all of the tabs before logging out. The script is extremely basic. For a more realistic load test, you want a combination of scripts running, some entering data, some triggering reports, etc.</p>

<p>Create a \scripts subdirectory and populate it with the following code:</p>

<figure class='code'><figcaption><span>MainDemo_CycleThroughTabs.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* global test */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for Neustar:</span>
</span><span class='line'><span class="c1">// replace the following with the public address of the application server,</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetHost</span> <span class="o">=</span> <span class="s2">&quot;http://zerosharp-maindemo.elasticbeanstalk.com/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">virtualShare</span> <span class="o">=</span> <span class="s2">&quot;MainDemo.Web_deploy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for debug webserver:</span>
</span><span class='line'><span class="c1">// (local script validator doesn&#39;t always work against localhost,</span>
</span><span class='line'><span class="c1">// so we use the excellent localtest.me instead.)</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me:58404&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Settings for the build server or IIS:</span>
</span><span class='line'><span class="c1">//var targetHost = &quot;http://localtest.me/&quot;;</span>
</span><span class='line'><span class="c1">//var virtualShare = &quot;MainDemo.Web&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thinkTimeInSeconds</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You an optionally set the simulated bandwidth for the script</span>
</span><span class='line'><span class="c1">// (max of 100KB/sec). A value of -1 means do not limit.</span>
</span><span class='line'><span class="c1">// E.g., </span>
</span><span class='line'><span class="c1">// var bandwidthLimit = 50 * 1024 * 8; // 50KB/sec</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bandwidthLimit</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="nx">test</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selenium</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getSelenium</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Support functions</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">think</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">test</span><span class="p">.</span><span class="nx">isValidation</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">test</span><span class="p">.</span><span class="nx">pause</span><span class="p">(</span><span class="nx">thinkTimeInSeconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">waitForCallbacks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForCondition</span><span class="p">(</span><span class="s2">&quot;(typeof selenium.browserbot.getUserWindow().xafHasPendingCallbacks === &#39;function&#39;) &amp;&amp; (selenium.browserbot.getUserWindow().xafHasPendingCallbacks() === false);&quot;</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogin</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Login&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">targetHost</span> <span class="o">+</span> <span class="nx">virtualShare</span> <span class="o">+</span> <span class="s2">&quot;/Default.aspx&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviUserName_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s2">&quot;xpath=//input[contains(@id,&#39;_xaf_dviPassword_Edit_I&#39;)]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;Logon_PopupActions_Menu_DXI0_T&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepLogoff</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">expectedSubstring</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - Logoff&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//li[@class=&#39;dxm-item&#39;]/div[@class=&#39;dxm-content dxm-hasText&#39;]//a[@class=&#39;dx dxalink&#39; and text()=&#39;Log Off&#39;]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForPageToLoad</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expectedSubstring</span> <span class="o">=</span> <span class="s2">&quot;Logout.html&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="nx">maintabCaption</span><span class="p">,</span> <span class="nx">tabCaption</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// viewCaption is optional</span>
</span><span class='line'>    <span class="nx">viewCaption</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">viewCaption</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">tabCaption</span> <span class="o">:</span> <span class="nx">viewCaption</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">step</span> <span class="o">=</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginStep</span><span class="p">(</span><span class="s2">&quot;Step &quot;</span> <span class="o">+</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; - &quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">selenium</span><span class="p">.</span><span class="nx">isVisible</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//td[@class=&#39;dxtc&#39; and text()=&#39;&quot;</span> <span class="o">+</span> <span class="nx">maintabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">waitForElementPresent</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;//div[@class=&#39;dxm-content dxm-hasText&#39; and starts-with(@id, &#39;Horizontal_NTAC_PC_M&#39;)]//a[@class=&#39;dx dxalink&#39; and contains(text(), &#39;&quot;</span> <span class="o">+</span> <span class="nx">tabCaption</span> <span class="o">+</span> <span class="s2">&quot;&#39;)]/..&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">waitForCallbacks</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertElementPresent</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">assertText</span><span class="p">(</span><span class="s2">&quot;Horizontal_VCC_VSL&quot;</span><span class="p">,</span> <span class="nx">viewCaption</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endStep</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">think</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">initializetest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selenium</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">bandwidthLimit</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="p">.</span><span class="nx">setSimulatedBps</span><span class="p">(</span><span class="nx">bandwidthLimit</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializetest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">stepLogin</span><span class="p">(</span><span class="s2">&quot;Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//stepNavigateToTab(&quot;Default&quot;, &quot;Contact&quot;);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Task&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Department&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Scheduler Event&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;My Details&quot;</span><span class="p">,</span> <span class="s2">&quot;User - Sam&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Note&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Payment&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Position&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Resume&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;Role&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Default&quot;</span><span class="p">,</span> <span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Analysis&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepNavigateToTab</span><span class="p">(</span><span class="s2">&quot;Reports&quot;</span><span class="p">,</span> <span class="s2">&quot;Reports&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">stepLogoff</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">closeBrowser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="p">.</span><span class="nx">endTransaction</span><span class="p">();</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Neustar</h2>

<p>In a future post we will create multiple test runners in the Amazon cloud using the <a href="https://home.wpm.neustar.biz/">Neustar web performance tool</a> (formerly BrowserMob). Neustar will gather statistics about each scripts reponse times and provide a load test report including details of any test failures.</p>

<p>For now we will verify locally that the Selenium script above works as expected.</p>

<h3>Installing the Neustar local script validator</h3>

<p>In order to verify that our script is supported by the Neustar framework, we need to install their <a href="http://static.wpm.neustar.biz/tools/local-validator.tar.gz">local script validator</a>. Download it and unzip it to a subdirectory of the MainDemo.</p>

<p>There are <a href="http://community.webmetrics.com/community/wpm/blog/2012/10/02/neustar-script-local-validator-user-guide-for-windows">instructions for setting up local script validation here</a>.</p>

<p>To run the script locally call the following:</p>

<pre><code>&gt; script-validator-4.8.81\bin\validator.bat CycleThroughTabs.js -keepbrowseronerror
</code></pre>

<p>I had some problems getting the NeuStar script validator to work in 64-bit Windows 8. The script validator instructions recommend FireFox 12 but I am using version 19. For the record I am using:</p>

<ul>
<li>DevExpress MainDemo 12.2.7</li>
<li>NeuStar localscriptvalidator 4.8.81</li>
<li>Mozilla FireFox 19</li>
<li>Java 7.0.90</li>
</ul>


<p>You need to modify your <code>C:\Users\&lt;Username&gt;\.wpm\config.properties</code> file as follows:</p>

<figure class='code'><figcaption><span>config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">FF</span><span class="o">=</span><span class="s">C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, for some reason, I could not get the local script validator to run against localhost. I kept getting the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARN 03/28 12:38:28 b.n.w.a.s.JavaScrip~ - Got script exception
</span><span class='line'>org.mozilla.javascript.WrappedException: Wrapped biz.neustar.webmetrics.agent.ap
</span><span class='line'>i.HttpErrorException: No valid HTTP Response received while navigating to URL 'h
</span><span class='line'>ttp://localhost:58404/Default.aspx' (CycleThroughTabs.js#50)</span></code></pre></td></tr></table></div></figure>


<p>The easiest solution was to change the localhost address in the javascript file to the excellent localhost alternative <a href="http://readme.localtest.me/">localtest.me</a>.</p>

<p>Now when I run the script using the local validator with</p>

<pre><code>&gt; validator cyclethroughtabs.js
</code></pre>

<p>I see Firefox startup after a few seconds and the script correctly cycles through all of the tabs and then exits.</p>

<p>We will use this scenario as the basis of a load test in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Part 1 - Deploying]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/"/>
    <updated>2013-03-22T11:21:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying</id>
    <content type="html"><![CDATA[<p>This is the first part of a tutorial about load testing XAF applications. See the <a href="http://ZeroSharp.github.com/load-testing-xaf-overview/">overview</a> for a bit of background. In this post we set up the target webserver.</p>

<p>You can target any machine which has a publicly available web address, but for this tutorial, I&#8217;m&#8217; deploying the MainDemo to the Amazon cloud, by following the instructions in <a href="http://ZeroSharp.github.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-1-putting-the-database-in-the-cloud/">Part 1</a> and <a href="http://blog.zerosharp.com/deploy-xaf-asp-dot-net-applications-to-amazon-web-services-part-2-publishing-maindemo/">Part 2</a> of my previous series about Amazon Web Services.</p>

<p>I am using version 12.2.7 of the DevExpress XAF MainDemo. There are a couple of extra changes to make to the web.config.</p>

<ul>
<li>Set debug to false <code>&lt;compilation targetFramework="4.0" debug="false"&gt;</code> in the <code>&lt;compilation&gt;</code> section of <code>&lt;system.web&gt;</code></li>
<li>Switch to <em>Release</em> mode before deploying.</li>
</ul>


<p>There are a couple of differences compared to the tutorial:</p>

<ul>
<li>I chose a <em>Medium</em> instance instead of a <em>Micro</em> instance for EC2 (the web server) and deployed it against IIS 8.</li>
<li>For RDS (the database), I stuck with a <em>Micro</em> instance.</li>
</ul>


<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-001.png"></p>

<p>For the load test, it is also important to disable the automatic health checks performed by the load balancer.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/load-testing/load-testing-002.png"></p>

<p>The reason for this is that we are trying to determine the breaking point of our application. If the elastic load balancer detects that a system is struggling, it might automatically flag it as unhealthy and replace it with a newly launched instance. While this behaviour might be desirable for a production system, it doesn&#8217;t make sense for a load test.</p>

<p>Make sure you can connect to your installation from a web browser before continuing. I chose to deploy to a Windows 2012 instance running IIS 8.0 (which was not available when I wrote my previous XAF AWS tutorial) and I had a little trouble with the URL. If I navigate to the application&#8217;s base URL (<em>http://zerosharp-maindemo.elasticbeanstalk.com/</em> in my case), then I get forwarding problems after logging in. Instead, I navigate to the full address <em>http://zerosharp-maindemo.elasticbeanstalk.com/MainDemo.Web_deploy/Default.aspx</em> and everything works. I&#8217;ll try to look into it later, but it&#8217;s not important for the load testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing XAF: Overview]]></title>
    <link href="http://ZeroSharp.github.com/load-testing-xaf-overview/"/>
    <updated>2013-03-12T18:20:00+00:00</updated>
    <id>http://ZeroSharp.github.com/load-testing-xaf-overview</id>
    <content type="html"><![CDATA[<p>Over the next few posts, I will demonstrate how to load test XAF web applications.</p>

<h2>History</h2>

<p>Performance testing has traditionally been difficult and expensive. A few years ago, to do it well required a powerful piece of dedicated load testing software such as HP LoadRunner (typical cost back in 2007: USD 50,000-100,000 or more per year!). This software was capable of simulating multiple virtual users via the use of recorded scripts and providing detailed performance statistics. Usually the cost was increased further increased by the need for powerful hardware to be able to run the application.</p>

<p>In 2007 we were required by a big customer (a global bank) to provide load testing statistics for our expressApp Framework application. We could not afford anything as sophisticated as LoadRunner so we went with a cheaper alternative (NeoLoad, which was still several thousand per year). It was extremely painstaking work to produce a test. The approach was to record the http requests (as a stream of text values) and write a script to check the http response. Since there was no real browser involved, it was very difficult to determine if our test was really representative. Several machines in the office had to be dedicated to simulating virtual users. Nobody was allowed to use the internet for fear of skewing the results during a test. If an error occurred, it was almost impossible to determine what went wrong. We wrestled with it and managed to fulfill our requirements, but it was all a lot of effort for no real return.</p>

<p>Part of the problem was certainly that XAF is complex to test. The user interface is rich and makes use of complex controls. Most of these load testing tools work better when targetting a simple <code>&lt;INPUT type="button"&gt;</code> rather than an image of a button that sometimes is not even clickable until the mouse has hovered over it. DevExpress have made it easy to run tests via their EasyTests, but no load testing tool supports them yet. (They have informed me it&#8217;s in their plans&#8230;)</p>

<h2>Enter the cloud</h2>

<p><span class='pullquote-right' data-pullquote='The increased availability of cheap cloud-based virtualised machines has revolutionised load testing.'></p>

<p>The basic idea is this: instead of simulating users with specialised software, why not fire up a virtual machine and test with a real browser instance which is &#8216;remote controlled&#8217; via a script.</p>

<p>The increased availability of cheap cloud-based virtualised machines has revolutionised load testing. The rental of the virtualised machines is not free, but it is very cheap.  In about 2008, I started using the Amazon cloud to perform load tests. Our basic test costs us about USD 10.00 per run. We probably run this a dozen times a year, so our total cost is about USD 120.00 per year.
</span></p>

<p>We get better statistics than we ever got out of NeoLoad. We are confident that the test is realistic and we can compare with the actual performance of our production environments. We have been able to find and solve memory leak problems and various tricky multi-user problems with these tests.</p>

<p>Load testing is still a complex business. There are a lot of pieces to put together, but with the cloud, each piece is relatively simple and cheap.</p>

<h2>The solution</h2>

<ul>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-1-deploying/">Part 1</a>, we install the DevExpress MainDemo on an Amazon EC2 instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-2-selenium/">Part 2</a>, we use Selenium to write a script which will run on the client machines to control a real browser instance.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-3-uploading-and-validating-the-virtual-user-script/">Part 3</a>, we create a NeuStar Web Performance test and validate the script.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-4-launching-the-load-test/">Part 4</a>, we launch a performance test and monitor the server.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-part-5-analysis/">Part 5</a>, we analyse the results of the clients.</li>
<li>In <a href="http://ZeroSharp.github.com/load-testing-xaf-bonus-simultaneous-easytests/">a bonus part</a>, we learn how to run multiple simultaneous EasyTests as an alternative method of isolating performance and concurrency problems.</li>
</ul>


<p>If you follow all the steps, expect to pay a handful of dollars in Amazon EC2 costs and a few more in Neustar costs. You could alternatively skip step 1 and target one of your own development machines instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to recursively change file ownership]]></title>
    <link href="http://ZeroSharp.github.com/how-to-recursively-change-file-ownership/"/>
    <updated>2013-02-28T17:40:00+00:00</updated>
    <id>http://ZeroSharp.github.com/how-to-recursively-change-file-ownership</id>
    <content type="html"><![CDATA[<p>I recently ran into some file ownership trouble after cloning a bitbucket repository.</p>

<p>The following script saved my bacon.</p>

<figure class='code'><figcaption><span>FixOwnership.ps1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="c"># This script recursively fixes the ownership on the files in the </span>
</span><span class='line'><span class="c"># current and subdirectories.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$acct1</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Principal</span><span class="p">.</span><span class="n">NTAccount</span><span class="p">(</span><span class="s1">&#39;Administrators&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nv">$profilefolder</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="p">.</span>
</span><span class='line'><span class="nv">$acl1</span> <span class="p">=</span> <span class="nv">$profilefolder</span><span class="p">.</span><span class="n">GetAccessControl</span><span class="p">()</span>
</span><span class='line'><span class="nv">$acl1</span><span class="p">.</span><span class="n">SetOwner</span><span class="p">(</span><span class="nv">$acct1</span><span class="p">)</span>
</span><span class='line'><span class="n">dir</span> <span class="n">-r</span> <span class="p">.</span> <span class="p">|</span> <span class="nb">set-acl</span> <span class="n">-aclobject</span> <span class="nv">$acl1</span>
</span><span class='line'><span class="n">pause</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colourful git command line]]></title>
    <link href="http://ZeroSharp.github.com/colourful-git-command-line/"/>
    <updated>2013-02-14T05:10:00+00:00</updated>
    <id>http://ZeroSharp.github.com/colourful-git-command-line</id>
    <content type="html"><![CDATA[<p>For Valentine&#8217;s Day, why not make your git command line a little more colourful.</p>

<pre><code>git config --global color.ui true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A C# Developer's Adventures in iOS - Integrating Git and MonoDevelop]]></title>
    <link href="http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-integrating-git-and-monodevelop/"/>
    <updated>2013-02-08T14:52:00+00:00</updated>
    <id>http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-integrating-git-and-monodevelop</id>
    <content type="html"><![CDATA[<p>This is the second post in a series about iOS development from the perspective of a C# developer.</p>

<p>In the <a href="http://ZeroSharp.github.com/a-c-number-developers-adventures-in-ios-getting-started/">previous post in the series</a> we got started with MonoTouch and installed MonoDevelop and XCode. In this post, we&#8217;ll look at how to set up version control for an existing MonoTouch solution.</p>

<h2>Version Control</h2>

<p>I didn&#8217;t have enough time <a href="http://ZeroSharp.github.com/how-i-went-from-c-number-developer-to-iphone-developer-in-a-weekend/">at the hackathon</a> to learn how to set up version control for MonoDevelop on a Mac. So let&#8217;s fix that straight away.</p>

<h3>Git</h3>

<p>I&#8217;m much more familiar with Mercurial, and while it&#8217;s possible to get TortoiseHg to run on a Mac, it seems that the Mac world prefers Git. MonoDevelop has Git integrated which I like very much so I&#8217;ll go with Git for now. I can always switch later.</p>

<h3>Ignore files</h3>

<p>Open a terminal and navigate to the root of your existing source code folder.</p>

<pre><code>$ cd Projects/Babingo # replace with /path/to/your/repo
</code></pre>

<p>You need a .gitignore file to avoid version controlling compiled sources and user settings unnecessarily.</p>

<p>Create a new file .gitignore as follows. You can type <code>nano .gitignore</code> if you don&#8217;t have a favourite text editor.</p>

<figure class='code'><figcaption><span>.gitignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># OSX specific
</span><span class='line'>.DS_Store
</span><span class='line'>*.lock
</span><span class='line'>*.swp
</span><span class='line'>*.lock
</span><span class='line'>
</span><span class='line'># Build folders
</span><span class='line'>[Bb]in/
</span><span class='line'>[Oo]bj/
</span><span class='line'>
</span><span class='line'># User specific
</span><span class='line'>*.userprefs
</span><span class='line'>*.usertasks
</span><span class='line'>
</span><span class='line'># Mono project files
</span><span class='line'>*~
</span><span class='line'>*.pidb
</span><span class='line'>*.resources
</span><span class='line'>test-results/</span></code></pre></td></tr></table></div></figure>


<h3>Initial commit</h3>

<p>Now initialise a repository for your existing source code and commit it.</p>

<pre><code>$ git init
$ git add .
$ git commit -m "Initial commit."
</code></pre>

<h3>BitBucket</h3>

<p>Next create a private repository on BitBucket.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-001.png"></p>

<p>You will need the address for your repository from the BitBucket page circled in red below.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-003.png"></p>

<p>Then, from the terminal, push the code to BitBucket. Replace the Url below with the address of your your own repository.</p>

<pre><code>$ git remote add origin https://shamp00@bitbucket.org/shamp00/babingo.git     
$ git push -u origin --all
</code></pre>

<h3>Integration with MonoDevelop</h3>

<p>Open your solution in MonoDevelop and select the <code>Checkout...</code> option from the <code>Version Control</code> menu.</p>

<p><img src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-002.png"></p>

<p>Select <code>Git</code> as the type of repository and put the address to your git repository in the <code>Url</code> field. The rest of the fields are populated automatically. You need to set the <code>Target Directory</code> to the location of your local repository including the trailing slash.</p>

<p>When you click Ok, you will be prompted for your BitBucket credentials.</p>

<p><img class="right" src="http://ZeroSharp.github.com/images/blog/adventures-in-ios-bitbucket-004.png" width="379" height="92"></p>

<p>That&#8217;s it. Now Git is integrated into your MonoDevelop environment. For instance, you can right-click in the editor to view the diff or the log of the current file, push changes, commit messages locally, etc.</p>

<p>Note that instead of BitBucket, it would have been just as straightforward to host the repository on GitHub instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clone your Octopress to blog from two places]]></title>
    <link href="http://ZeroSharp.github.com/clone-your-octopress-to-blog-from-two-places/"/>
    <updated>2013-02-01T11:59:00+00:00</updated>
    <id>http://ZeroSharp.github.com/clone-your-octopress-to-blog-from-two-places</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://ZeroSharp.github.com/images/blog/clone-your-octopress-001.png"></p>

<p>This post covers how recreate a local repository of your Octopress blog. Perhaps you&#8217;ve accidentally lost it, or perhaps you would like to be able to blog from two different places. Recently <a href="http://ZeroSharp.github.com/the-best-pc-laptop-is-a-mac/">I bought a new computer</a> and I wanted to be able to blog from both my desktop and my laptop.</p>

<h3>How Octopress works</h3>

<p>Octopress repositories have two branches, <code>source</code> and <code>master</code>. The <code>source</code> branch contains the files that are used to generate the blog and the <code>master</code> contains the blog itself.</p>

<p>When the local folders are initially configured according to the <a href="http://octopress.org/docs/setup/">Octopress Setup Guide</a>, the <code>master</code> branch is stored in a subfolder named &#8216;_deploy&#8217;. Since the folder name begins with an underscore, it is ignored when you <code>git push origin source</code>. Instead, the <code>master</code> branch (which contains your blog posts) gets updated when you <code>rake deploy</code>.</p>

<h2>Recreating a local Octopress repository</h2>

<p>To recreate the local directory structure of an existing Octopress blog, follow these instructions.</p>

<h3>Clone your blog to the new machine</h3>

<p>First you need to clone the <code>source</code> branch to the local octopress folder.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.com.git octopress
</code></pre>

<p>Then clone the <code>master</code> branch to the _deploy subfolder.</p>

<pre><code>$ cd octopress
$ git clone git@github.com:username/username.github.com.git _deploy 
</code></pre>

<p>Then run the rake installation to configure everything</p>

<pre><code>$ gem install bundler
$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
$ bundle install
$ rake setup_github_pages
</code></pre>

<p>It will prompt you for your repository URL.</p>

<pre><code>Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
</code></pre>

<p>That&#8217;s you setup with a new local copy of your Octopress blog.</p>

<h3>Pushing changes from two different machines</h3>

<p>If you want to blog from more than one computer, you need to make sure that you push everything before switching computers. From the first machine do the following whenever you&#8217;ve made changes:</p>

<pre><code>$ rake generate
$ git add .
$ git commit -am "Some comment here." 
$ git push origin source  # update the remote source branch 
$ rake deploy             # update the remote master branch
</code></pre>

<p>Then on the other machine, you need to pull those changes.</p>

<pre><code>$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></pre>

<p>Of course, it might be easier to deploy everything from a thumb drive instead&#8230;</p>
]]></content>
  </entry>
  
</feed>
